{"version":3,"file":"static/js/246.7873b54a.chunk.js","mappings":"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","sources":["api/student.ts","api/axios.ts","api/scoreAPI.ts","api/examAPI.ts","views/ScoreManagement.tsx"],"sourcesContent":["import axiosInstance from './axios';\r\nimport axios from 'axios';\r\n\r\n// 创建一个专用于直接请求后端的axios实例\r\nconst directAxios = axios.create({\r\n  baseURL: 'http://124.70.74.246:8081',\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器 - 添加认证令牌\r\ndirectAxios.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\ninterface Student {\r\n  id?: number;\r\n  name: string;\r\n  studentNumber: string;\r\n  gender: string;\r\n  birthday?: string;\r\n  birthDate?: string;\r\n  parentName?: string;\r\n  parentPhone?: string;\r\n  address?: string;\r\n  notes?: string;\r\n  classInfo?: any;\r\n  classId?: number;\r\n  className?: string;\r\n}\r\n\r\ninterface PagedResponse<T> {\r\n  content: T[];\r\n  page: number;\r\n  size: number;\r\n  totalElements: number;\r\n  totalPages: number;\r\n  last: boolean;\r\n  number: number;\r\n  message?: string;\r\n}\r\n\r\n/**\r\n * 获取所有学生\r\n * @returns Promise\r\n */\r\nexport const getAllStudents = async () => {\r\n  return await directAxios.get('/api/students');\r\n};\r\n\r\n/**\r\n * 分页获取所有学生\r\n * @param page 页码\r\n * @param size 每页大小\r\n * @returns Promise\r\n */\r\nexport const getAllStudentsPaged = async (page: number = 0, size: number = 10) => {\r\n  console.log('开始获取学生分页数据，直接请求后端');\r\n  return await directAxios.get(`/api/students/paged?page=${page}&size=${size}`);\r\n};\r\n\r\n/**\r\n * 根据班级ID获取学生\r\n * @param classId 班级ID\r\n * @returns Promise\r\n */\r\nexport const getStudentsByClass = async (classId: number) => {\r\n  return await directAxios.get(`/api/students/class/${classId}`);\r\n};\r\n\r\n/**\r\n * 分页获取班级学生\r\n * @param classId 班级ID\r\n * @param page 页码\r\n * @param size 每页大小\r\n * @returns Promise\r\n */\r\nexport const getStudentsByClassPaged = async (classId: number, page: number = 0, size: number = 10) => {\r\n  return await directAxios.get(`/api/students/class/${classId}/paged?page=${page}&size=${size}`);\r\n};\r\n\r\n/**\r\n * 根据姓名搜索学生\r\n * @param name 学生姓名\r\n * @returns Promise\r\n */\r\nexport const searchStudents = async (name: string) => {\r\n  return await directAxios.get(`/api/students/search?name=${name}`);\r\n};\r\n\r\n/**\r\n * 分页搜索学生\r\n * @param name 学生姓名\r\n * @param page 页码\r\n * @param size 每页大小\r\n * @returns Promise\r\n */\r\nexport const searchStudentsPaged = async (name: string, page: number = 0, size: number = 10) => {\r\n  return await directAxios.get(`/api/students/search/paged?name=${name}&page=${page}&size=${size}`);\r\n};\r\n\r\n/**\r\n * 根据ID获取学生\r\n * @param id 学生ID\r\n * @returns Promise\r\n */\r\nexport const getStudentById = async (id: number) => {\r\n  return await directAxios.get(`/api/students/${id}`);\r\n};\r\n\r\n/**\r\n * 根据学号获取学生\r\n * @param studentNumber 学号\r\n * @returns Promise\r\n */\r\nexport const getStudentByNumber = async (studentNumber: string) => {\r\n  return await directAxios.get(`/api/students/number/${studentNumber}`);\r\n};\r\n\r\n/**\r\n * 创建学生\r\n * @param student 学生信息\r\n * @returns Promise\r\n */\r\nexport const createStudent = async (student: Student) => {\r\n  return await directAxios.post('/api/students', student);\r\n};\r\n\r\n/**\r\n * 更新学生信息\r\n * @param id 学生ID\r\n * @param student 学生信息\r\n * @returns Promise\r\n */\r\nexport const updateStudent = async (id: number, student: Student) => {\r\n  return await directAxios.put(`/api/students/${id}`, student);\r\n};\r\n\r\n/**\r\n * 删除学生\r\n * @param id 学生ID\r\n * @returns Promise\r\n */\r\nexport const deleteStudent = async (id: number) => {\r\n  return await directAxios.delete(`/api/students/${id}`);\r\n};\r\n\r\n/**\r\n * 分配学生到班级\r\n * @param studentId 学生ID\r\n * @param classId 班级ID\r\n * @returns Promise\r\n */\r\nexport const assignStudentToClass = async (studentId: number, classId: number) => {\r\n  return await directAxios.put(`/api/students/${studentId}/assign/${classId}`);\r\n};\r\n\r\n/**\r\n * 批量导入学生\r\n * @param formData 包含文件和班级ID的表单数据\r\n * @returns Promise\r\n */\r\nexport const batchImportStudents = async (formData: FormData) => {\r\n  return await directAxios.post('/api/students/batch', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data'\r\n    }\r\n  });\r\n}; ","import axios from 'axios';\n\n// 不设置baseURL，使用相对路径以便代理可以正常工作\nconst axiosInstance = axios.create({\n  timeout: 30000, // 30秒超时\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 请求拦截器 - 添加认证令牌\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    \n    // 确保所有请求URL都有正确的前缀\n    if (config.url && !config.url.startsWith('/')) {\n      config.url = '/' + config.url;\n    }\n    \n    // 添加详细请求日志\n    console.log(`发送请求: ${config.method?.toUpperCase()} ${config.url}`);\n    console.log(`请求头:`, config.headers);\n    if (config.data) {\n      console.log(`请求数据:`, typeof config.data === 'object' ? { ...config.data, password: config.data.password ? '***' : undefined, newPassword: config.data.newPassword ? '***' : undefined } : config.data);\n    }\n    \n    // 添加认证头\n    if (token) {\n      console.log('添加认证头: Bearer Token');\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    return config;\n  },\n  (error) => {\n    console.error('请求错误:', error);\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器 - 处理错误\naxiosInstance.interceptors.response.use(\n  (response) => {\n    // 添加响应日志\n    console.log(`响应: ${response.status} ${response.config.url}`);\n    console.log('响应数据:', response.data);\n    \n    // 返回完整的响应对象\n    return response;\n  },\n  (error) => {\n    if (error.code === 'ECONNABORTED' && error.message && error.message.includes('timeout')) {\n      console.error('请求超时:', error.config.url);\n      // 可以在这里添加重试逻辑\n    } \n    else if (error.response) {\n      console.error('响应错误:', error.response.status, error.response.data);\n      \n      // 处理401未授权错误或403权限不足错误\n      if ((error.response.status === 401 || error.response.status === 403)) {\n        // 检查是否是修改密码的请求\n        const isChangePasswordRequest = error.config.url && \n          (error.config.url.includes('/auth/change-password') || \n           error.config.url.includes('/api/auth/change-password') ||\n           error.config.url.includes('/auth/reset-password-with-code') ||\n           error.config.url.includes('/api/auth/reset-password-with-code'));\n        \n        if (isChangePasswordRequest) {\n          console.log('密码相关请求失败，但不重定向');\n          // 对于密码相关的请求，不进行重定向，让组件自己处理错误\n          return Promise.reject(error);\n        }\n        \n        console.error('认证错误:', error.response.data);\n        \n        // 清除令牌并重定向到登录页面\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        \n        // 避免在登录页面再次触发重定向\n        if (!window.location.pathname.includes('/login')) {\n          // 跳转到登录页\n          window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);\n        }\n      }\n    } \n    else {\n      console.error('网络错误:', error.message);\n    }\n    \n    // 处理其他错误\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance; ","import axios from './axios';\r\nimport { Score, ScoreSaveRequest, PaginatedResponse } from '../types/score';\r\n\r\n// 创建一个专用于直接请求后端的axios实例\r\nconst directAxios = axios.create({\r\n  baseURL: 'http://124.70.74.246:8081',\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器 - 添加认证令牌\r\ndirectAxios.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 获取考试的成绩列表\r\nexport const getScoresByExamId = async (examId: number, page: number = 0, size: number = 10, subjectId?: number) => {\r\n  const params: any = { page, size };\r\n  if (subjectId) {\r\n    params.subjectId = subjectId;\r\n  }\r\n  \r\n  console.log(`正在请求成绩数据: /api/scores/student-scores/exam/${examId}?page=${page}&size=${size}${subjectId ? '&subjectId=' + subjectId : ''}`);\r\n  return directAxios.get<PaginatedResponse<any>>(`/api/scores/student-scores/exam/${examId}`, {\r\n    params\r\n  });\r\n};\r\n\r\n// 保存学生成绩\r\nexport const saveStudentScore = async (scoreData: ScoreSaveRequest) => {\r\n  console.log('保存学生成绩:', scoreData);\r\n  return directAxios.post(`/api/scores/manual`, scoreData);\r\n};\r\n\r\n// 导出考试成绩\r\nexport const exportExamScores = async (examId: number) => {\r\n  const response = await directAxios.get(`/api/scores/export`, {\r\n    params: { examId },\r\n    responseType: 'blob'\r\n  });\r\n  \r\n  // 创建下载链接\r\n  const url = window.URL.createObjectURL(new Blob([response.data]));\r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  \r\n  // 从响应头获取文件名\r\n  const contentDisposition = response.headers['content-disposition'];\r\n  let filename = `成绩表_${examId}.xlsx`;\r\n  \r\n  if (contentDisposition) {\r\n    const filenameMatch = contentDisposition.match(/filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/);\r\n    if (filenameMatch && filenameMatch[1]) {\r\n      filename = filenameMatch[1].replace(/['\"]/g, '');\r\n    }\r\n  }\r\n  \r\n  link.setAttribute('download', filename);\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  window.URL.revokeObjectURL(url);\r\n};\r\n\r\n// 下载成绩导入模板\r\nexport const downloadScoreTemplate = async (examId: number) => {\r\n  const response = await directAxios.get(`/api/scores/template/download`, {\r\n    params: { examId },\r\n    responseType: 'blob'\r\n  });\r\n  \r\n  // 创建下载链接\r\n  const url = window.URL.createObjectURL(new Blob([response.data]));\r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.setAttribute('download', `成绩导入模板_${examId}.xlsx`);\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  window.URL.revokeObjectURL(url);\r\n};\r\n\r\n// 从Excel导入成绩\r\nexport const importScoresFromExcel = async (examId: number, file: File) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  formData.append('examId', examId.toString());\r\n  \r\n  console.log(`正在导入成绩数据: examId=${examId}, fileName=${file.name}`);\r\n  return directAxios.post(`/api/scores/import`, formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data'\r\n    }\r\n  });\r\n}; ","import axios from 'axios';\r\nimport { Exam } from '../types/score';\r\nimport axiosInstance from './axios';\r\n\r\n// 创建一个专用于直接请求后端的axios实例\r\nconst directAxios = axios.create({\r\n  baseURL: 'http://124.70.74.246:8081',\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器 - 添加认证令牌\r\ndirectAxios.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\ninterface ExamSubjectDTO {\r\n  subject: {\r\n    id: number;\r\n  };\r\n  subjectName: string;\r\n  fullScore: number;\r\n}\r\n\r\ninterface ExamForm {\r\n  id?: number | null;\r\n  examName: string;\r\n  examDate: string;\r\n  description?: string;\r\n  classInfo?: {\r\n    id: number;\r\n  } | null;\r\n  examSubjects: ExamSubjectDTO[];\r\n}\r\n\r\n// 获取所有考试\r\nexport const getAllExams = async () => {\r\n  console.log('获取所有考试，直接请求后端');\r\n  return directAxios.get<Exam[]>('/api/exams');\r\n};\r\n\r\n// 根据ID获取考试详情\r\nexport const getExamById = async (examId: number) => {\r\n  return directAxios.get<Exam>(`/api/exams/${examId}`);\r\n};\r\n\r\n// 根据班级获取考试\r\nexport const getExamsByClass = (classId: string) => {\r\n  return directAxios.get(`/api/exams/class/${classId}`);\r\n};\r\n\r\n// 根据状态获取考试\r\nexport const getExamsByStatus = (status: string) => {\r\n  return directAxios.get(`/api/exams/status/${status}`);\r\n};\r\n\r\n// 创建新考试\r\nexport const createExam = async (examData: Partial<Exam>) => {\r\n  return directAxios.post('/api/exams', examData);\r\n};\r\n\r\n// 更新考试信息\r\nexport const updateExam = async (examId: number, examData: Partial<Exam>) => {\r\n  return directAxios.put(`/api/exams/${examId}`, examData);\r\n};\r\n\r\n// 删除考试\r\nexport const deleteExam = async (examId: number) => {\r\n  return directAxios.delete(`/api/exams/${examId}`);\r\n};\r\n\r\n// 更新考试状态\r\nexport const updateExamStatus = async (examId: number, status: Exam['status']) => {\r\n  return directAxios.patch(`/api/exams/${examId}/status`, { status });\r\n}; ","import React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  CircularProgress,\r\n  TablePagination,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Chip,\r\n  Alert,\r\n  Divider,\r\n  IconButton,\r\n  Tooltip,\r\n  InputAdornment,\r\n  Stack,\r\n  SelectChangeEvent,\r\n  Snackbar,\r\n  Autocomplete\r\n} from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Download as DownloadIcon,\r\n  Upload as UploadIcon,\r\n  Save as SaveIcon,\r\n  Close as CloseIcon,\r\n  QuestionMark as QuestionMarkIcon\r\n} from '@mui/icons-material';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { zhCN } from 'date-fns/locale';\r\nimport axios from 'axios';\r\n\r\nimport * as examAPI from '../api/examAPI';\r\nimport * as scoreAPI from '../api/scoreAPI';\r\nimport * as studentAPI from '../api/student';\r\nimport { Exam, Score, Student, ScoreStatistics, ManualInputForm, ScoreSaveRequest } from '../types/score';\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n  backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\r\n  ...theme.typography.body2,\r\n  padding: theme.spacing(1),\r\n  color: theme.palette.text.secondary,\r\n}));\r\n\r\n// 扩展Student类型，添加comment和createdAt字段\r\ninterface ExtendedStudent extends Student {\r\n  comment?: string;\r\n  createdAt?: string;\r\n}\r\n\r\nconst ScoreManagement: React.FC = () => {\r\n  // 状态管理\r\n  const [exams, setExams] = useState<Exam[]>([]);\r\n  const [scores, setScores] = useState<ExtendedStudent[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [selectedExam, setSelectedExam] = useState<number | null>(null);\r\n  const [selectedSubject, setSelectedSubject] = useState<number | null>(null);\r\n  const [currentExam, setCurrentExam] = useState<Exam | null>(null);\r\n  const [total, setTotal] = useState<number>(0);\r\n  const [pageSize, setPageSize] = useState<number>(10);\r\n  const [currentPage, setCurrentPage] = useState<number>(1);\r\n  const [statistics, setStatistics] = useState<ScoreStatistics>({\r\n    highest: 0,\r\n    lowest: 0,\r\n    average: 0\r\n  });\r\n\r\n  // 对话框状态\r\n  const [scoreDialogVisible, setScoreDialogVisible] = useState<boolean>(false);\r\n  const [selectedStudent, setSelectedStudent] = useState<ExtendedStudent | null>(null);\r\n  const [submitLoading, setSubmitLoading] = useState<boolean>(false);\r\n  \r\n  // 批量录入对话框状态\r\n  const [batchDialogVisible, setBatchDialogVisible] = useState<boolean>(false);\r\n  const [batchInputType, setBatchInputType] = useState<number>(1); // 1: Excel导入, 2: 手动录入\r\n  const [batchLoading, setBatchLoading] = useState<boolean>(false);\r\n  const [batchSelectedExam, setBatchSelectedExam] = useState<number | null>(null);\r\n  const [uploadFile, setUploadFile] = useState<File | null>(null);\r\n  \r\n  // 手动录入表单数据\r\n  const [manualInput, setManualInput] = useState<ManualInputForm>({\r\n    studentNumber: '',\r\n    studentName: '',\r\n    scores: {}\r\n  });\r\n\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: '',\r\n    severity: 'success' as 'success' | 'info' | 'warning' | 'error'\r\n  });\r\n\r\n  // 添加学生列表状态\r\n  const [students, setStudents] = useState<any[]>([]);\r\n  const [searchStudentText, setSearchStudentText] = useState<string>('');\r\n  const [selectedSearchStudent, setSelectedSearchStudent] = useState<any | null>(null);\r\n\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  // 获取所有考试\r\n  const fetchExams = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await examAPI.getAllExams();\r\n      if (response.data && Array.isArray(response.data)) {\r\n        setExams(response.data.map(exam => ({\r\n          ...exam,\r\n          name: exam.examName || exam.name,\r\n          className: exam.classInfo?.className || '未知班级'\r\n        })));\r\n        \r\n        // 检查URL参数中是否有examId\r\n        const params = new URLSearchParams(location.search);\r\n        const examIdFromRoute = params.get('examId');\r\n        if (examIdFromRoute) {\r\n          const examToSelect = response.data.find(e => String(e.id) === String(examIdFromRoute));\r\n          if (examToSelect) {\r\n            setSelectedExam(examToSelect.id);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('获取考试列表失败:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [location.search]);\r\n\r\n  // 获取考试成绩和详细信息\r\n  const fetchExamScoresAndDetails = useCallback(async () => {\r\n    if (!selectedExam) return;\r\n    \r\n    setLoading(true);\r\n    setCurrentExam(null);\r\n    setScores([]);\r\n    \r\n    try {\r\n      const response = await examAPI.getExamById(selectedExam);\r\n      const examData = response.data;\r\n      \r\n      if (examData) {\r\n        // 映射考试科目数据，使用examSubject的ID而不是subject的ID\r\n        const mappedSubjects = examData.examSubjects?.map(es => ({\r\n          id: es.id || 0, // 使用examSubject的ID\r\n          name: es.subjectName || es.subject?.name || '未命名科目',\r\n          score: es.fullScore || 100\r\n        })) || [];\r\n        \r\n        console.log('考试科目数据:', mappedSubjects);\r\n        \r\n        setCurrentExam({\r\n          id: examData.id,\r\n          name: examData.examName || examData.name,\r\n          examDate: examData.examDate,\r\n          className: examData.classInfo?.className || 'N/A',\r\n          status: examData.status,\r\n          subjects: mappedSubjects,\r\n          classInfo: examData.classInfo\r\n        });\r\n        \r\n        // 获取该考试下的成绩\r\n        fetchScores();\r\n      }\r\n    } catch (error) {\r\n      console.error('获取考试信息失败:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [selectedExam]);\r\n\r\n  // 获取成绩数据\r\n  const fetchScores = useCallback(async () => {\r\n    if (!currentExam || !currentExam.id) {\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const response = await scoreAPI.getScoresByExamId(currentExam.id, currentPage - 1, pageSize, selectedSubject || undefined);\r\n      \r\n      if (response.data && response.data.content) {\r\n        const studentScores = response.data.content;\r\n        console.log('后端返回的学生成绩数据:', studentScores);\r\n        console.log('当前考试科目:', currentExam.subjects);\r\n        console.log('当前选中的科目ID:', selectedSubject);\r\n        \r\n        // 获取一个学生的成绩，查看科目ID\r\n        if (studentScores.length > 0) {\r\n          console.log('第一个学生的成绩:', studentScores[0].scores);\r\n          console.log('可用的科目ID:', Object.keys(studentScores[0].scores));\r\n        }\r\n        \r\n        // 直接使用后端返回的数据，只需要转换一下类型\r\n        const processedScores = studentScores.map(student => ({\r\n          ...student,\r\n          // 确保scores是Record<number, number>类型\r\n          scores: Object.entries(student.scores || {}).reduce((acc, [key, value]) => {\r\n            acc[Number(key)] = value as number;\r\n            return acc;\r\n          }, {} as Record<number, number | null>)\r\n        }));\r\n        \r\n        setScores(processedScores);\r\n        setTotal(response.data.totalElements || processedScores.length);\r\n        \r\n        // 计算统计数据\r\n        calculateStatistics(processedScores);\r\n      }\r\n    } catch (error) {\r\n      console.error('获取成绩数据失败:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [currentExam, currentPage, pageSize, selectedSubject]);\r\n\r\n  // 计算统计数据\r\n  const calculateStatistics = (scoresData: ExtendedStudent[]) => {\r\n    if (scoresData.length === 0) {\r\n      setStatistics({\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0\r\n      });\r\n      return;\r\n    }\r\n    \r\n    const highest = Math.max(...scoresData.map(score => score.totalScore));\r\n    const lowest = Math.min(...scoresData.map(score => score.totalScore));\r\n    \r\n    const sum = scoresData.reduce((acc, score) => acc + score.totalScore, 0);\r\n    const average = sum / scoresData.length;\r\n    \r\n    setStatistics({\r\n      highest,\r\n      lowest,\r\n      average\r\n    });\r\n  };\r\n\r\n  // 格式化日期\r\n  const formatDate = (dateString: string | Date | null) => {\r\n    if (!dateString) return '';\r\n    try {\r\n      // 如果日期已经是格式化的字符串，检查格式是否符合要求\r\n      if (typeof dateString === 'string' && dateString.includes('-')) {\r\n        // 尝试解析并重新格式化，确保格式一致\r\n        const date = new Date(dateString);\r\n        if (!isNaN(date.getTime())) {\r\n          return formatDateToYYYYMMDD(date);\r\n        }\r\n        return dateString;\r\n      }\r\n      // 否则尝试转换为Date对象并格式化为yyyy-MM-dd\r\n      const date = new Date(dateString);\r\n      return formatDateToYYYYMMDD(date);\r\n    } catch (e) {\r\n      return '日期无效';\r\n    }\r\n  };\r\n\r\n  // 将日期格式化为 yyyy-MM-dd\r\n  const formatDateToYYYYMMDD = (date: Date) => {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  // 状态样式和标签\r\n  const getStatusType = (status: Exam['status']) => {\r\n    switch (status) {\r\n      case 'PENDING': return 'info';\r\n      case 'IN_PROGRESS': return 'warning';\r\n      case 'FINISHED': return 'success';\r\n      case 'GRADED': return 'primary';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusLabel = (status: Exam['status']) => {\r\n    switch (status) {\r\n      case 'PENDING': return '未开始';\r\n      case 'IN_PROGRESS': return '进行中';\r\n      case 'FINISHED': return '已结束';\r\n      case 'GRADED': return '已评分';\r\n      default: return '未知';\r\n    }\r\n  };\r\n\r\n  // 是否是前三名学生\r\n  const isTopStudent = (student: ExtendedStudent) => {\r\n    return student.rank <= 3;\r\n  };\r\n\r\n  // 处理考试选择变化\r\n  const handleExamChange = (event: SelectChangeEvent<number>) => {\r\n    const examId = event.target.value as number;\r\n    setSelectedExam(examId);\r\n    setCurrentPage(1);\r\n    setSelectedSubject(null);\r\n  };\r\n\r\n  // 处理科目选择变化\r\n  const handleSubjectChange = (event: SelectChangeEvent<number>) => {\r\n    const value = event.target.value;\r\n    setSelectedSubject(value === 0 ? null : value as number);\r\n    setCurrentPage(1); // 重置页码\r\n  };\r\n\r\n  // 分页处理\r\n  const handleSizeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setPageSize(parseInt(event.target.value, 10));\r\n    setCurrentPage(1);\r\n  };\r\n\r\n  const handleCurrentChange = (event: unknown, newPage: number) => {\r\n    setCurrentPage(newPage + 1);\r\n  };\r\n\r\n  // 处理成绩变更\r\n  const handleScoreChange = (student: ExtendedStudent, subjectId: number, value: number) => {\r\n    // 更新本地状态\r\n    const updatedScores = [...scores];\r\n    const studentIndex = updatedScores.findIndex(s => s.id === student.id);\r\n    \r\n    if (studentIndex !== -1) {\r\n      // 更新成绩\r\n      updatedScores[studentIndex].scores[subjectId] = value;\r\n      \r\n      // 重新计算总分\r\n      let total = 0;\r\n      Object.keys(updatedScores[studentIndex].scores).forEach(id => {\r\n        total += updatedScores[studentIndex].scores[id] || 0;\r\n      });\r\n      updatedScores[studentIndex].totalScore = total;\r\n      \r\n      setScores(updatedScores);\r\n      \r\n      // 重新排序和更新排名\r\n      const sortedScores = [...updatedScores].sort((a, b) => b.totalScore - a.totalScore);\r\n      sortedScores.forEach((score, index) => {\r\n        score.rank = index + 1;\r\n      });\r\n      \r\n      // 更新统计数据\r\n      calculateStatistics(sortedScores);\r\n      \r\n      // 保存成绩\r\n      saveScore(student, subjectId, value);\r\n    }\r\n  };\r\n\r\n  // 保存单个科目成绩\r\n  const saveScore = async (student: ExtendedStudent, subjectId: number, value: number) => {\r\n    if (!currentExam?.id) return;\r\n    \r\n    // 构建请求数据\r\n    const scoreData: ScoreSaveRequest = {\r\n      examId: currentExam.id,\r\n      studentNumber: student.studentNumber,\r\n      studentName: student.studentName,\r\n      scores: { [subjectId]: value }\r\n    };\r\n    \r\n    try {\r\n      const response = await scoreAPI.saveStudentScore(scoreData);\r\n      if (response.data && (response.data.code === 200 || response.status === 200)) {\r\n        console.log('成绩保存成功');\r\n      }\r\n    } catch (error: any) {\r\n      console.error('成绩保存失败:', error);\r\n      showSnackbar(error.response?.data?.message || '成绩保存失败', 'error');\r\n    }\r\n  };\r\n\r\n  // 编辑学生成绩\r\n  const handleEditScore = (student: ExtendedStudent) => {\r\n    setSelectedStudent({...student});\r\n    setScoreDialogVisible(true);\r\n  };\r\n\r\n  // 显示提示信息\r\n  const showSnackbar = (message: string, severity: 'success' | 'info' | 'warning' | 'error' = 'success') => {\r\n    setSnackbar({\r\n      open: true,\r\n      message,\r\n      severity\r\n    });\r\n  };\r\n\r\n  // 关闭提示信息\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar(prev => ({\r\n      ...prev,\r\n      open: false\r\n    }));\r\n  };\r\n\r\n  // 保存学生成绩\r\n  const saveStudentScore = async () => {\r\n    if (!selectedStudent || !currentExam) return;\r\n    setSubmitLoading(true);\r\n    try {\r\n      // 过滤掉 null 值，并将 number 转换为 float\r\n      const filteredScores: Record<string, number> = {};\r\n      Object.keys(selectedStudent.scores).forEach(subjectId => {\r\n        const score = selectedStudent.scores[Number(subjectId)];\r\n        if (score !== null && score !== undefined) {\r\n          filteredScores[subjectId] = score;\r\n        }\r\n      });\r\n\r\n      // 构建请求数据\r\n      const scoreData = {\r\n        examId: currentExam.id,\r\n        studentNumber: selectedStudent.studentNumber,\r\n        studentName: selectedStudent.studentName,\r\n        scores: filteredScores\r\n      };\r\n      \r\n      const response = await scoreAPI.saveStudentScore(scoreData);\r\n      \r\n      if (response.data && (response.data.code === 200 || response.status === 200)) {\r\n        showSnackbar('保存成绩成功', 'success');\r\n        setScoreDialogVisible(false);\r\n        fetchScores();\r\n      }\r\n    } catch (error: any) {\r\n      showSnackbar(error.response?.data?.message || '保存成绩失败', 'error');\r\n    } finally {\r\n      setSubmitLoading(false);\r\n    }\r\n  };\r\n\r\n  // 批量录入成绩\r\n  const handleBatchInput = () => {\r\n    setBatchDialogVisible(true);\r\n    setBatchInputType(1);\r\n    setBatchSelectedExam(selectedExam);\r\n    resetManualInput();\r\n  };\r\n\r\n  // 下载成绩导入模板\r\n  const handleDownloadTemplate = () => {\r\n    if (!batchSelectedExam) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      scoreAPI.downloadScoreTemplate(batchSelectedExam);\r\n    } catch (error) {\r\n      console.error('下载模板失败:', error);\r\n    }\r\n  };\r\n\r\n  // 上传前检查\r\n  const handleBeforeUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (!batchSelectedExam) {\r\n      return;\r\n    }\r\n    \r\n    const file = event.target.files?.[0];\r\n    if (!file) return;\r\n    \r\n    const isExcel = file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || \r\n                    file.type === 'application/vnd.ms-excel';\r\n    if (!isExcel) {\r\n      return;\r\n    }\r\n    \r\n    setUploadFile(file);\r\n  };\r\n\r\n  // 确认批量录入\r\n  const handleConfirmBatchInput = async () => {\r\n    if (!batchSelectedExam) {\r\n      showSnackbar('请选择考试', 'warning');\r\n      return;\r\n    }\r\n    \r\n    if (batchInputType === 1) {\r\n      // Excel导入\r\n      if (uploadFile) {\r\n        setBatchLoading(true);\r\n        try {\r\n          console.log(`准备导入Excel成绩，考试ID: ${batchSelectedExam}, 文件名: ${uploadFile.name}`);\r\n          const response = await scoreAPI.importScoresFromExcel(batchSelectedExam, uploadFile);\r\n          console.log('导入成绩响应:', response);\r\n          \r\n          if (response.data && (response.data.code === 200 || response.status === 200)) {\r\n            const result = response.data.data;\r\n            console.log('导入结果详情:', result);\r\n            \r\n            let message = `成绩导入成功，共处理 ${result.totalCount} 条记录，成功 ${result.successCount} 条`;\r\n            if (result.failCount > 0) {\r\n              message += `，失败 ${result.failCount} 条`;\r\n            }\r\n            if (result.skipCount > 0) {\r\n              message += `，跳过 ${result.skipCount} 条`;\r\n            }\r\n            \r\n            if (result.errors && result.errors.length > 0) {\r\n              console.log('导入错误:', result.errors);\r\n              message += '。请查看控制台获取详细错误信息。';\r\n            }\r\n            \r\n            showSnackbar(message, result.successCount > 0 ? 'success' : 'warning');\r\n            \r\n            if (result.successCount > 0) {\r\n              setBatchDialogVisible(false);\r\n              \r\n              // 如果上传的成绩与当前选中的考试相同，则刷新成绩数据\r\n              if (batchSelectedExam === selectedExam) {\r\n                fetchExamScoresAndDetails();\r\n              }\r\n            }\r\n          } else {\r\n            console.error('导入成绩响应格式错误:', response);\r\n            showSnackbar('导入失败，响应格式错误', 'error');\r\n          }\r\n        } catch (error: any) {\r\n          console.error('成绩导入失败:', error);\r\n          let errorMessage = '成绩导入失败';\r\n          \r\n          if (error.response) {\r\n            console.error('错误响应:', error.response);\r\n            if (error.response.data && error.response.data.message) {\r\n              errorMessage = error.response.data.message;\r\n            } else if (error.response.statusText) {\r\n              errorMessage = `${errorMessage}: ${error.response.statusText}`;\r\n            }\r\n          } else if (error.message) {\r\n            errorMessage = `${errorMessage}: ${error.message}`;\r\n          }\r\n          \r\n          showSnackbar(errorMessage, 'error');\r\n        } finally {\r\n          setBatchLoading(false);\r\n        }\r\n      } else {\r\n        showSnackbar('请选择Excel文件', 'warning');\r\n      }\r\n    } else {\r\n      // 手动录入\r\n      if (!manualInput.studentNumber || !manualInput.studentName) {\r\n        showSnackbar('请选择学生', 'warning');\r\n        return;\r\n      }\r\n      \r\n      // 过滤掉 null 值，并将 number 转换为 float\r\n      const filteredScores: Record<string, number> = {};\r\n      Object.keys(manualInput.scores).forEach(subjectId => {\r\n        const score = manualInput.scores[Number(subjectId)];\r\n        if (score !== null && score !== undefined) {\r\n          filteredScores[subjectId] = score;\r\n        }\r\n      });\r\n      \r\n      const hasScores = Object.keys(filteredScores).length > 0;\r\n      if (!hasScores) {\r\n        showSnackbar('请至少输入一个科目的成绩', 'warning');\r\n        return;\r\n      }\r\n      \r\n      setBatchLoading(true);\r\n      \r\n      try {\r\n        // 构建请求数据\r\n        const scoreData = {\r\n          examId: batchSelectedExam,\r\n          studentNumber: manualInput.studentNumber,\r\n          studentName: manualInput.studentName,\r\n          scores: filteredScores\r\n        };\r\n        \r\n        console.log('提交手动录入成绩数据:', scoreData);\r\n        const response = await scoreAPI.saveStudentScore(scoreData);\r\n        console.log('手动录入成绩响应:', response);\r\n        \r\n        if (response.data && (response.data.code === 200 || response.status === 200)) {\r\n          showSnackbar('成绩录入成功', 'success');\r\n          setBatchDialogVisible(false);\r\n          \r\n          // 如果上传的成绩与当前选中的考试相同，则刷新成绩数据\r\n          if (batchSelectedExam === selectedExam) {\r\n            fetchExamScoresAndDetails();\r\n          }\r\n          \r\n          // 重置手动录入表单\r\n          resetManualInput();\r\n          setSelectedSearchStudent(null);\r\n        } else {\r\n          console.error('手动录入成绩响应格式错误:', response);\r\n          showSnackbar('录入失败，响应格式错误', 'error');\r\n        }\r\n      } catch (error: any) {\r\n        console.error('手动录入成绩失败:', error);\r\n        let errorMessage = '成绩录入失败';\r\n        \r\n        if (error.response) {\r\n          console.error('错误响应:', error.response);\r\n          if (error.response.data && error.response.data.message) {\r\n            errorMessage = error.response.data.message;\r\n          } else if (error.response.statusText) {\r\n            errorMessage = `${errorMessage}: ${error.response.statusText}`;\r\n          }\r\n        } else if (error.message) {\r\n          errorMessage = `${errorMessage}: ${error.message}`;\r\n        }\r\n        \r\n        showSnackbar(errorMessage, 'error');\r\n      } finally {\r\n        setBatchLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // 重置手动录入表单\r\n  const resetManualInput = () => {\r\n    setManualInput({\r\n      studentNumber: '',\r\n      studentName: '',\r\n      scores: {}\r\n    });\r\n  };\r\n\r\n  // 导出成绩Excel\r\n  const handleExportExcel = () => {\r\n    if (!selectedExam) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      scoreAPI.exportExamScores(selectedExam);\r\n    } catch (error) {\r\n      console.error('成绩导出失败:', error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id: number) => {\r\n    if (window.confirm('确定要删除该成绩记录吗？')) {\r\n      try {\r\n        const response = await axios.delete(`${process.env.REACT_APP_API_BASE_URL}/api/scores/${id}`);\r\n        if (response.status === 200) {\r\n          showSnackbar('删除成绩成功', 'success');\r\n          fetchScores();\r\n        }\r\n      } catch (error: any) {\r\n        showSnackbar(error.response?.data?.message || '删除失败', 'error');\r\n      }\r\n    }\r\n  };\r\n\r\n  // 获取学生列表\r\n  const fetchStudents = useCallback(async () => {\r\n    try {\r\n      const response = await studentAPI.getAllStudents();\r\n      if (response.data) {\r\n        setStudents(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('获取学生列表失败:', error);\r\n    }\r\n  }, []);\r\n\r\n  // 初始化\r\n  useEffect(() => {\r\n    fetchExams();\r\n    fetchStudents();\r\n  }, [fetchExams, fetchStudents]);\r\n\r\n  // 监听考试选择变化\r\n  useEffect(() => {\r\n    if (selectedExam) {\r\n      fetchExamScoresAndDetails();\r\n    }\r\n  }, [selectedExam, fetchExamScoresAndDetails]);\r\n\r\n  // 监听分页变化\r\n  useEffect(() => {\r\n    if (selectedExam) {\r\n      fetchScores();\r\n    }\r\n  }, [currentPage, pageSize, fetchScores]);\r\n\r\n  // 处理学生选择\r\n  const handleStudentChange = (event: any, newValue: any) => {\r\n    setSelectedSearchStudent(newValue);\r\n    if (newValue) {\r\n      setManualInput(prev => ({\r\n        ...prev,\r\n        studentNumber: newValue.studentNumber,\r\n        studentName: newValue.name\r\n      }));\r\n    } else {\r\n      setManualInput(prev => ({\r\n        ...prev,\r\n        studentNumber: '',\r\n        studentName: ''\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={zhCN}>\r\n      <Box sx={{ p: 3 }} className=\"score-container page-container\">\r\n        <Card className=\"score-card apple-card\" elevation={3}>\r\n          <CardHeader\r\n            title=\"成绩管理\"\r\n            action={\r\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems=\"center\">\r\n                <FormControl size=\"small\" sx={{ minWidth: 200 }}>\r\n                  <InputLabel>选择考试</InputLabel>\r\n                  <Select\r\n                    value={selectedExam || ''}\r\n                    label=\"选择考试\"\r\n                    onChange={(e) => handleExamChange(e as SelectChangeEvent<number>)}\r\n                  >\r\n                    <MenuItem value=\"\"><em>请选择考试</em></MenuItem>\r\n                    {exams.map((exam) => (\r\n                      <MenuItem key={exam.id} value={exam.id}>\r\n                        {exam.name} - {exam.className}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                \r\n                {currentExam && (\r\n                  <FormControl size=\"small\" sx={{ minWidth: 150 }}>\r\n                    <InputLabel>选择科目</InputLabel>\r\n                    <Select\r\n                      value={selectedSubject || ''}\r\n                      label=\"选择科目\"\r\n                      onChange={(e) => handleSubjectChange(e as SelectChangeEvent<number>)}\r\n                    >\r\n                      <MenuItem value=\"\"><em>全部科目</em></MenuItem>\r\n                      {currentExam.subjects?.map((subject) => (\r\n                        <MenuItem key={subject.id} value={subject.id}>{subject.name}</MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                )}\r\n                \r\n                {currentExam && (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    startIcon={<AddIcon />}\r\n                    onClick={handleBatchInput}\r\n                  >\r\n                    录入成绩\r\n                  </Button>\r\n                )}\r\n                \r\n                {currentExam && scores.length > 0 && (\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<DownloadIcon />}\r\n                    onClick={handleExportExcel}\r\n                  >\r\n                    导出Excel\r\n                  </Button>\r\n                )}\r\n              </Stack>\r\n            }\r\n            sx={{ '& .MuiCardHeader-action': { mt: {xs: 2, sm: 0}, ml: {sm: 'auto'}} }}\r\n          />\r\n          <CardContent>\r\n            {loading && <Box sx={{ display: 'flex', justifyContent: 'center', my: 3 }}><CircularProgress /></Box>}\r\n            \r\n            {!loading && !currentExam && (\r\n              <Typography sx={{ textAlign: 'center', my: 3 }}>请选择一个考试</Typography>\r\n            )}\r\n            \r\n            {!loading && currentExam && scores.length === 0 && (\r\n              <Typography sx={{ textAlign: 'center', my: 3 }}>暂无成绩数据</Typography>\r\n            )}\r\n            \r\n            {!loading && currentExam && scores.length > 0 && (\r\n              <>\r\n                <Box sx={{ mb: 3, p: 2, bgcolor: 'background.paper', borderRadius: 1, boxShadow: 1 }}>\r\n                  <Typography variant=\"h6\" gutterBottom>考试信息</Typography>\r\n                  <Box sx={{ flexGrow: 1 }}>\r\n                    <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr', md: '1fr 1fr 1fr 1fr' }, gap: 2 }}>\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">考试名称</Typography>\r\n                        <Typography variant=\"body1\">{currentExam.name}</Typography>\r\n                      </Box>\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">考试日期</Typography>\r\n                        <Typography variant=\"body1\">{formatDate(currentExam.examDate)}</Typography>\r\n                      </Box>\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">班级</Typography>\r\n                        <Typography variant=\"body1\">{currentExam.className}</Typography>\r\n                      </Box>\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">状态</Typography>\r\n                        <Chip \r\n                          label={getStatusLabel(currentExam.status)} \r\n                          color={getStatusType(currentExam.status) as any} \r\n                          size=\"small\" \r\n                        />\r\n                      </Box>\r\n                    </Box>\r\n                  </Box>\r\n                  \r\n                  <Divider sx={{ my: 2 }} />\r\n                  \r\n                  <Typography variant=\"h6\" gutterBottom>成绩统计</Typography>\r\n                  <Box sx={{ flexGrow: 1 }}>\r\n                    <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr 1fr' }, gap: 2 }}>\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">最高分</Typography>\r\n                        <Typography variant=\"body1\">{statistics.highest}</Typography>\r\n                      </Box>\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">最低分</Typography>\r\n                        <Typography variant=\"body1\">{statistics.lowest}</Typography>\r\n                      </Box>\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">平均分</Typography>\r\n                        <Typography variant=\"body1\">{statistics.average.toFixed(2)}</Typography>\r\n                      </Box>\r\n                    </Box>\r\n                  </Box>\r\n                </Box>\r\n                \r\n                <TableContainer component={Paper} elevation={0} sx={{border: '1px solid rgba(224, 224, 224, 1)'}}>\r\n                  <Table className=\"score-table apple-table\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>学号</TableCell>\r\n                        <TableCell>姓名</TableCell>\r\n                        <TableCell>班级</TableCell>\r\n                        {currentExam.subjects?.map((subject) => (\r\n                          <TableCell key={subject.id}>{subject.name}成绩</TableCell>\r\n                        ))}\r\n                        <TableCell>总分</TableCell>\r\n                        <TableCell>排名</TableCell>\r\n                        <TableCell>评语</TableCell>\r\n                        <TableCell>上传时间</TableCell>\r\n                        <TableCell>操作</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {scores.map((student) => (\r\n                        <TableRow \r\n                          key={student.studentId} \r\n                          sx={isTopStudent(student) ? { backgroundColor: 'rgba(76, 175, 80, 0.1)' } : {}}\r\n                        >\r\n                          <TableCell>{student.studentNumber}</TableCell>\r\n                          <TableCell>{student.studentName}</TableCell>\r\n                          <TableCell>{student.className || '-'}</TableCell>\r\n                          {currentExam.subjects?.map((subject) => (\r\n                            <TableCell key={subject.id}>\r\n                              {student.scores[subject.id] !== undefined ? student.scores[subject.id] : '-'}\r\n                            </TableCell>\r\n                          ))}\r\n                          <TableCell>{student.totalScore}</TableCell>\r\n                          <TableCell>\r\n                            <Chip \r\n                              label={student.rank} \r\n                              color={student.rank <= 3 ? 'primary' : 'default'} \r\n                              size=\"small\" \r\n                            />\r\n                          </TableCell>\r\n                          <TableCell>{student.comment || '-'}</TableCell>\r\n                          <TableCell>{student.createdAt || '-'}</TableCell>\r\n                          <TableCell>\r\n                            <Button\r\n                              size=\"small\"\r\n                              variant=\"contained\"\r\n                              onClick={() => handleEditScore(student)}\r\n                            >\r\n                              编辑\r\n                            </Button>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n                \r\n                <TablePagination\r\n                  component=\"div\"\r\n                  count={total}\r\n                  page={currentPage - 1}\r\n                  onPageChange={handleCurrentChange}\r\n                  rowsPerPage={pageSize}\r\n                  onRowsPerPageChange={handleSizeChange}\r\n                  rowsPerPageOptions={[5, 10, 25, 50]}\r\n                  labelRowsPerPage=\"每页行数\"\r\n                  labelDisplayedRows={({ from, to, count }) => `${from}-${to} 共 ${count}`}\r\n                />\r\n              </>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        {/* 单个学生成绩编辑对话框 */}\r\n        <Dialog\r\n          open={scoreDialogVisible}\r\n          onClose={() => setScoreDialogVisible(false)}\r\n          maxWidth=\"md\"\r\n          fullWidth\r\n        >\r\n          <DialogTitle sx={{ pb: 1 }}>\r\n            编辑学生成绩\r\n            <IconButton\r\n              aria-label=\"close\"\r\n              onClick={() => setScoreDialogVisible(false)}\r\n              sx={{ position: 'absolute', right: 8, top: 8 }}\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent sx={{ pt: 2 }}>\r\n            {selectedStudent && (\r\n              <Box>\r\n                {/* 学生基本信息卡片 */}\r\n                <Paper \r\n                  elevation={0} \r\n                  sx={{ \r\n                    p: 2, \r\n                    mb: 3, \r\n                    bgcolor: 'background.default',\r\n                    borderRadius: 2,\r\n                    border: '1px solid',\r\n                    borderColor: 'divider'\r\n                  }}\r\n                >\r\n                  <Box sx={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                    <Box sx={{ width: { xs: '100%', sm: '33.33%' }, p: 1 }}>\r\n                      <Typography variant=\"caption\" color=\"textSecondary\">学生姓名</Typography>\r\n                      <Typography variant=\"body1\" fontWeight=\"medium\">{selectedStudent.studentName}</Typography>\r\n                    </Box>\r\n                    <Box sx={{ width: { xs: '100%', sm: '33.33%' }, p: 1 }}>\r\n                      <Typography variant=\"caption\" color=\"textSecondary\">学号</Typography>\r\n                      <Typography variant=\"body1\" fontWeight=\"medium\">{selectedStudent.studentNumber}</Typography>\r\n                    </Box>\r\n                    <Box sx={{ width: { xs: '100%', sm: '33.33%' }, p: 1 }}>\r\n                      <Typography variant=\"caption\" color=\"textSecondary\">班级</Typography>\r\n                      <Typography variant=\"body1\" fontWeight=\"medium\">{selectedStudent.className || '未分配班级'}</Typography>\r\n                    </Box>\r\n                  </Box>\r\n                </Paper>\r\n                \r\n                <Typography variant=\"h6\" sx={{ mb: 2, fontSize: '1rem' }}>科目成绩</Typography>\r\n                \r\n                {/* 科目成绩输入区域 */}\r\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', mx: -1 }}>\r\n                  {currentExam?.subjects?.map((subject) => (\r\n                    <Box \r\n                      key={subject.id} \r\n                      sx={{ \r\n                        width: { xs: '100%', sm: '50%', md: '33.33%' }, \r\n                        p: 1 \r\n                      }}\r\n                    >\r\n                      <Paper \r\n                        sx={{ \r\n                          p: 2, \r\n                          height: '100%',\r\n                          display: 'flex',\r\n                          flexDirection: 'column',\r\n                          transition: 'all 0.2s',\r\n                          '&:hover': {\r\n                            boxShadow: 2\r\n                          }\r\n                        }}\r\n                      >\r\n                        <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\r\n                          {subject.name}\r\n                        </Typography>\r\n                        <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\r\n                          <TextField\r\n                            type=\"number\"\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            value={selectedStudent.scores[subject.id] || ''}\r\n                            onChange={(e) => handleScoreChange(selectedStudent, subject.id, Number(e.target.value))}\r\n                            inputProps={{ \r\n                              min: 0, \r\n                              max: subject.score,\r\n                              step: 0.5,\r\n                              style: { textAlign: 'center', fontSize: '1.2rem' }\r\n                            }}\r\n                          />\r\n                          <Typography variant=\"caption\" color=\"textSecondary\" sx={{ ml: 1, whiteSpace: 'nowrap' }}>\r\n                            / {subject.score}分\r\n                          </Typography>\r\n                        </Box>\r\n                      </Paper>\r\n                    </Box>\r\n                  ))}\r\n                </Box>\r\n                \r\n                {/* 总分和排名信息 */}\r\n                <Paper \r\n                  sx={{ \r\n                    mt: 3, \r\n                    p: 2, \r\n                    bgcolor: 'primary.50', \r\n                    borderRadius: 2,\r\n                    display: 'flex',\r\n                    justifyContent: 'space-around'\r\n                  }}\r\n                >\r\n                  <Box sx={{ textAlign: 'center' }}>\r\n                    <Typography variant=\"caption\" color=\"textSecondary\">总分</Typography>\r\n                    <Typography variant=\"h5\" color=\"primary.main\" fontWeight=\"bold\">\r\n                      {selectedStudent.totalScore || 0}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Divider orientation=\"vertical\" flexItem sx={{ mx: 2 }} />\r\n                  <Box sx={{ textAlign: 'center' }}>\r\n                    <Typography variant=\"caption\" color=\"textSecondary\">排名</Typography>\r\n                    <Typography variant=\"h5\" color=\"primary.main\" fontWeight=\"bold\">\r\n                      {selectedStudent.rank || '-'}\r\n                    </Typography>\r\n                  </Box>\r\n                </Paper>\r\n              </Box>\r\n            )}\r\n          </DialogContent>\r\n          <DialogActions sx={{ px: 3, py: 2 }}>\r\n            <Button \r\n              onClick={() => setScoreDialogVisible(false)}\r\n              variant=\"outlined\"\r\n            >\r\n              取消\r\n            </Button>\r\n            <Button \r\n              variant=\"contained\" \r\n              color=\"primary\" \r\n              onClick={saveStudentScore}\r\n              disabled={submitLoading}\r\n              startIcon={submitLoading ? <CircularProgress size={20} /> : <SaveIcon />}\r\n              sx={{ ml: 2 }}\r\n            >\r\n              保存\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        \r\n        {/* 批量录入成绩对话框 */}\r\n        <Dialog\r\n          open={batchDialogVisible}\r\n          onClose={() => setBatchDialogVisible(false)}\r\n          maxWidth=\"md\"\r\n          fullWidth\r\n        >\r\n          <DialogTitle>\r\n            批量录入成绩\r\n            <IconButton\r\n              aria-label=\"close\"\r\n              onClick={() => setBatchDialogVisible(false)}\r\n              sx={{ position: 'absolute', right: 8, top: 8 }}\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent sx={{ pt: 3 }}>\r\n            <Stack spacing={3}>\r\n              <Box sx={{ transform: 'translateY(6px)' }}>\r\n                <FormControl fullWidth sx={{ \r\n                  minHeight: '56px',\r\n                  marginTop: '12px',\r\n                  '& .MuiInputLabel-root': {\r\n                    backgroundColor: 'background.paper',\r\n                    padding: '0 4px',\r\n                    zIndex: 1\r\n                  },\r\n                  '& .MuiOutlinedInput-root': {\r\n                    backgroundColor: 'background.paper'\r\n                  }\r\n                }}>\r\n                  <InputLabel id=\"batch-exam-select-label\">选择考试</InputLabel>\r\n                  <Select\r\n                    labelId=\"batch-exam-select-label\"\r\n                    value={batchSelectedExam || ''}\r\n                    onChange={(e) => setBatchSelectedExam(e.target.value as number)}\r\n                    label=\"选择考试\"\r\n                  >\r\n                    {exams.map((exam) => (\r\n                      <MenuItem key={exam.id} value={exam.id}>\r\n                        {exam.name} - {exam.className}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Box>\r\n              <Box>\r\n                <FormControl component=\"fieldset\">\r\n                  <Typography variant=\"subtitle1\" gutterBottom>录入方式</Typography>\r\n                  <Stack direction=\"row\" spacing={2}>\r\n                    <Button\r\n                      variant={batchInputType === 1 ? \"contained\" : \"outlined\"}\r\n                      onClick={() => setBatchInputType(1)}\r\n                      startIcon={<UploadIcon />}\r\n                    >\r\n                      Excel文件导入\r\n                    </Button>\r\n                    <Button\r\n                      variant={batchInputType === 2 ? \"contained\" : \"outlined\"}\r\n                      onClick={() => setBatchInputType(2)}\r\n                      startIcon={<AddIcon />}\r\n                    >\r\n                      手动录入\r\n                    </Button>\r\n                  </Stack>\r\n                </FormControl>\r\n              </Box>\r\n\r\n              {batchInputType === 1 ? (\r\n                <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleDownloadTemplate}\r\n                    disabled={!batchSelectedExam}\r\n                  >\r\n                    下载模板\r\n                  </Button>\r\n                  <input\r\n                    type=\"file\"\r\n                    accept=\".xlsx,.xls\"\r\n                    onChange={handleBeforeUpload}\r\n                    style={{ display: 'none' }}\r\n                    id=\"score-file-upload\"\r\n                  />\r\n                  <label htmlFor=\"score-file-upload\">\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      component=\"span\"\r\n                      disabled={!batchSelectedExam}\r\n                    >\r\n                      选择文件\r\n                    </Button>\r\n                  </label>\r\n                  {uploadFile && (\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      已选择: {uploadFile.name}\r\n                    </Typography>\r\n                  )}\r\n                </Box>\r\n              ) : (\r\n                <Box sx={{ mt: 2 }}>\r\n                  <Stack spacing={2}>\r\n                    <Box>\r\n                      <Autocomplete\r\n                        options={students}\r\n                        getOptionLabel={(option) => `${option.name} (${option.studentNumber}) - ${option.classInfo?.className || '未分配班级'}`}\r\n                        renderInput={(params) => (\r\n                          <TextField \r\n                            {...params} \r\n                            label=\"搜索学生\" \r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                          />\r\n                        )}\r\n                        value={selectedSearchStudent}\r\n                        onChange={handleStudentChange}\r\n                        isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                        noOptionsText=\"无匹配学生\"\r\n                        loadingText=\"加载中...\"\r\n                      />\r\n                    </Box>\r\n                    \r\n                    {batchSelectedExam && currentExam?.subjects && (\r\n                      <Box sx={{ mt: 2 }}>\r\n                        <Typography variant=\"subtitle2\" gutterBottom>科目成绩</Typography>\r\n                        <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: 'repeat(2, 1fr)', md: 'repeat(3, 1fr)' }, gap: 2 }}>\r\n                          {currentExam.subjects.map((subject) => (\r\n                            <Box key={subject.id}>\r\n                              <TextField\r\n                                fullWidth\r\n                                label={subject.name}\r\n                                type=\"number\"\r\n                                value={manualInput.scores[subject.id] || ''}\r\n                                onChange={(e) => setManualInput(prev => ({\r\n                                  ...prev,\r\n                                  scores: {\r\n                                    ...prev.scores,\r\n                                    [subject.id]: Number(e.target.value)\r\n                                  }\r\n                                }))}\r\n                                inputProps={{\r\n                                  min: 0,\r\n                                  max: subject.score,\r\n                                  step: 0.5\r\n                                }}\r\n                                InputProps={{\r\n                                  endAdornment: <InputAdornment position=\"end\">满分: {subject.score}</InputAdornment>\r\n                                }}\r\n                              />\r\n                            </Box>\r\n                          ))}\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n                  </Stack>\r\n                </Box>\r\n              )}\r\n            </Stack>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setBatchDialogVisible(false)}>取消</Button>\r\n            <Button \r\n              variant=\"contained\" \r\n              color=\"primary\" \r\n              onClick={handleConfirmBatchInput}\r\n              disabled={batchLoading || !batchSelectedExam}\r\n              startIcon={batchLoading ? <CircularProgress size={20} /> : <SaveIcon />}\r\n            >\r\n              确认\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        \r\n        {/* 添加 Snackbar 组件 */}\r\n        <Snackbar\r\n          open={snackbar.open}\r\n          autoHideDuration={3000}\r\n          onClose={handleCloseSnackbar}\r\n          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n        >\r\n          <Alert \r\n            onClose={handleCloseSnackbar} \r\n            severity={snackbar.severity}\r\n            variant=\"filled\"\r\n            sx={{ width: '100%' }}\r\n          >\r\n            {snackbar.message}\r\n          </Alert>\r\n        </Snackbar>\r\n      </Box>\r\n    </LocalizationProvider>\r\n  );\r\n};\r\n\r\nexport default ScoreManagement; "],"names":["directAxios","axios","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","concat","error","Promise","reject","getAllStudents","async","get","getAllStudentsPaged","page","arguments","length","undefined","size","console","log","getStudentsByClass","classId","getStudentsByClassPaged","searchStudentsPaged","name","createStudent","post","student","updateStudent","id","put","deleteStudent","delete","batchImportStudents","formData","axiosInstance","_config$method","url","startsWith","method","toUpperCase","data","_objectSpread","password","newPassword","response","status","code","message","includes","removeItem","window","location","pathname","href","encodeURIComponent","getScoresByExamId","examId","subjectId","params","saveStudentScore","scoreData","exportExamScores","responseType","URL","createObjectURL","Blob","link","document","createElement","contentDisposition","filename","filenameMatch","match","replace","setAttribute","body","appendChild","click","removeChild","revokeObjectURL","downloadScoreTemplate","importScoresFromExcel","file","FormData","append","toString","getAllExams","getExamById","getExamsByClass","getExamsByStatus","createExam","examData","updateExam","deleteExam","updateExamStatus","patch","styled","Paper","_ref","theme","backgroundColor","palette","mode","typography","body2","padding","spacing","color","text","secondary","ScoreManagement","_currentExam$subjects","_currentExam$subjects2","_currentExam$subjects4","exams","setExams","useState","scores","setScores","loading","setLoading","selectedExam","setSelectedExam","selectedSubject","setSelectedSubject","currentExam","setCurrentExam","total","setTotal","pageSize","setPageSize","currentPage","setCurrentPage","statistics","setStatistics","highest","lowest","average","scoreDialogVisible","setScoreDialogVisible","selectedStudent","setSelectedStudent","submitLoading","setSubmitLoading","batchDialogVisible","setBatchDialogVisible","batchInputType","setBatchInputType","batchLoading","setBatchLoading","batchSelectedExam","setBatchSelectedExam","uploadFile","setUploadFile","manualInput","setManualInput","studentNumber","studentName","snackbar","setSnackbar","open","severity","students","setStudents","searchStudentText","setSearchStudentText","selectedSearchStudent","setSelectedSearchStudent","useLocation","fetchExams","useNavigate","useCallback","examAPI","Array","isArray","map","exam","_exam$classInfo","examName","className","classInfo","examIdFromRoute","URLSearchParams","search","examToSelect","find","e","String","fetchExamScoresAndDetails","_examData$examSubject","_examData$classInfo","mappedSubjects","examSubjects","es","_es$subject","subjectName","subject","score","fullScore","examDate","subjects","fetchScores","scoreAPI","content","studentScores","Object","keys","processedScores","entries","reduce","acc","_ref2","key","value","Number","totalElements","calculateStatistics","scoresData","Math","max","totalScore","min","formatDateToYYYYMMDD","date","year","getFullYear","month","getMonth","padStart","day","getDate","isTopStudent","rank","saveScore","_error$response","_error$response$data","showSnackbar","handleCloseSnackbar","prev","resetManualInput","fetchStudents","studentAPI","useEffect","_jsx","LocalizationProvider","dateAdapter","AdapterDateFns","adapterLocale","zhCN","children","_jsxs","Box","sx","p","Card","elevation","CardHeader","title","action","Stack","direction","xs","sm","alignItems","FormControl","minWidth","InputLabel","Select","label","onChange","event","target","handleExamChange","MenuItem","handleSubjectChange","Button","variant","startIcon","AddIcon","onClick","handleBatchInput","DownloadIcon","handleExportExcel","mt","ml","CardContent","display","justifyContent","my","CircularProgress","Typography","textAlign","_Fragment","mb","bgcolor","borderRadius","boxShadow","gutterBottom","flexGrow","gridTemplateColumns","md","gap","dateString","Date","isNaN","getTime","formatDate","Chip","getStatusLabel","getStatusType","Divider","toFixed","TableContainer","component","border","Table","TableHead","TableRow","TableCell","TableBody","_currentExam$subjects3","comment","createdAt","handleEditScore","studentId","TablePagination","count","onPageChange","handleCurrentChange","newPage","rowsPerPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","labelRowsPerPage","labelDisplayedRows","_ref3","from","to","Dialog","onClose","maxWidth","fullWidth","DialogTitle","pb","IconButton","position","right","top","CloseIcon","DialogContent","pt","borderColor","flexWrap","width","fontWeight","fontSize","mx","height","flexDirection","transition","TextField","type","handleScoreChange","updatedScores","studentIndex","findIndex","s","forEach","sortedScores","sort","a","b","index","inputProps","step","style","whiteSpace","orientation","flexItem","DialogActions","px","py","filteredScores","_error$response2","_error$response2$data","disabled","SaveIcon","transform","minHeight","marginTop","zIndex","labelId","UploadIcon","handleDownloadTemplate","accept","_event$target$files","files","htmlFor","Autocomplete","options","getOptionLabel","option","_option$classInfo","renderInput","handleStudentChange","newValue","isOptionEqualToValue","noOptionsText","loadingText","InputProps","endAdornment","InputAdornment","result","totalCount","successCount","failCount","skipCount","errors","errorMessage","statusText","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Alert"],"sourceRoot":""}