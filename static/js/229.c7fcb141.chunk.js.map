{"version":3,"file":"static/js/229.c7fcb141.chunk.js","mappings":"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","sources":["api/user.ts","utils/dateUtils.ts","components/CustomInput.tsx","views/UserManagement.tsx"],"sourcesContent":["import axiosInstance from './axios';\r\nimport axios from 'axios';\r\n\r\n// 创建一个专用于直接请求后端的axios实例\r\nconst directAxios = axios.create({\r\n  baseURL: 'http://124.70.74.246:8081',\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器 - 添加认证令牌\r\ndirectAxios.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\ninterface User {\r\n  id: number;\r\n  username: string;\r\n  name: string;\r\n  email: string;\r\n  roles?: string[];\r\n  gender?: string;\r\n  phone?: string;\r\n}\r\n\r\n/**\r\n * 获取所有用户\r\n * @returns Promise\r\n */\r\nexport const getAllUsers = async () => {\r\n  console.log('获取所有用户，直接请求后端');\r\n  return await directAxios.get('/api/users');\r\n};\r\n\r\n/**\r\n * 获取所有教师\r\n * @returns Promise\r\n */\r\nexport const getAllTeachers = async () => {\r\n  return await directAxios.get('/api/users/teachers');\r\n};\r\n\r\n/**\r\n * 获取所有班主任\r\n * @returns Promise\r\n */\r\nexport const getAllHeadTeachers = async () => {\r\n  return await directAxios.get('/api/users/headteachers');\r\n};\r\n\r\n/**\r\n * 根据ID获取用户\r\n * @param id 用户ID\r\n * @returns Promise\r\n */\r\nexport const getUserById = async (id: number) => {\r\n  return await directAxios.get(`/api/users/${id}`);\r\n};\r\n\r\n/**\r\n * 更新用户信息\r\n * @param id 用户ID\r\n * @param user 用户信息\r\n * @returns Promise\r\n */\r\nexport const updateUser = async (id: number, user: Partial<User>) => {\r\n  return await directAxios.put(`/api/users/${id}`, user);\r\n};\r\n\r\n/**\r\n * 删除用户\r\n * @param id 用户ID\r\n * @returns Promise\r\n */\r\nexport const deleteUser = async (id: number) => {\r\n  return await directAxios.delete(`/api/users/${id}`);\r\n};\r\n\r\n/**\r\n * 更新用户角色\r\n * @param id 用户ID\r\n * @param roles 角色列表\r\n * @returns Promise\r\n */\r\nexport const updateUserRoles = async (id: number, roles: string[]) => {\r\n  return await directAxios.put(`/api/users/${id}/roles`, roles);\r\n}; ","/**\r\n * 格式化日期时间\r\n * @param dateTime 日期时间字符串或Date对象\r\n * @returns 格式化后的日期时间字符串\r\n */\r\nexport const formatDateTime = (dateTime: string | Date | undefined | any): string => {\r\n  if (!dateTime) return '';\r\n  \r\n  try {\r\n    // 处理数组格式的日期 [年, 月, 日, 时, 分, 秒]\r\n    if (Array.isArray(dateTime)) {\r\n      const [year, month, day, hour = 0, minute = 0] = dateTime;\r\n      return `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')} ${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\r\n    }\r\n    \r\n    // 处理普通日期对象或字符串\r\n    const date = new Date(dateTime);\r\n    \r\n    // 检查日期是否有效\r\n    if (isNaN(date.getTime())) {\r\n      return String(dateTime);\r\n    }\r\n    \r\n    // 获取年、月、日、时、分\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const hours = String(date.getHours()).padStart(2, '0');\r\n    const minutes = String(date.getMinutes()).padStart(2, '0');\r\n    \r\n    // 返回格式化后的日期时间字符串\r\n    return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n  } catch (error) {\r\n    console.error('日期格式化错误:', error, dateTime);\r\n    return String(dateTime);\r\n  }\r\n};\r\n\r\n/**\r\n * 格式化日期\r\n * @param date 日期字符串或Date对象\r\n * @returns 格式化后的日期字符串\r\n */\r\nexport const formatDate = (date: string | Date | undefined): string => {\r\n  if (!date) return '';\r\n  \r\n  const dateObj = new Date(date);\r\n  \r\n  // 获取年、月、日\r\n  const year = dateObj.getFullYear();\r\n  const month = String(dateObj.getMonth() + 1).padStart(2, '0');\r\n  const day = String(dateObj.getDate()).padStart(2, '0');\r\n  \r\n  // 返回格式化后的日期字符串\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\n/**\r\n * 格式化时间\r\n * @param time 时间字符串或Date对象\r\n * @returns 格式化后的时间字符串\r\n */\r\nexport const formatTime = (time: string | Date | undefined): string => {\r\n  if (!time) return '';\r\n  \r\n  const timeObj = new Date(time);\r\n  \r\n  // 获取时、分、秒\r\n  const hours = String(timeObj.getHours()).padStart(2, '0');\r\n  const minutes = String(timeObj.getMinutes()).padStart(2, '0');\r\n  const seconds = String(timeObj.getSeconds()).padStart(2, '0');\r\n  \r\n  // 返回格式化后的时间字符串\r\n  return `${hours}:${minutes}:${seconds}`;\r\n};\r\n\r\n/**\r\n * 获取当前周的日期范围\r\n * @returns [开始日期, 结束日期]\r\n */\r\nexport const getCurrentWeekRange = (): [Date, Date] => {\r\n  const now = new Date();\r\n  const dayOfWeek = now.getDay() || 7; // 周日为0，转换为7\r\n  \r\n  // 计算本周的第一天 (周一)\r\n  const firstDay = new Date(now);\r\n  firstDay.setDate(now.getDate() - dayOfWeek + 1);\r\n  firstDay.setHours(0, 0, 0, 0);\r\n  \r\n  // 计算本周的最后一天 (周日)\r\n  const lastDay = new Date(now);\r\n  lastDay.setDate(now.getDate() + (7 - dayOfWeek));\r\n  lastDay.setHours(23, 59, 59, 999);\r\n  \r\n  return [firstDay, lastDay];\r\n};\r\n\r\n/**\r\n * 获取当前月的日期范围\r\n * @returns [开始日期, 结束日期]\r\n */\r\nexport const getCurrentMonthRange = (): [Date, Date] => {\r\n  const now = new Date();\r\n  \r\n  // 计算本月的第一天\r\n  const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);\r\n  firstDay.setHours(0, 0, 0, 0);\r\n  \r\n  // 计算本月的最后一天\r\n  const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n  lastDay.setHours(23, 59, 59, 999);\r\n  \r\n  return [firstDay, lastDay];\r\n};\r\n\r\n/**\r\n * 获取当前学期的日期范围\r\n * @returns [开始日期, 结束日期]\r\n */\r\nexport const getCurrentSemesterRange = (): [Date, Date] => {\r\n  const now = new Date();\r\n  let firstDay: Date;\r\n  let lastDay: Date;\r\n  \r\n  // 上半年为第一学期，下半年为第二学期\r\n  if (now.getMonth() < 6) { // 1月-6月\r\n    firstDay = new Date(now.getFullYear(), 0, 1); // 1月1日\r\n    lastDay = new Date(now.getFullYear(), 5, 30); // 6月30日\r\n  } else { // 7月-12月\r\n    firstDay = new Date(now.getFullYear(), 6, 1); // 7月1日\r\n    lastDay = new Date(now.getFullYear(), 11, 31); // 12月31日\r\n  }\r\n  \r\n  firstDay.setHours(0, 0, 0, 0);\r\n  lastDay.setHours(23, 59, 59, 999);\r\n  \r\n  return [firstDay, lastDay];\r\n}; ","import React, { useState, forwardRef } from 'react';\r\nimport { \r\n  TextField, \r\n  InputAdornment, \r\n  IconButton, \r\n  TextFieldProps,\r\n  styled\r\n} from '@mui/material';\r\nimport { \r\n  Visibility, \r\n  VisibilityOff, \r\n  Person, \r\n  Lock, \r\n  Email, \r\n  Phone,\r\n  Search\r\n} from '@mui/icons-material';\r\n\r\n// 样式化的TextField组件\r\nconst StyledTextField = styled(TextField)(({ theme }) => ({\r\n  '& .MuiOutlinedInput-root': {\r\n    borderRadius: '12px',\r\n    transition: 'all 0.3s',\r\n    backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n    '&:hover': {\r\n      backgroundColor: '#fff',\r\n    },\r\n    '&.Mui-focused': {\r\n      backgroundColor: '#fff',\r\n      boxShadow: '0 0 0 2px rgba(0, 113, 227, 0.2)',\r\n    },\r\n  },\r\n  '& .MuiOutlinedInput-notchedOutline': {\r\n    borderColor: 'rgba(0, 0, 0, 0.1)',\r\n  },\r\n  '& .MuiOutlinedInput-input': {\r\n    padding: '14px 16px',\r\n  },\r\n  '& .MuiInputLabel-outlined': {\r\n    transform: 'translate(16px, 15px) scale(1)',\r\n  },\r\n  '& .MuiInputLabel-outlined.MuiInputLabel-shrink': {\r\n    transform: 'translate(16px, -6px) scale(0.75)',\r\n  },\r\n}));\r\n\r\n// 图标映射\r\nconst iconMap: { [key: string]: React.ReactElement } = {\r\n  'person': <Person />,\r\n  'lock': <Lock />,\r\n  'email': <Email />,\r\n  'phone': <Phone />,\r\n  'search': <Search />\r\n};\r\n\r\n// 自定义输入组件属性\r\ninterface CustomInputProps extends Omit<TextFieldProps, 'variant'> {\r\n  prefixIcon?: string;\r\n  showPassword?: boolean;\r\n  onEnter?: () => void;\r\n}\r\n\r\n// 自定义输入组件\r\nconst CustomInput = forwardRef<HTMLDivElement, CustomInputProps>(\r\n  ({ prefixIcon, showPassword, onEnter, onChange, ...props }, ref) => {\r\n    const [showPasswordValue, setShowPasswordValue] = useState(false);\r\n\r\n    // 处理回车键按下事件\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n      if (e.key === 'Enter' && onEnter) {\r\n        onEnter();\r\n      }\r\n      // 确保原始的onKeyDown事件也被调用\r\n      if (props.onKeyDown) {\r\n        props.onKeyDown(e as any);\r\n      }\r\n    };\r\n\r\n    // 处理密码可见性切换\r\n    const handleClickShowPassword = () => {\r\n      setShowPasswordValue(!showPasswordValue);\r\n    };\r\n\r\n    // 获取密码输入类型\r\n    const getType = () => {\r\n      if (props.type === 'password') {\r\n        return showPasswordValue ? 'text' : 'password';\r\n      }\r\n      return props.type;\r\n    };\r\n\r\n    // 获取前缀图标\r\n    const getPrefixIcon = () => {\r\n      if (!prefixIcon) return null;\r\n      return iconMap[prefixIcon] || null;\r\n    };\r\n\r\n    // 确保onChange事件被正确处理\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      if (onChange) {\r\n        onChange(e as any);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <StyledTextField\r\n        ref={ref}\r\n        variant=\"outlined\"\r\n        fullWidth\r\n        {...props}\r\n        type={getType()}\r\n        onKeyDown={handleKeyDown}\r\n        onChange={handleChange}\r\n        InputProps={{\r\n          ...props.InputProps,\r\n          startAdornment: prefixIcon ? (\r\n            <InputAdornment position=\"start\">\r\n              {getPrefixIcon()}\r\n            </InputAdornment>\r\n          ) : props.InputProps?.startAdornment,\r\n          endAdornment: props.type === 'password' && showPassword ? (\r\n            <InputAdornment position=\"end\">\r\n              <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={handleClickShowPassword}\r\n                edge=\"end\"\r\n                size=\"large\"\r\n              >\r\n                {showPasswordValue ? <VisibilityOff /> : <Visibility />}\r\n              </IconButton>\r\n            </InputAdornment>\r\n          ) : props.InputProps?.endAdornment,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nexport default CustomInput; ","import React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Checkbox,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  Grid,\r\n  IconButton,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  TextField,\r\n  Typography,\r\n  Alert,\r\n  Chip,\r\n  InputAdornment,\r\n  CircularProgress,\r\n  Stack,\r\n  Snackbar\r\n} from '@mui/material';\r\nimport { Search as SearchIcon, Add as AddIcon } from '@mui/icons-material';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { getAllUsers, updateUser, deleteUser, updateUserRoles, getUserById } from '../api/user';\r\nimport { register } from '../api/auth';\r\nimport CustomInput from '../components/CustomInput';\r\nimport { formatDateTime } from '../utils/dateUtils';\r\n\r\n// 扩展的当前用户类型，可能包含roles或role属性\r\ninterface CurrentUser {\r\n  id: number;\r\n  username: string;\r\n  roles?: string[];\r\n  role?: string;\r\n}\r\n\r\n// 用户类型定义\r\ninterface UserType {\r\n  id: number;\r\n  username: string;\r\n  name: string;\r\n  email: string;\r\n  gender?: string;\r\n  phone?: string;\r\n  roles: string[];\r\n  createdAt?: string;\r\n}\r\n\r\n// 用户管理页面组件\r\nconst UserManagement = () => {\r\n  // 状态管理\r\n  const [users, setUsers] = useState<UserType[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedRole, setSelectedRole] = useState('');\r\n  const [total, setTotal] = useState(0);\r\n  const [pageSize, setPageSize] = useState(10);\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  \r\n  // 对话框状态\r\n  const [addDialogOpen, setAddDialogOpen] = useState(false);\r\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n  const [roleDialogOpen, setRoleDialogOpen] = useState(false);\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [submitLoading, setSubmitLoading] = useState(false);\r\n  \r\n  // 表单数据\r\n  const [userForm, setUserForm] = useState({\r\n    id: null as number | null,\r\n    username: '',\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    gender: ''\r\n  });\r\n  \r\n  // 角色管理数据\r\n  const [selectedUser, setSelectedUser] = useState<UserType | null>(null);\r\n  const [selectedRoles, setSelectedRoles] = useState<string[]>([]);\r\n  const [roleLoading, setRoleLoading] = useState(false);\r\n  \r\n  // 添加Snackbar状态\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: '',\r\n    severity: 'success' as 'success' | 'info' | 'warning' | 'error'\r\n  });\r\n  \r\n  // 添加确认对话框状态\r\n  const [confirmDialog, setConfirmDialog] = useState({\r\n    open: false,\r\n    title: '',\r\n    content: '',\r\n    onConfirm: () => {}\r\n  });\r\n  \r\n  // 认证上下文\r\n  const { user: authUser } = useAuth();\r\n  // 将authUser转换为包含必要属性的CurrentUser类型\r\n  const currentUser: CurrentUser | null = authUser ? {\r\n    id: authUser.id,\r\n    username: authUser.username,\r\n    role: authUser.role,\r\n    // 如果后端直接返回roles数组，也包含它\r\n    roles: (authUser as any).roles\r\n  } : null;\r\n  \r\n  // 检查用户是否具有特定角色的辅助函数\r\n  const hasRole = (user: CurrentUser | null, role: string): boolean => {\r\n    if (!user) return false;\r\n    \r\n    if (Array.isArray(user.roles)) {\r\n      return user.roles.includes(role);\r\n    }\r\n    \r\n    return user.role === role;\r\n  };\r\n  \r\n  // 检查用户是否是管理员\r\n  const isAdmin = (user: CurrentUser | null): boolean => {\r\n    return hasRole(user, 'ROLE_ADMIN');\r\n  };\r\n  \r\n  // 检查用户是否是班主任\r\n  const isHeadTeacher = (user: CurrentUser | null): boolean => {\r\n    return hasRole(user, 'ROLE_HEADTEACHER');\r\n  };\r\n  \r\n  // 检查用户是否有权管理用户（管理员或班主任）\r\n  const canManageUsers = (user: CurrentUser | null): boolean => {\r\n    return isAdmin(user) || isHeadTeacher(user);\r\n  };\r\n  \r\n  // 获取用户列表\r\n  const fetchUsers = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await getAllUsers();\r\n      if (response && response.data) {\r\n        setUsers(response.data);\r\n        setTotal(response.data.length);\r\n      } else {\r\n        // 处理空响应\r\n        setUsers([]);\r\n        setTotal(0);\r\n        console.warn('获取用户列表返回空数据');\r\n      }\r\n    } catch (error) {\r\n      console.error('获取用户列表失败:', error);\r\n      // 显示友好的错误信息\r\n      setUsers([]);\r\n      setTotal(0);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n  \r\n  // 初始化加载\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, [fetchUsers]);\r\n  \r\n  // 过滤后的用户列表\r\n  const filteredUsers = users.filter(user => {\r\n    // 按角色筛选\r\n    if (selectedRole && !user.roles.includes(selectedRole)) {\r\n      return false;\r\n    }\r\n    \r\n    // 按搜索条件筛选\r\n    if (searchQuery) {\r\n      const query = searchQuery.toLowerCase();\r\n      return (\r\n        user.username.toLowerCase().includes(query) ||\r\n        (user.name && user.name.toLowerCase().includes(query))\r\n      );\r\n    }\r\n    \r\n    return true;\r\n  });\r\n  \r\n  // 分页处理的用户列表\r\n  const paginatedUsers = filteredUsers.slice(\r\n    currentPage * pageSize,\r\n    (currentPage + 1) * pageSize\r\n  );\r\n  \r\n  // 处理角色标签类型\r\n  const getRoleType = (role: string) => {\r\n    switch (role) {\r\n      case 'ROLE_ADMIN':\r\n        return 'error';\r\n      case 'ROLE_HEADTEACHER':\r\n        return 'success';\r\n      case 'ROLE_TEACHER':\r\n        return 'primary';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n  \r\n  // 获取角色标签名称\r\n  const getRoleLabel = (role: string) => {\r\n    switch (role) {\r\n      case 'ROLE_ADMIN':\r\n        return '管理员';\r\n      case 'ROLE_HEADTEACHER':\r\n        return '班主任';\r\n      case 'ROLE_TEACHER':\r\n        return '教师';\r\n      default:\r\n        return '未知角色';\r\n    }\r\n  };\r\n  \r\n  // 处理添加用户\r\n  const handleAddUser = () => {\r\n    setUserForm({\r\n      id: null,\r\n      username: '',\r\n      name: '',\r\n      email: '',\r\n      phone: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n      gender: ''\r\n    });\r\n    setAddDialogOpen(true);\r\n  };\r\n  \r\n  // 处理编辑用户\r\n  const handleEdit = (user: UserType) => {\r\n    // 权限检查：管理员和班主任可编辑所有用户，普通用户只能编辑自己\r\n    if (!currentUser) {\r\n      alert('您需要登录才能执行此操作');\r\n      return;\r\n    }\r\n    \r\n    const isSelf = currentUser.id === user.id;\r\n    \r\n    // 管理员和班主任可以编辑所有用户，其他角色只能编辑自己\r\n    if (!canManageUsers(currentUser) && !isSelf) {\r\n      alert('权限不足：您只能编辑自己的信息或拥有管理员/班主任权限');\r\n      return;\r\n    }\r\n    \r\n    // 确保性别值统一格式\r\n    let genderValue = user.gender;\r\n    if (genderValue === 'MALE' || genderValue === 'male') genderValue = 'male';\r\n    if (genderValue === 'FEMALE' || genderValue === 'female') genderValue = 'female';\r\n    \r\n    setUserForm({\r\n      id: user.id,\r\n      username: user.username || '',\r\n      name: user.name || '',\r\n      email: user.email || '',\r\n      phone: user.phone || '',\r\n      password: '',\r\n      confirmPassword: '',\r\n      gender: genderValue || ''\r\n    });\r\n    setEditDialogOpen(true);\r\n  };\r\n  \r\n  // 显示提示信息\r\n  const showSnackbar = (message: string, severity: 'success' | 'info' | 'warning' | 'error' = 'success') => {\r\n    setSnackbar({\r\n      open: true,\r\n      message,\r\n      severity\r\n    });\r\n  };\r\n  \r\n  // 关闭提示信息\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar(prev => ({\r\n      ...prev,\r\n      open: false\r\n    }));\r\n  };\r\n  \r\n  // 打开确认对话框\r\n  const openConfirmDialog = (title: string, content: string, onConfirm: () => void) => {\r\n    setConfirmDialog({\r\n      open: true,\r\n      title,\r\n      content,\r\n      onConfirm\r\n    });\r\n  };\r\n  \r\n  // 关闭确认对话框\r\n  const closeConfirmDialog = () => {\r\n    setConfirmDialog(prev => ({\r\n      ...prev,\r\n      open: false\r\n    }));\r\n  };\r\n  \r\n  // 修改处理删除点击事件的方法\r\n  const handleDeleteClick = (user: UserType) => {\r\n    setSelectedUser(user);\r\n    // 使用新的确认对话框替代旧的删除对话框\r\n    openConfirmDialog(\r\n      \"删除用户\",\r\n      `确定要删除用户 ${user.name} (${user.username}) 吗？此操作无法撤销。`,\r\n      () => handleDelete()\r\n    );\r\n  };\r\n  \r\n  // 修改处理删除的方法\r\n  const handleDelete = async () => {\r\n    if (!selectedUser) return;\r\n    \r\n    setSubmitLoading(true);\r\n    try {\r\n      await deleteUser(selectedUser.id);\r\n      // 使用新的Snackbar显示成功消息\r\n      showSnackbar(`用户 ${selectedUser.name} 已成功删除`, 'success');\r\n      fetchUsers();\r\n    } catch (error) {\r\n      console.error('删除用户失败:', error);\r\n      // 使用新的Snackbar显示错误消息\r\n      showSnackbar(`删除用户失败: ${(error as any)?.response?.data?.message || '未知错误'}`, 'error');\r\n    } finally {\r\n      setSubmitLoading(false);\r\n      setSelectedUser(null);\r\n    }\r\n  };\r\n  \r\n  // 处理角色管理\r\n  const handleManageRoles = (user: UserType) => {\r\n    // 权限检查：只有管理员和班主任可以管理角色\r\n    if (!currentUser) {\r\n      alert('您需要登录才能执行此操作');\r\n      return;\r\n    }\r\n    \r\n    if (!canManageUsers(currentUser)) {\r\n      alert('权限不足：只有管理员和班主任可以管理用户角色');\r\n      return;\r\n    }\r\n    \r\n    setSelectedUser(user);\r\n    setSelectedRoles([...user.roles]);\r\n    setRoleDialogOpen(true);\r\n  };\r\n  \r\n  // 保存角色\r\n  const saveRoles = async () => {\r\n    if (!selectedUser) return;\r\n    \r\n    if (selectedRoles.length === 0) {\r\n      alert('用户至少需要一个角色');\r\n      return;\r\n    }\r\n    \r\n    setRoleLoading(true);\r\n    try {\r\n      await updateUserRoles(selectedUser.id, selectedRoles);\r\n      // 使用新的Snackbar显示成功消息\r\n      showSnackbar(`用户 ${selectedUser.name} 的角色已更新`, 'success');\r\n      setRoleDialogOpen(false);\r\n      fetchUsers();\r\n      \r\n      if (currentUser && selectedUser.id === currentUser.id) {\r\n        alert('您已修改自己的角色，可能需要重新登录才能生效');\r\n      }\r\n    } catch (error: any) {\r\n      alert('角色更新失败: ' + (error.response?.data?.message || '未知错误'));\r\n    } finally {\r\n      setRoleLoading(false);\r\n    }\r\n  };\r\n  \r\n  // 修改提交添加表单的方法\r\n  const submitAddForm = async () => {\r\n    setSubmitLoading(true);\r\n    try {\r\n      if (userForm.password !== userForm.confirmPassword) {\r\n        // 使用新的Snackbar显示错误消息\r\n        showSnackbar('两次输入的密码不一致', 'error');\r\n        setSubmitLoading(false);\r\n        return;\r\n      }\r\n      \r\n      const userData = {\r\n        username: userForm.username,\r\n        password: userForm.password,\r\n        name: userForm.name,\r\n        email: userForm.email,\r\n        phone: userForm.phone || undefined,\r\n        gender: userForm.gender || undefined\r\n      };\r\n      \r\n      await register(userData);\r\n      // 使用新的Snackbar显示成功消息\r\n      showSnackbar('用户添加成功', 'success');\r\n      setAddDialogOpen(false);\r\n      fetchUsers();\r\n    } catch (error) {\r\n      console.error('添加用户失败:', error);\r\n      // 使用新的Snackbar显示错误消息\r\n      showSnackbar(`添加用户失败: ${(error as any)?.response?.data?.message || '未知错误'}`, 'error');\r\n    } finally {\r\n      setSubmitLoading(false);\r\n    }\r\n  };\r\n  \r\n  // 修改提交编辑表单的方法\r\n  const submitEditForm = async () => {\r\n    if (!userForm.id) return;\r\n    \r\n    setSubmitLoading(true);\r\n    try {\r\n      // 检查密码是否一致（如果提供了密码）\r\n      if (userForm.password && userForm.password !== userForm.confirmPassword) {\r\n        // 使用新的Snackbar显示错误消息\r\n        showSnackbar('两次输入的密码不一致', 'error');\r\n        setSubmitLoading(false);\r\n        return;\r\n      }\r\n      \r\n      const userData = {\r\n        name: userForm.name,\r\n        email: userForm.email,\r\n        phone: userForm.phone || undefined,\r\n        gender: userForm.gender || undefined\r\n      };\r\n      \r\n      // 只有在有输入密码时才更新密码\r\n      if (userForm.password) {\r\n        (userData as any).password = userForm.password;\r\n      }\r\n      \r\n      await updateUser(userForm.id, userData);\r\n      // 使用新的Snackbar显示成功消息\r\n      showSnackbar('用户信息更新成功', 'success');\r\n      setEditDialogOpen(false);\r\n      fetchUsers();\r\n    } catch (error) {\r\n      console.error('更新用户失败:', error);\r\n      // 使用新的Snackbar显示错误消息\r\n      showSnackbar(`更新用户失败: ${(error as any)?.response?.data?.message || '未知错误'}`, 'error');\r\n    } finally {\r\n      setSubmitLoading(false);\r\n    }\r\n  };\r\n  \r\n  // 处理表单输入变化\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setUserForm(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n  };\r\n  \r\n  // 处理角色选择变化\r\n  const handleRoleChange = (role: string) => {\r\n    const newSelectedRoles = [...selectedRoles];\r\n    \r\n    if (newSelectedRoles.includes(role)) {\r\n      // 如果角色已选中，则移除\r\n      const index = newSelectedRoles.indexOf(role);\r\n      newSelectedRoles.splice(index, 1);\r\n    } else {\r\n      // 如果角色未选中，则添加\r\n      newSelectedRoles.push(role);\r\n    }\r\n    \r\n    setSelectedRoles(newSelectedRoles);\r\n  };\r\n  \r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Card elevation={3} sx={{ borderRadius: 2, overflow: 'hidden' }}>\r\n        <CardHeader \r\n          title={<Typography variant=\"h5\">用户管理</Typography>}\r\n          action={\r\n            <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\r\n              <FormControl variant=\"outlined\" size=\"small\" sx={{ minWidth: 150 }}>\r\n                <Select\r\n                  value={selectedRole}\r\n                  onChange={(e) => {\r\n                    setSelectedRole(e.target.value);\r\n                    setCurrentPage(0);\r\n                  }}\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\">所有用户</MenuItem>\r\n                  <MenuItem value=\"ROLE_ADMIN\">管理员</MenuItem>\r\n                  <MenuItem value=\"ROLE_HEADTEACHER\">班主任</MenuItem>\r\n                  <MenuItem value=\"ROLE_TEACHER\">教师</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              \r\n              <TextField\r\n                placeholder=\"搜索用户名或姓名\"\r\n                size=\"small\"\r\n                value={searchQuery}\r\n                onChange={(e) => {\r\n                  setSearchQuery(e.target.value);\r\n                  setCurrentPage(0);\r\n                }}\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <SearchIcon />\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n                sx={{ width: 250 }}\r\n              />\r\n              \r\n              <Button \r\n                variant=\"contained\" \r\n                color=\"primary\" \r\n                startIcon={<AddIcon />}\r\n                onClick={handleAddUser}\r\n              >\r\n                添加用户\r\n              </Button>\r\n            </Box>\r\n          }\r\n        />\r\n        \r\n        <CardContent>\r\n          <TableContainer component={Paper} elevation={0}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>用户名</TableCell>\r\n                  <TableCell>姓名</TableCell>\r\n                  <TableCell>邮箱</TableCell>\r\n                  <TableCell>性别</TableCell>\r\n                  <TableCell>电话</TableCell>\r\n                  <TableCell>角色</TableCell>\r\n                  <TableCell>创建时间</TableCell>\r\n                  <TableCell>操作</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {loading ? (\r\n                  <TableRow>\r\n                    <TableCell colSpan={8} align=\"center\">\r\n                      <CircularProgress size={24} />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ) : paginatedUsers.length === 0 ? (\r\n                  <TableRow>\r\n                    <TableCell colSpan={8} align=\"center\">\r\n                      没有找到用户数据\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ) : (\r\n                  paginatedUsers.map((user) => (\r\n                    user && user.id ? (\r\n                    <TableRow key={user.id}>\r\n                      <TableCell>{user.username}</TableCell>\r\n                      <TableCell>{user.name}</TableCell>\r\n                      <TableCell>{user.email}</TableCell>\r\n                      <TableCell>\r\n                        {user.gender === 'MALE' || user.gender === 'male' ? '男' : \r\n                         user.gender === 'FEMALE' || user.gender === 'female' ? '女' : '未设置'}\r\n                      </TableCell>\r\n                      <TableCell>{user.phone || '-'}</TableCell>\r\n                      <TableCell>\r\n                        <Box sx={{ display: 'flex', gap: 0.5, flexWrap: 'wrap' }}>\r\n                          {Array.isArray(user.roles) && user.roles.map((role) => (\r\n                            <Chip\r\n                              key={role}\r\n                              label={getRoleLabel(role)}\r\n                              color={getRoleType(role) as any}\r\n                              size=\"small\"\r\n                              sx={{ m: 0.2 }}\r\n                            />\r\n                          ))}\r\n                        </Box>\r\n                      </TableCell>\r\n                      <TableCell>{user.createdAt ? formatDateTime(user.createdAt) : '-'}</TableCell>\r\n                      <TableCell>\r\n                        <Box sx={{ display: 'flex', gap: 1 }}>\r\n                          <Button \r\n                            variant=\"outlined\" \r\n                            color=\"primary\" \r\n                            size=\"small\"\r\n                            onClick={() => handleEdit(user)}\r\n                          >\r\n                            编辑\r\n                          </Button>\r\n                          {/* 只对管理员和班主任显示角色管理按钮 */}\r\n                          {canManageUsers(currentUser) && (\r\n                            <Button \r\n                              variant=\"outlined\" \r\n                              color=\"success\" \r\n                              size=\"small\"\r\n                              onClick={() => handleManageRoles(user)}\r\n                            >\r\n                              角色管理\r\n                            </Button>\r\n                          )}\r\n                          {/* 只对管理员和班主任显示删除按钮 */}\r\n                          {canManageUsers(currentUser) && (\r\n                            <Button \r\n                              variant=\"outlined\" \r\n                              color=\"error\" \r\n                              size=\"small\"\r\n                              onClick={() => handleDeleteClick(user)}\r\n                              disabled={!!(Array.isArray(user.roles) && user.roles.includes('ROLE_ADMIN') && currentUser && currentUser.id !== user.id)}\r\n                            >\r\n                              删除\r\n                            </Button>\r\n                          )}\r\n                        </Box>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                    ) : null\r\n                  ))\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          \r\n          <TablePagination\r\n            component=\"div\"\r\n            count={filteredUsers.length}\r\n            page={currentPage}\r\n            onPageChange={(e, newPage) => setCurrentPage(newPage)}\r\n            rowsPerPage={pageSize}\r\n            onRowsPerPageChange={(e) => {\r\n              setPageSize(parseInt(e.target.value, 10));\r\n              setCurrentPage(0);\r\n            }}\r\n            labelRowsPerPage=\"每页行数\"\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n            labelDisplayedRows={({ from, to, count }) => `${from}-${to} 共 ${count}`}\r\n          />\r\n        </CardContent>\r\n      </Card>\r\n      \r\n      {/* 添加用户对话框 */}\r\n      <Dialog \r\n        open={addDialogOpen} \r\n        onClose={() => setAddDialogOpen(false)}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>添加用户</DialogTitle>\r\n        <DialogContent>\r\n          <Stack spacing={2} sx={{ mt: 1 }}>\r\n            <Box sx={{ width: '100%' }}>\r\n              <CustomInput\r\n                label=\"用户名\"\r\n                name=\"username\"\r\n                value={userForm.username}\r\n                onChange={handleInputChange}\r\n                required\r\n                fullWidth\r\n              />\r\n            </Box>\r\n            <Box sx={{ width: '100%' }}>\r\n              <CustomInput\r\n                label=\"姓名\"\r\n                name=\"name\"\r\n                value={userForm.name}\r\n                onChange={handleInputChange}\r\n                required\r\n                fullWidth\r\n              />\r\n            </Box>\r\n            <Box sx={{ width: '100%' }}>\r\n              <CustomInput\r\n                label=\"邮箱\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                value={userForm.email}\r\n                onChange={handleInputChange}\r\n                required\r\n                fullWidth\r\n              />\r\n            </Box>\r\n            <Box sx={{ width: '100%' }}>\r\n              <FormControl fullWidth>\r\n                <CustomInput\r\n                  select\r\n                  label=\"性别\"\r\n                  name=\"gender\"\r\n                  value={userForm.gender}\r\n                  onChange={handleInputChange}\r\n                  fullWidth\r\n                  inputProps={{ \r\n                    style: { width: '64.14px' }\r\n                  }}\r\n                  sx={{ \r\n                    '& .MuiSelect-select': { paddingY: 1.5 },\r\n                    '& .MuiMenu-paper': { width: 'auto', minWidth: '200px' }\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"male\">男</MenuItem>\r\n                  <MenuItem value=\"female\">女</MenuItem>\r\n                </CustomInput>\r\n              </FormControl>\r\n            </Box>\r\n            <Box sx={{ width: '100%' }}>\r\n              <CustomInput\r\n                label=\"电话\"\r\n                name=\"phone\"\r\n                value={userForm.phone}\r\n                onChange={handleInputChange}\r\n                fullWidth\r\n              />\r\n            </Box>\r\n            <Box sx={{ width: '100%' }}>\r\n              <CustomInput\r\n                label=\"密码\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                value={userForm.password}\r\n                onChange={handleInputChange}\r\n                required\r\n                fullWidth\r\n              />\r\n            </Box>\r\n            <Box sx={{ width: '100%' }}>\r\n              <CustomInput\r\n                label=\"确认密码\"\r\n                name=\"confirmPassword\"\r\n                type=\"password\"\r\n                value={userForm.confirmPassword}\r\n                onChange={handleInputChange}\r\n                required\r\n                fullWidth\r\n              />\r\n            </Box>\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setAddDialogOpen(false)}>取消</Button>\r\n          <Button \r\n            onClick={submitAddForm} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={submitLoading}\r\n          >\r\n            {submitLoading ? <CircularProgress size={24} /> : '确定'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      \r\n      {/* 编辑用户对话框 */}\r\n      <Dialog \r\n        open={editDialogOpen} \r\n        onClose={() => setEditDialogOpen(false)}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>编辑用户</DialogTitle>\r\n        <DialogContent>\r\n          <Stack spacing={2} sx={{ mt: 1 }}>\r\n            <Box sx={{ width: '100%' }}>\r\n              <CustomInput\r\n                label=\"用户名\"\r\n                name=\"username\"\r\n                value={userForm.username}\r\n                onChange={handleInputChange}\r\n                required\r\n                fullWidth\r\n                disabled\r\n              />\r\n            </Box>\r\n            <Box sx={{ width: '100%' }}>\r\n              <CustomInput\r\n                label=\"姓名\"\r\n                name=\"name\"\r\n                value={userForm.name}\r\n                onChange={handleInputChange}\r\n                required\r\n                fullWidth\r\n              />\r\n            </Box>\r\n            <Box sx={{ width: '100%' }}>\r\n              <CustomInput\r\n                label=\"邮箱\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                value={userForm.email}\r\n                onChange={handleInputChange}\r\n                required\r\n                fullWidth\r\n              />\r\n            </Box>\r\n            <Box sx={{ width: '100%' }}>\r\n              <FormControl fullWidth>\r\n                <CustomInput\r\n                  select\r\n                  label=\"性别\"\r\n                  name=\"gender\"\r\n                  value={userForm.gender}\r\n                  onChange={handleInputChange}\r\n                  fullWidth\r\n                  inputProps={{ \r\n                    style: { width: '64.14px' }\r\n                  }}\r\n                  sx={{ \r\n                    '& .MuiSelect-select': { paddingY: 1.5 },\r\n                    '& .MuiMenu-paper': { width: 'auto', minWidth: '200px' }\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"male\">男</MenuItem>\r\n                  <MenuItem value=\"female\">女</MenuItem>\r\n                </CustomInput>\r\n              </FormControl>\r\n            </Box>\r\n            <Box sx={{ width: '100%' }}>\r\n              <CustomInput\r\n                label=\"电话\"\r\n                name=\"phone\"\r\n                value={userForm.phone}\r\n                onChange={handleInputChange}\r\n                fullWidth\r\n              />\r\n            </Box>\r\n            <Box sx={{ width: '100%' }}>\r\n              <CustomInput\r\n                label=\"密码（不填则不更改）\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                value={userForm.password}\r\n                onChange={handleInputChange}\r\n                fullWidth\r\n              />\r\n            </Box>\r\n            <Box sx={{ width: '100%' }}>\r\n              <CustomInput\r\n                label=\"确认密码\"\r\n                name=\"confirmPassword\"\r\n                type=\"password\"\r\n                value={userForm.confirmPassword}\r\n                onChange={handleInputChange}\r\n                fullWidth\r\n                disabled={!userForm.password}\r\n              />\r\n            </Box>\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setEditDialogOpen(false)}>取消</Button>\r\n          <Button \r\n            onClick={submitEditForm} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={submitLoading}\r\n          >\r\n            {submitLoading ? <CircularProgress size={24} /> : '确定'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      \r\n      {/* 角色管理对话框 */}\r\n      <Dialog \r\n        open={roleDialogOpen} \r\n        onClose={() => setRoleDialogOpen(false)}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>角色管理</DialogTitle>\r\n        <DialogContent>\r\n          {selectedUser && (\r\n            <>\r\n              <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n                为 <strong>{selectedUser.name}</strong> ({selectedUser.username}) 分配角色：\r\n              </Typography>\r\n              \r\n              <FormGroup>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={selectedRoles.includes('ROLE_ADMIN')}\r\n                      onChange={() => handleRoleChange('ROLE_ADMIN')}\r\n                    />\r\n                  }\r\n                  label=\"管理员\"\r\n                />\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={selectedRoles.includes('ROLE_HEADTEACHER')}\r\n                      onChange={() => handleRoleChange('ROLE_HEADTEACHER')}\r\n                    />\r\n                  }\r\n                  label=\"班主任\"\r\n                />\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={selectedRoles.includes('ROLE_TEACHER')}\r\n                      onChange={() => handleRoleChange('ROLE_TEACHER')}\r\n                    />\r\n                  }\r\n                  label=\"教师\"\r\n                />\r\n              </FormGroup>\r\n              \r\n              {selectedUser.id === currentUser?.id && (\r\n                <Alert \r\n                  severity=\"warning\" \r\n                  sx={{ mt: 2 }}\r\n                >\r\n                  您正在修改自己的角色，请注意：移除管理员权限后可能无法再访问此页面！\r\n                </Alert>\r\n              )}\r\n            </>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setRoleDialogOpen(false)}>取消</Button>\r\n          <Button \r\n            onClick={saveRoles} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={roleLoading}\r\n          >\r\n            {roleLoading ? <CircularProgress size={24} /> : '保存'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      \r\n      {/* 提示信息 */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={3000}\r\n        onClose={handleCloseSnackbar}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n      >\r\n        <Alert \r\n          onClose={handleCloseSnackbar} \r\n          severity={snackbar.severity}\r\n          variant=\"filled\"\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n      \r\n      {/* 确认对话框 */}\r\n      <Dialog\r\n        open={confirmDialog.open}\r\n        onClose={closeConfirmDialog}\r\n      >\r\n        <DialogTitle>{confirmDialog.title}</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>{confirmDialog.content}</Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={closeConfirmDialog}>取消</Button>\r\n          <Button \r\n            onClick={() => {\r\n              confirmDialog.onConfirm();\r\n              closeConfirmDialog();\r\n            }} \r\n            color={confirmDialog.title === '删除用户' ? 'error' : 'primary'} \r\n            variant=\"contained\"\r\n            autoFocus\r\n          >\r\n            {confirmDialog.title === '删除用户' ? '确定删除' : '确定'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserManagement; "],"names":["directAxios","axios","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","concat","error","Promise","reject","getAllUsers","async","console","log","get","getAllTeachers","updateUser","id","user","put","deleteUser","delete","updateUserRoles","roles","formatDateTime","dateTime","Array","isArray","year","month","day","hour","minute","String","padStart","date","Date","isNaN","getTime","getFullYear","getMonth","getDate","hours","getHours","minutes","getMinutes","formatDate","dateObj","getCurrentWeekRange","now","dayOfWeek","getDay","firstDay","setDate","setHours","lastDay","getCurrentMonthRange","getCurrentSemesterRange","StyledTextField","styled","TextField","_ref","theme","borderRadius","transition","backgroundColor","boxShadow","borderColor","padding","transform","iconMap","_jsx","Person","Lock","Email","Phone","Search","forwardRef","_ref2","ref","_props$InputProps","_props$InputProps2","prefixIcon","showPassword","onEnter","onChange","props","_objectWithoutProperties","_excluded","showPasswordValue","setShowPasswordValue","useState","_objectSpread","variant","fullWidth","type","onKeyDown","e","key","InputProps","startAdornment","InputAdornment","position","children","endAdornment","IconButton","onClick","handleClickShowPassword","edge","size","VisibilityOff","Visibility","UserManagement","users","setUsers","loading","setLoading","searchQuery","setSearchQuery","selectedRole","setSelectedRole","total","setTotal","pageSize","setPageSize","currentPage","setCurrentPage","addDialogOpen","setAddDialogOpen","editDialogOpen","setEditDialogOpen","roleDialogOpen","setRoleDialogOpen","deleteDialogOpen","setDeleteDialogOpen","submitLoading","setSubmitLoading","userForm","setUserForm","username","name","email","phone","password","confirmPassword","gender","selectedUser","setSelectedUser","selectedRoles","setSelectedRoles","roleLoading","setRoleLoading","snackbar","setSnackbar","open","message","severity","confirmDialog","setConfirmDialog","title","content","onConfirm","authUser","useAuth","currentUser","role","hasRole","includes","canManageUsers","isAdmin","isHeadTeacher","fetchUsers","useCallback","response","data","length","warn","useEffect","filteredUsers","filter","query","toLowerCase","paginatedUsers","slice","getRoleType","getRoleLabel","showSnackbar","arguments","undefined","handleCloseSnackbar","prev","closeConfirmDialog","handleDeleteClick","openConfirmDialog","handleDelete","_response","_response$data","handleInputChange","value","target","handleRoleChange","newSelectedRoles","index","indexOf","splice","push","_jsxs","Box","sx","p","Card","elevation","overflow","CardHeader","Typography","action","display","gap","alignItems","FormControl","minWidth","Select","displayEmpty","MenuItem","placeholder","SearchIcon","width","Button","color","startIcon","AddIcon","handleAddUser","CardContent","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","colSpan","align","CircularProgress","map","flexWrap","Chip","label","m","createdAt","alert","isSelf","genderValue","handleEdit","handleManageRoles","disabled","TablePagination","count","page","onPageChange","newPage","rowsPerPage","onRowsPerPageChange","parseInt","labelRowsPerPage","rowsPerPageOptions","labelDisplayedRows","from","to","Dialog","onClose","maxWidth","DialogTitle","DialogContent","Stack","spacing","mt","CustomInput","required","select","inputProps","style","paddingY","DialogActions","userData","register","_response2","_response2$data","_response3","_response3$data","_Fragment","mb","FormGroup","FormControlLabel","control","Checkbox","checked","Alert","_error$response","_error$response$data","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","autoFocus"],"sourceRoot":""}