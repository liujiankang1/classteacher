{"version":3,"file":"static/js/914.2b8e1022.chunk.js","mappings":"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","sources":["api/student.ts","api/scoreStatisticsAPI.ts","components/charts/StudentScoreTrendChart.tsx","components/charts/ClassScoreComparisonChart.tsx","views/ScoreStatistics.tsx","api/examAPI.ts"],"sourcesContent":["import axiosInstance from './axios';\r\nimport axios from 'axios';\r\n\r\n// 创建一个专用于直接请求后端的axios实例\r\nconst directAxios = axios.create({\r\n  baseURL: 'http://124.70.74.246:8081',\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器 - 添加认证令牌\r\ndirectAxios.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\ninterface Student {\r\n  id?: number;\r\n  name: string;\r\n  studentNumber: string;\r\n  gender: string;\r\n  birthday?: string;\r\n  birthDate?: string;\r\n  parentName?: string;\r\n  parentPhone?: string;\r\n  address?: string;\r\n  notes?: string;\r\n  classInfo?: any;\r\n  classId?: number;\r\n  className?: string;\r\n}\r\n\r\ninterface PagedResponse<T> {\r\n  content: T[];\r\n  page: number;\r\n  size: number;\r\n  totalElements: number;\r\n  totalPages: number;\r\n  last: boolean;\r\n  number: number;\r\n  message?: string;\r\n}\r\n\r\n/**\r\n * 获取所有学生\r\n * @returns Promise\r\n */\r\nexport const getAllStudents = async () => {\r\n  return await directAxios.get('/api/students');\r\n};\r\n\r\n/**\r\n * 分页获取所有学生\r\n * @param page 页码\r\n * @param size 每页大小\r\n * @returns Promise\r\n */\r\nexport const getAllStudentsPaged = async (page: number = 0, size: number = 10) => {\r\n  console.log('开始获取学生分页数据，直接请求后端');\r\n  return await directAxios.get(`/api/students/paged?page=${page}&size=${size}`);\r\n};\r\n\r\n/**\r\n * 根据班级ID获取学生\r\n * @param classId 班级ID\r\n * @returns Promise\r\n */\r\nexport const getStudentsByClass = async (classId: number) => {\r\n  return await directAxios.get(`/api/students/class/${classId}`);\r\n};\r\n\r\n/**\r\n * 分页获取班级学生\r\n * @param classId 班级ID\r\n * @param page 页码\r\n * @param size 每页大小\r\n * @returns Promise\r\n */\r\nexport const getStudentsByClassPaged = async (classId: number, page: number = 0, size: number = 10) => {\r\n  return await directAxios.get(`/api/students/class/${classId}/paged?page=${page}&size=${size}`);\r\n};\r\n\r\n/**\r\n * 根据姓名搜索学生\r\n * @param name 学生姓名\r\n * @returns Promise\r\n */\r\nexport const searchStudents = async (name: string) => {\r\n  return await directAxios.get(`/api/students/search?name=${name}`);\r\n};\r\n\r\n/**\r\n * 分页搜索学生\r\n * @param name 学生姓名\r\n * @param page 页码\r\n * @param size 每页大小\r\n * @returns Promise\r\n */\r\nexport const searchStudentsPaged = async (name: string, page: number = 0, size: number = 10) => {\r\n  return await directAxios.get(`/api/students/search/paged?name=${name}&page=${page}&size=${size}`);\r\n};\r\n\r\n/**\r\n * 根据ID获取学生\r\n * @param id 学生ID\r\n * @returns Promise\r\n */\r\nexport const getStudentById = async (id: number) => {\r\n  return await directAxios.get(`/api/students/${id}`);\r\n};\r\n\r\n/**\r\n * 根据学号获取学生\r\n * @param studentNumber 学号\r\n * @returns Promise\r\n */\r\nexport const getStudentByNumber = async (studentNumber: string) => {\r\n  return await directAxios.get(`/api/students/number/${studentNumber}`);\r\n};\r\n\r\n/**\r\n * 创建学生\r\n * @param student 学生信息\r\n * @returns Promise\r\n */\r\nexport const createStudent = async (student: Student) => {\r\n  return await directAxios.post('/api/students', student);\r\n};\r\n\r\n/**\r\n * 更新学生信息\r\n * @param id 学生ID\r\n * @param student 学生信息\r\n * @returns Promise\r\n */\r\nexport const updateStudent = async (id: number, student: Student) => {\r\n  return await directAxios.put(`/api/students/${id}`, student);\r\n};\r\n\r\n/**\r\n * 删除学生\r\n * @param id 学生ID\r\n * @returns Promise\r\n */\r\nexport const deleteStudent = async (id: number) => {\r\n  return await directAxios.delete(`/api/students/${id}`);\r\n};\r\n\r\n/**\r\n * 分配学生到班级\r\n * @param studentId 学生ID\r\n * @param classId 班级ID\r\n * @returns Promise\r\n */\r\nexport const assignStudentToClass = async (studentId: number, classId: number) => {\r\n  return await directAxios.put(`/api/students/${studentId}/assign/${classId}`);\r\n};\r\n\r\n/**\r\n * 批量导入学生\r\n * @param formData 包含文件和班级ID的表单数据\r\n * @returns Promise\r\n */\r\nexport const batchImportStudents = async (formData: FormData) => {\r\n  return await directAxios.post('/api/students/batch', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data'\r\n    }\r\n  });\r\n}; ","import axiosInstance from './axios';\r\nimport axios from 'axios';\r\n\r\n// 创建一个专用于直接请求后端的axios实例\r\nconst directAxios = axios.create({\r\n  baseURL: 'http://124.70.74.246:8081',\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器 - 添加认证令牌\r\ndirectAxios.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 获取学生个人考试成绩趋势\r\nexport const getStudentScoreTrend = async (\r\n  studentId: number, \r\n  subjectId?: number, \r\n  examIds?: number[]\r\n) => {\r\n  const params: any = { studentId };\r\n  if (subjectId) params.subjectId = subjectId;\r\n  if (examIds && examIds.length > 0) params.examIds = examIds.join(',');\r\n  \r\n  console.log('获取学生成绩趋势，直接请求后端');\r\n  return directAxios.get('/api/statistics/student/trend', { params });\r\n};\r\n\r\n// 获取班级考试成绩柱状对比\r\nexport const getClassScoreComparison = async (\r\n  classId: number, \r\n  examId?: number, \r\n  subjectId?: number\r\n) => {\r\n  const params: any = { classId };\r\n  if (examId) params.examId = examId;\r\n  if (subjectId) params.subjectId = subjectId;\r\n  \r\n  return directAxios.get('/api/statistics/class/comparison', { params });\r\n};\r\n\r\n// 获取班级平均分排名\r\nexport const getClassRanking = async (examId: number) => {\r\n  return directAxios.get('/api/statistics/class/ranking', { params: { examId } });\r\n};\r\n\r\n// 获取学生排名\r\nexport const getStudentRanking = async (\r\n  examId: number, \r\n  classId?: number,\r\n  subjectId?: number\r\n) => {\r\n  const params: any = { examId };\r\n  if (classId) params.classId = classId;\r\n  if (subjectId) params.subjectId = subjectId;\r\n  \r\n  return directAxios.get('/api/statistics/student/ranking', { params });\r\n};\r\n\r\n// 获取考试科目列表\r\nexport const getExamSubjects = async (examId: number) => {\r\n  return directAxios.get(`/api/statistics/exam/${examId}/subjects`);\r\n};\r\n\r\n// 获取所有可用考试\r\nexport const getAvailableExams = async () => {\r\n  return directAxios.get('/api/statistics/exams/available');\r\n}; ","import React, { useEffect, useRef } from 'react';\r\nimport { Box, Typography, CircularProgress, Paper } from '@mui/material';\r\nimport * as echarts from 'echarts/core';\r\nimport {\r\n  GridComponent,\r\n  TooltipComponent,\r\n  TitleComponent,\r\n  LegendComponent,\r\n  ToolboxComponent,\r\n  DataZoomComponent\r\n} from 'echarts/components';\r\nimport { LineChart } from 'echarts/charts';\r\nimport { UniversalTransition } from 'echarts/features';\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\nimport { ScoreTrendPoint } from '../../types/scoreStatistics';\r\n\r\n// 注册必要的组件\r\necharts.use([\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  GridComponent,\r\n  LineChart,\r\n  CanvasRenderer,\r\n  UniversalTransition,\r\n  LegendComponent,\r\n  ToolboxComponent,\r\n  DataZoomComponent\r\n]);\r\n\r\ninterface StudentScoreTrendChartProps {\r\n  data: {\r\n    [subjectId: string]: ScoreTrendPoint[];\r\n  };\r\n  subjectNames: { [key: string]: string };\r\n  loading?: boolean;\r\n  height?: number | string;\r\n  title?: string;\r\n}\r\n\r\nconst StudentScoreTrendChart: React.FC<StudentScoreTrendChartProps> = ({\r\n  data,\r\n  subjectNames,\r\n  loading = false,\r\n  height = 400,\r\n  title = '学生成绩趋势'\r\n}) => {\r\n  const chartRef = useRef<HTMLDivElement>(null);\r\n  const chartInstance = useRef<echarts.ECharts | null>(null);\r\n\r\n  // 初始化和更新图表\r\n  useEffect(() => {\r\n    // 如果正在加载或没有数据，不渲染图表\r\n    if (loading || !data || Object.keys(data).length === 0) return;\r\n\r\n    // 如果DOM元素不存在，不渲染图表\r\n    if (!chartRef.current) return;\r\n\r\n    // 初始化图表实例\r\n    if (!chartInstance.current) {\r\n      chartInstance.current = echarts.init(chartRef.current);\r\n    }\r\n\r\n    // 准备数据\r\n    const series: any[] = [];\r\n    const xAxisData: string[] = [];\r\n    const subjectIds = Object.keys(data);\r\n    \r\n    // 收集所有考试名称及其日期，用于排序\r\n    const examDataMap = new Map<string, { name: string, date: string, index: number }>();\r\n\r\n    // 收集所有考试数据用于排序\r\n    subjectIds.forEach(subjectId => {\r\n      data[subjectId].forEach(point => {\r\n        if (!examDataMap.has(`${point.examId}`)) {\r\n          examDataMap.set(`${point.examId}`, {\r\n            name: point.examName,\r\n            date: point.examDate,\r\n            index: examDataMap.size\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    // 按日期排序考试\r\n    const sortedExams = Array.from(examDataMap.entries()).sort((a, b) => {\r\n      // 优先按日期排序，如果日期相同则按原始顺序排序\r\n      const dateA = new Date(a[1].date).getTime();\r\n      const dateB = new Date(b[1].date).getTime();\r\n      if (dateA !== dateB) return dateA - dateB;\r\n      return a[1].index - b[1].index;\r\n    });\r\n\r\n    // 获取排序后的考试名称作为X轴\r\n    sortedExams.forEach(exam => {\r\n      xAxisData.push(exam[1].name);\r\n    });\r\n\r\n    // 为每个科目创建一个数据系列\r\n    subjectIds.forEach(subjectId => {\r\n      const subjectData = data[subjectId];\r\n      const examScoreMap = new Map<string, any>();\r\n\r\n      // 先按考试ID组织数据\r\n      subjectData.forEach(point => {\r\n        examScoreMap.set(`${point.examId}`, {\r\n          value: point.score,\r\n          fullScore: point.fullScore,\r\n          examDate: point.examDate,\r\n          rank: point.rank,\r\n          totalStudents: point.totalStudents,\r\n          examName: point.examName\r\n        });\r\n      });\r\n\r\n      // 按照排序后的考试顺序创建系列数据\r\n      const seriesData = sortedExams.map(exam => {\r\n        const examId = exam[0];\r\n        const pointData = examScoreMap.get(examId);\r\n        \r\n        // 如果该考试没有这个科目的数据，返回null\r\n        if (!pointData) {\r\n          return {\r\n            value: null,\r\n            fullScore: null,\r\n            examDate: exam[1].date,\r\n            examName: exam[1].name\r\n          };\r\n        }\r\n        \r\n        return pointData;\r\n      });\r\n\r\n      const subjectName = subjectNames[subjectId] || `科目${subjectId}`;\r\n      \r\n      series.push({\r\n        name: subjectName,\r\n        type: 'line',\r\n        data: seriesData,\r\n        smooth: true,\r\n        symbol: 'circle',\r\n        symbolSize: 8,\r\n        lineStyle: {\r\n          width: 3\r\n        },\r\n        itemStyle: {\r\n          borderWidth: 2\r\n        },\r\n        label: {\r\n          show: true,\r\n          position: 'top',\r\n          formatter: function(params: any) {\r\n            if (params.value === null) return '';\r\n            return params.value;\r\n          },\r\n          fontSize: 12,\r\n          color: '#333'\r\n        },\r\n        connectNulls: true, // 连接空值点\r\n        emphasis: {\r\n          itemStyle: {\r\n            borderWidth: 3,\r\n            shadowBlur: 10,\r\n            shadowColor: 'rgba(0, 0, 0, 0.3)'\r\n          },\r\n          label: {\r\n            fontSize: 14,\r\n            fontWeight: 'bold'\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // 配置选项\r\n    const option = {\r\n      title: {\r\n        text: title,\r\n        left: 'center'\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        formatter: function (params: any) {\r\n          if (params.length === 0) return '';\r\n          \r\n          const dataIndex = params[0].dataIndex;\r\n          const examName = xAxisData[dataIndex];\r\n          let tooltipText = `<div style=\"font-weight:bold;margin-bottom:5px\">${examName}</div>`;\r\n          \r\n          params.forEach((param: any) => {\r\n            if (param.value === null) return;\r\n            \r\n            const { fullScore, rank, totalStudents } = param.data;\r\n            if (!fullScore) return;\r\n            \r\n            const percentage = (param.value / fullScore * 100).toFixed(2);\r\n            tooltipText += `<div style=\"margin: 3px 0\">${param.seriesName}: <span style=\"font-weight:bold;color:${param.color}\">${param.value}</span> / ${fullScore} (${percentage}%)</div>`;\r\n            \r\n            if (rank && totalStudents) {\r\n              tooltipText += `<div style=\"margin-left:15px\">排名: ${rank} / ${totalStudents}</div>`;\r\n            }\r\n          });\r\n          \r\n          return tooltipText;\r\n        }\r\n      },\r\n      legend: {\r\n        type: 'scroll',\r\n        orient: 'horizontal',\r\n        bottom: 30,\r\n        data: subjectIds.map(id => subjectNames[id] || `科目${id}`)\r\n      },\r\n      toolbox: {\r\n        feature: {\r\n          saveAsImage: { title: '保存为图片' }\r\n        }\r\n      },\r\n      grid: {\r\n        left: '3%',\r\n        right: '4%',\r\n        bottom: '15%',\r\n        top: '15%',\r\n        containLabel: true\r\n      },\r\n      dataZoom: [\r\n        {\r\n          type: 'slider',\r\n          show: xAxisData.length > 5,\r\n          bottom: 5,\r\n          height: 20,\r\n          start: 0,\r\n          end: xAxisData.length <= 5 ? 100 : 80\r\n        }\r\n      ],\r\n      xAxis: {\r\n        type: 'category',\r\n        boundaryGap: true,\r\n        data: xAxisData,\r\n        axisLabel: {\r\n          rotate: 30,\r\n          fontSize: 12,\r\n          interval: 0\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        name: '分数',\r\n        nameLocation: 'middle',\r\n        nameGap: 40,\r\n        min: 0,\r\n        max: function(value: { max: number }) {\r\n          return Math.max(100, Math.ceil(value.max / 10) * 10);\r\n        }\r\n      },\r\n      series: series\r\n    };\r\n\r\n    // 设置选项并渲染图表\r\n    chartInstance.current.setOption(option);\r\n\r\n    // 响应窗口大小变化\r\n    const handleResize = () => {\r\n      chartInstance.current?.resize();\r\n    };\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, [data, loading, subjectNames, title]);\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', position: 'relative' }}>\r\n      {loading && (\r\n        <Box\r\n          sx={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            backgroundColor: 'rgba(255, 255, 255, 0.7)',\r\n            zIndex: 1\r\n          }}\r\n        >\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n\r\n      {!data || Object.keys(data).length === 0 && !loading ? (\r\n        <Paper\r\n          sx={{\r\n            height,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            backgroundColor: '#f5f5f5'\r\n          }}\r\n        >\r\n          <Typography variant=\"body1\" color=\"textSecondary\">\r\n            暂无数据\r\n          </Typography>\r\n        </Paper>\r\n      ) : (\r\n        <Box ref={chartRef} sx={{ width: '100%', height }} />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default StudentScoreTrendChart; ","import React, { useEffect, useRef } from 'react';\r\nimport { Box, Typography, CircularProgress, Paper } from '@mui/material';\r\nimport * as echarts from 'echarts/core';\r\nimport {\r\n  GridComponent,\r\n  TooltipComponent,\r\n  TitleComponent,\r\n  LegendComponent,\r\n  ToolboxComponent\r\n} from 'echarts/components';\r\nimport { BarChart } from 'echarts/charts';\r\nimport { UniversalTransition } from 'echarts/features';\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\n\r\n// 注册必要的组件\r\necharts.use([\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  GridComponent,\r\n  BarChart,\r\n  CanvasRenderer,\r\n  UniversalTransition,\r\n  LegendComponent,\r\n  ToolboxComponent\r\n]);\r\n\r\ninterface ClassScoreData {\r\n  subjectName: string;\r\n  avgScore: number;\r\n  maxScore: number;\r\n  minScore: number;\r\n  passRate: number;\r\n  excellentRate: number;\r\n  fullScore: number;\r\n}\r\n\r\ninterface ClassScoreComparisonChartProps {\r\n  data: {\r\n    [subjectId: string]: ClassScoreData;\r\n  };\r\n  totalStats?: {\r\n    avgScore: number;\r\n    maxScore: number;\r\n    minScore: number;\r\n    passRate: number;\r\n    excellentRate: number;\r\n  };\r\n  loading?: boolean;\r\n  height?: number | string;\r\n  title?: string;\r\n  showType?: 'score' | 'rate' | 'both';\r\n  scoreType?: 'total' | 'average';\r\n}\r\n\r\nconst ClassScoreComparisonChart: React.FC<ClassScoreComparisonChartProps> = ({\r\n  data,\r\n  totalStats,\r\n  loading = false,\r\n  height = 400,\r\n  title = '班级成绩对比',\r\n  showType = 'both',\r\n  scoreType = 'total'\r\n}) => {\r\n  const chartRef = useRef<HTMLDivElement>(null);\r\n  const chartInstance = useRef<echarts.ECharts | null>(null);\r\n\r\n  // 初始化和更新图表\r\n  useEffect(() => {\r\n    // 如果正在加载或没有数据，不渲染图表\r\n    if (loading || !data || Object.keys(data).length === 0) return;\r\n\r\n    // 如果DOM元素不存在，不渲染图表\r\n    if (!chartRef.current) return;\r\n\r\n    // 初始化图表实例\r\n    if (!chartInstance.current) {\r\n      chartInstance.current = echarts.init(chartRef.current);\r\n    }\r\n\r\n    // 准备数据\r\n    const subjectIds = Object.keys(data);\r\n    const xAxisData = subjectIds.map(id => data[id].subjectName);\r\n    \r\n    // 如果包括总分，则添加到末尾\r\n    if (totalStats) {\r\n      xAxisData.push('总分');\r\n    }\r\n\r\n    // 准备系列数据\r\n    const avgScores = subjectIds.map(id => data[id].avgScore);\r\n    const maxScores = subjectIds.map(id => data[id].maxScore);\r\n    const minScores = subjectIds.map(id => data[id].minScore);\r\n    const passRates = subjectIds.map(id => (data[id].passRate * 100).toFixed(2));\r\n    const excellentRates = subjectIds.map(id => (data[id].excellentRate * 100).toFixed(2));\r\n    \r\n    // 如果包括总分，添加总分数据\r\n    if (totalStats) {\r\n      avgScores.push(totalStats.avgScore);\r\n      maxScores.push(totalStats.maxScore);\r\n      minScores.push(totalStats.minScore);\r\n      passRates.push((totalStats.passRate * 100).toFixed(2));\r\n      excellentRates.push((totalStats.excellentRate * 100).toFixed(2));\r\n    }\r\n\r\n    // 配置选项\r\n    const scoreOption = {\r\n      title: {\r\n        text: `${title} - ${scoreType === 'total' ? '总分' : '平均分'}统计`,\r\n        left: 'center'\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n          type: 'shadow'\r\n        },\r\n        formatter: function (params: any) {\r\n          const subjectName = params[0].name;\r\n          let tooltipText = `<div style=\"font-weight:bold;margin-bottom:5px\">${subjectName}</div>`;\r\n          \r\n          params.forEach((param: any) => {\r\n            tooltipText += `<div style=\"margin: 3px 0\">${param.seriesName}: <span style=\"font-weight:bold;color:${param.color}\">${param.value}</span></div>`;\r\n          });\r\n          \r\n          return tooltipText;\r\n        }\r\n      },\r\n      legend: {\r\n        data: scoreType === 'total' ? ['平均分', '最高分', '最低分'] : ['平均分'],\r\n        bottom: 10\r\n      },\r\n      toolbox: {\r\n        feature: {\r\n          saveAsImage: { title: '保存为图片' }\r\n        }\r\n      },\r\n      grid: {\r\n        left: '3%',\r\n        right: '4%',\r\n        bottom: '15%',\r\n        top: '15%',\r\n        containLabel: true\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: xAxisData,\r\n        axisLabel: {\r\n          rotate: 30,\r\n          fontSize: 12\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        name: '分数',\r\n        nameLocation: 'middle',\r\n        nameGap: 40\r\n      },\r\n      series: scoreType === 'total' ? [\r\n        {\r\n          name: '平均分',\r\n          type: 'bar',\r\n          data: avgScores,\r\n          itemStyle: {\r\n            color: '#5470c6'\r\n          }\r\n        },\r\n        {\r\n          name: '最高分',\r\n          type: 'bar',\r\n          data: maxScores,\r\n          itemStyle: {\r\n            color: '#91cc75'\r\n          }\r\n        },\r\n        {\r\n          name: '最低分',\r\n          type: 'bar',\r\n          data: minScores,\r\n          itemStyle: {\r\n            color: '#ee6666'\r\n          }\r\n        }\r\n      ] : [\r\n        {\r\n          name: '平均分',\r\n          type: 'bar',\r\n          data: avgScores,\r\n          itemStyle: {\r\n            color: '#5470c6'\r\n          }\r\n        }\r\n      ]\r\n    };\r\n\r\n    const rateOption = {\r\n      title: {\r\n        text: `${title} - 比率统计`,\r\n        left: 'center'\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n          type: 'shadow'\r\n        },\r\n        formatter: function (params: any) {\r\n          const subjectName = params[0].name;\r\n          let tooltipText = `<div style=\"font-weight:bold;margin-bottom:5px\">${subjectName}</div>`;\r\n          \r\n          params.forEach((param: any) => {\r\n            tooltipText += `<div style=\"margin: 3px 0\">${param.seriesName}: <span style=\"font-weight:bold;color:${param.color}\">${param.value}%</span></div>`;\r\n          });\r\n          \r\n          return tooltipText;\r\n        }\r\n      },\r\n      legend: {\r\n        data: ['及格率', '优秀率'],\r\n        bottom: 10\r\n      },\r\n      toolbox: {\r\n        feature: {\r\n          saveAsImage: { title: '保存为图片' }\r\n        }\r\n      },\r\n      grid: {\r\n        left: '3%',\r\n        right: '4%',\r\n        bottom: '15%',\r\n        top: '15%',\r\n        containLabel: true\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: xAxisData,\r\n        axisLabel: {\r\n          rotate: 30,\r\n          fontSize: 12\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        name: '百分比',\r\n        nameLocation: 'middle',\r\n        nameGap: 40,\r\n        min: 0,\r\n        max: 100,\r\n        axisLabel: {\r\n          formatter: '{value}%'\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          name: '及格率',\r\n          type: 'bar',\r\n          data: passRates,\r\n          itemStyle: {\r\n            color: '#5470c6'\r\n          }\r\n        },\r\n        {\r\n          name: '优秀率',\r\n          type: 'bar',\r\n          data: excellentRates,\r\n          itemStyle: {\r\n            color: '#91cc75'\r\n          }\r\n        }\r\n      ]\r\n    };\r\n\r\n    // 根据显示类型设置选项\r\n    let option;\r\n    if (showType === 'score') {\r\n      option = scoreOption;\r\n    } else if (showType === 'rate') {\r\n      option = rateOption;\r\n    } else {\r\n      // 显示类型为 'both'，使用 Grid 组件显示两个图表\r\n      option = {\r\n        title: [\r\n          {\r\n            text: `${title} - ${scoreType === 'total' ? '总分' : '平均分'}统计`,\r\n            left: 'center',\r\n            top: '5%'\r\n          },\r\n          {\r\n            text: `${title} - 比率统计`,\r\n            left: 'center',\r\n            top: '55%'\r\n          }\r\n        ],\r\n        tooltip: [\r\n          {\r\n            trigger: 'axis',\r\n            axisPointer: {\r\n              type: 'shadow'\r\n            },\r\n            formatter: function (params: any) {\r\n              const subjectName = params[0].name;\r\n              let tooltipText = `<div style=\"font-weight:bold;margin-bottom:5px\">${subjectName}</div>`;\r\n              \r\n              params.forEach((param: any) => {\r\n                tooltipText += `<div style=\"margin: 3px 0\">${param.seriesName}: <span style=\"font-weight:bold;color:${param.color}\">${param.value}</span></div>`;\r\n              });\r\n              \r\n              return tooltipText;\r\n            }\r\n          },\r\n          {\r\n            trigger: 'axis',\r\n            axisPointer: {\r\n              type: 'shadow'\r\n            },\r\n            formatter: function (params: any) {\r\n              const subjectName = params[0].name;\r\n              let tooltipText = `<div style=\"font-weight:bold;margin-bottom:5px\">${subjectName}</div>`;\r\n              \r\n              params.forEach((param: any) => {\r\n                tooltipText += `<div style=\"margin: 3px 0\">${param.seriesName}: <span style=\"font-weight:bold;color:${param.color}\">${param.value}%</span></div>`;\r\n              });\r\n              \r\n              return tooltipText;\r\n            }\r\n          }\r\n        ],\r\n        grid: [\r\n          {\r\n            left: '3%',\r\n            right: '4%',\r\n            top: '15%',\r\n            height: '30%',\r\n            containLabel: true\r\n          },\r\n          {\r\n            left: '3%',\r\n            right: '4%',\r\n            top: '65%',\r\n            height: '30%',\r\n            containLabel: true\r\n          }\r\n        ],\r\n        xAxis: [\r\n          {\r\n            type: 'category',\r\n            data: xAxisData,\r\n            gridIndex: 0,\r\n            axisLabel: {\r\n              rotate: 30,\r\n              fontSize: 12\r\n            }\r\n          },\r\n          {\r\n            type: 'category',\r\n            data: xAxisData,\r\n            gridIndex: 1,\r\n            axisLabel: {\r\n              rotate: 30,\r\n              fontSize: 12\r\n            }\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            type: 'value',\r\n            name: '分数',\r\n            nameLocation: 'middle',\r\n            nameGap: 40,\r\n            gridIndex: 0\r\n          },\r\n          {\r\n            type: 'value',\r\n            name: '百分比',\r\n            nameLocation: 'middle',\r\n            nameGap: 40,\r\n            min: 0,\r\n            max: 100,\r\n            axisLabel: {\r\n              formatter: '{value}%'\r\n            },\r\n            gridIndex: 1\r\n          }\r\n        ],\r\n        legend: [\r\n          {\r\n            data: scoreType === 'total' ? ['平均分', '最高分', '最低分'] : ['平均分'],\r\n            bottom: '40%'\r\n          },\r\n          {\r\n            data: ['及格率', '优秀率'],\r\n            bottom: '0%'\r\n          }\r\n        ],\r\n        toolbox: {\r\n          feature: {\r\n            saveAsImage: { title: '保存为图片' }\r\n          }\r\n        },\r\n        series: scoreType === 'total' ? [\r\n          {\r\n            name: '平均分',\r\n            type: 'bar',\r\n            data: avgScores,\r\n            itemStyle: {\r\n              color: '#5470c6'\r\n            },\r\n            xAxisIndex: 0,\r\n            yAxisIndex: 0\r\n          },\r\n          {\r\n            name: '最高分',\r\n            type: 'bar',\r\n            data: maxScores,\r\n            itemStyle: {\r\n              color: '#91cc75'\r\n            },\r\n            xAxisIndex: 0,\r\n            yAxisIndex: 0\r\n          },\r\n          {\r\n            name: '最低分',\r\n            type: 'bar',\r\n            data: minScores,\r\n            itemStyle: {\r\n              color: '#ee6666'\r\n            },\r\n            xAxisIndex: 0,\r\n            yAxisIndex: 0\r\n          },\r\n          {\r\n            name: '及格率',\r\n            type: 'bar',\r\n            data: passRates,\r\n            itemStyle: {\r\n              color: '#5470c6'\r\n            },\r\n            xAxisIndex: 1,\r\n            yAxisIndex: 1\r\n          },\r\n          {\r\n            name: '优秀率',\r\n            type: 'bar',\r\n            data: excellentRates,\r\n            itemStyle: {\r\n              color: '#91cc75'\r\n            },\r\n            xAxisIndex: 1,\r\n            yAxisIndex: 1\r\n          }\r\n        ] : [\r\n          {\r\n            name: '平均分',\r\n            type: 'bar',\r\n            data: avgScores,\r\n            itemStyle: {\r\n              color: '#5470c6'\r\n            },\r\n            xAxisIndex: 0,\r\n            yAxisIndex: 0\r\n          },\r\n          {\r\n            name: '及格率',\r\n            type: 'bar',\r\n            data: passRates,\r\n            itemStyle: {\r\n              color: '#5470c6'\r\n            },\r\n            xAxisIndex: 1,\r\n            yAxisIndex: 1\r\n          },\r\n          {\r\n            name: '优秀率',\r\n            type: 'bar',\r\n            data: excellentRates,\r\n            itemStyle: {\r\n              color: '#91cc75'\r\n            },\r\n            xAxisIndex: 1,\r\n            yAxisIndex: 1\r\n          }\r\n        ]\r\n      };\r\n    }\r\n\r\n    // 设置选项并渲染图表\r\n    chartInstance.current.setOption(option);\r\n\r\n    // 响应窗口大小变化\r\n    const handleResize = () => {\r\n      chartInstance.current?.resize();\r\n    };\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, [data, loading, title, showType, scoreType, totalStats]);\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', position: 'relative' }}>\r\n      {loading && (\r\n        <Box\r\n          sx={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            backgroundColor: 'rgba(255, 255, 255, 0.7)',\r\n            zIndex: 1\r\n          }}\r\n        >\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n\r\n      {!data || Object.keys(data).length === 0 && !loading ? (\r\n        <Paper\r\n          sx={{\r\n            height,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            backgroundColor: '#f5f5f5'\r\n          }}\r\n        >\r\n          <Typography variant=\"body1\" color=\"textSecondary\">\r\n            暂无数据\r\n          </Typography>\r\n        </Paper>\r\n      ) : (\r\n        <Box ref={chartRef} sx={{ width: '100%', height }} />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ClassScoreComparisonChart; ","import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Card,\n  CardHeader,\n  CardContent,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  SelectChangeEvent,\n  Button,\n  Tabs,\n  Tab,\n  CircularProgress,\n  Alert,\n  Snackbar,\n  Stack,\n  Divider,\n  Autocomplete,\n  TextField,\n  Chip,\n  ToggleButtonGroup,\n  ToggleButton,\n  TableContainer,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell\n} from '@mui/material';\nimport {\n  BarChart as BarChartIcon,\n  ShowChart as LineChartIcon,\n  Timeline as TimelineIcon,\n  Percent as PercentIcon\n} from '@mui/icons-material';\nimport { useAuth } from '../contexts/AuthContext';\nimport * as examAPI from '../api/examAPI';\nimport * as scoreStatisticsAPI from '../api/scoreStatisticsAPI';\nimport * as studentAPI from '../api/student';\nimport { \n  Exam, \n  Subject, \n  Student, \n  StudentScoreTrend, \n  ClassScoreComparison\n} from '../types/scoreStatistics';\nimport StudentScoreTrendChart from '../components/charts/StudentScoreTrendChart';\nimport ClassScoreComparisonChart from '../components/charts/ClassScoreComparisonChart';\n\n// Tab面板接口\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\n// Tab面板组件\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`statistics-tabpanel-${index}`}\n      aria-labelledby={`statistics-tab-${index}`}\n      {...other}\n      style={{ marginTop: '16px' }}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\n// Tab属性生成函数\nfunction a11yProps(index: number) {\n  return {\n    id: `statistics-tab-${index}`,\n    'aria-controls': `statistics-tabpanel-${index}`,\n  };\n}\n\nconst ScoreStatistics: React.FC = () => {\n  const { user } = useAuth();\n  \n  // 状态管理\n  const [exams, setExams] = useState<Exam[]>([]);\n  const [selectedExam, setSelectedExam] = useState<number | string>('');\n  const [selectedSubject, setSelectedSubject] = useState<number | string>('');\n  const [subjects, setSubjects] = useState<Subject[]>([]);\n  const [students, setStudents] = useState<Student[]>([]);\n  const [selectedStudents, setSelectedStudents] = useState<Student[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [tabValue, setTabValue] = useState(0);\n  \n  // 数据状态\n  const [studentsTrendData, setStudentsTrendData] = useState<StudentScoreTrend[]>([]);\n  const [classComparisonData, setClassComparisonData] = useState<ClassScoreComparison | null>(null);\n  const [scoreDistributionSubject, setScoreDistributionSubject] = useState<string>('total');\n  const [scoreRangeData, setScoreRangeData] = useState<{[key: string]: {label: string; count: number; percentage: number;}[]}>({});\n  \n  // 消息提示\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: '',\n    severity: 'info' as 'error' | 'info' | 'success' | 'warning'\n  });\n  \n  // 获取所有考试\n  const fetchExams = async () => {\n    setLoading(true);\n    try {\n      const response = await examAPI.getAllExams();\n      if (response.data && Array.isArray(response.data)) {\n        const mappedExams: Exam[] = response.data.map(exam => ({\n          id: exam.id,\n          name: exam.examName || exam.name,\n          examDate: exam.examDate,\n          className: exam.classInfo?.className,\n          classId: exam.classInfo?.id\n        }));\n        setExams(mappedExams);\n      }\n    } catch (error) {\n      console.error('获取考试列表失败:', error);\n      showSnackbar('获取考试列表失败', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // 获取考试科目\n  const fetchSubjects = async (examId: number) => {\n    setLoading(true);\n    try {\n      const response = await examAPI.getExamById(examId);\n      if (response.data && response.data.examSubjects) {\n        const subjectsData = response.data.examSubjects.map((es: any) => ({\n          id: es.subject.id,\n          name: es.subjectName || es.subject.name,\n          fullScore: es.fullScore\n        }));\n        setSubjects(subjectsData);\n      }\n    } catch (error) {\n      console.error('获取科目列表失败:', error);\n      showSnackbar('获取科目列表失败', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // 获取学生列表\n  const fetchStudents = async (classId?: number) => {\n    try {\n      let response;\n      if (classId) {\n        response = await studentAPI.getStudentsByClass(classId);\n      } else if (user && user.role === 'ROLE_HEADTEACHER' && user.classId) {\n        // 班主任只查看自己班级的学生\n        response = await studentAPI.getStudentsByClass(user.classId);\n      } else {\n        // 管理员可以查看所有学生\n        response = await studentAPI.getAllStudents();\n      }\n      \n      if (response.data) {\n        setStudents(response.data.content || response.data);\n      }\n    } catch (error) {\n      console.error('获取学生列表失败:', error);\n    }\n  };\n  \n  // 获取学生成绩趋势\n  const fetchStudentScoreTrend = async () => {\n    if (selectedStudents.length === 0) {\n      showSnackbar('请至少选择一名学生', 'warning');\n      return;\n    }\n    \n    setLoading(true);\n    try {\n      // 存储所有请求的Promise\n      const requests = selectedStudents.map(student => \n        scoreStatisticsAPI.getStudentScoreTrend(\n          student.id,\n          selectedSubject ? Number(selectedSubject) : undefined,\n          selectedExam && selectedExam !== '' ? [Number(selectedExam)] : undefined\n        )\n      );\n      \n      // 并行请求所有学生数据\n      const responses = await Promise.all(requests);\n      \n      // 提取数据\n      const trendData = responses.map(response => response.data).filter(Boolean);\n      setStudentsTrendData(trendData);\n    } catch (error) {\n      console.error('获取学生成绩趋势失败:', error);\n      showSnackbar('获取学生成绩趋势失败', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // 获取班级成绩对比\n  const fetchClassScoreComparison = async () => {\n    if (!selectedExam) {\n      showSnackbar('请先选择考试', 'warning');\n      return;\n    }\n    \n    let classId: number | undefined;\n    // 如果是班主任，只能查看自己班级\n    if (user && user.role === 'ROLE_HEADTEACHER' && user.classId) {\n      classId = user.classId;\n    } else {\n      // 查找选中考试的班级ID\n      const selectedExamObj = exams.find(e => e.id === Number(selectedExam));\n      if (selectedExamObj && selectedExamObj.classId) {\n        classId = selectedExamObj.classId;\n      }\n    }\n    \n    if (!classId) {\n      showSnackbar('无法确定班级信息', 'warning');\n      return;\n    }\n    \n    setLoading(true);\n    try {\n      const response = await scoreStatisticsAPI.getClassScoreComparison(\n        classId,\n        Number(selectedExam),\n        selectedSubject ? Number(selectedSubject) : undefined\n      );\n      \n      if (response.data) {\n        // 使用深拷贝来避免引用问题\n        let rawData = JSON.parse(JSON.stringify(response.data));\n        \n        // 强制初始化一个新的分数段数据对象\n        const newScoreRanges: {[key: string]: {label: string; count: number; percentage: number;}[]} = {};\n        \n        try {\n          // 处理各科目分数段\n          if (rawData.subjectStats) {\n            Object.keys(rawData.subjectStats).forEach(subjectId => {\n              // 确保科目ID是字符串\n              const subjectIdStr = String(subjectId);\n              \n              if (rawData.scoreRanges && rawData.scoreRanges[subjectIdStr]) {\n                newScoreRanges[subjectIdStr] = Array.isArray(rawData.scoreRanges[subjectIdStr]) \n                  ? [...rawData.scoreRanges[subjectIdStr]] \n                  : [];\n              } else {\n                newScoreRanges[subjectIdStr] = [];\n              }\n            });\n          }\n        } catch (e) {\n          console.error('分数段数据处理错误:', e);\n        }\n        \n        // 更新分数段数据状态\n        setScoreRangeData(newScoreRanges);\n        \n        // 设置班级对比数据\n        if (!rawData.scoreRanges) {\n          rawData.scoreRanges = {};\n        }\n        setClassComparisonData(rawData);\n        \n        // 设置默认的分数段分布科目为第一个科目（如果有科目的话）\n        if (rawData.subjectStats && Object.keys(rawData.subjectStats).length > 0) {\n          setScoreDistributionSubject(Object.keys(rawData.subjectStats)[0]);\n        }\n      }\n    } catch (error) {\n      console.error('获取班级成绩对比失败:', error);\n      showSnackbar('获取班级成绩对比失败', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // 处理考试选择变化\n  const handleExamChange = (event: SelectChangeEvent<typeof selectedExam>) => {\n    const examId = event.target.value;\n    setSelectedExam(examId);\n    setSelectedSubject('');\n    \n    if (examId && examId !== '') {\n      fetchSubjects(Number(examId));\n      \n      // 查找选中考试的班级ID，获取该班级的学生\n      const selectedExamObj = exams.find(e => e.id === Number(examId));\n      if (selectedExamObj && selectedExamObj.classId) {\n        fetchStudents(selectedExamObj.classId);\n      }\n    } else {\n      setSubjects([]);\n      // 根据用户角色获取学生列表\n      if (user && user.role === 'ROLE_HEADTEACHER' && user.classId) {\n        fetchStudents(user.classId);\n      } else {\n        fetchStudents();\n      }\n    }\n  };\n  \n  // 处理科目选择变化\n  const handleSubjectChange = (event: SelectChangeEvent<typeof selectedSubject>) => {\n    setSelectedSubject(event.target.value);\n  };\n  \n  // 处理分数段分布科目选择变化\n  const handleScoreDistributionSubjectChange = (event: SelectChangeEvent<string>) => {\n    const newSubjectId = event.target.value;\n    \n    // 强制更新状态以确保UI刷新\n    setScoreDistributionSubject('');\n    \n    // 使用setTimeout确保状态更新并触发重新渲染\n    setTimeout(() => {\n      setScoreDistributionSubject(newSubjectId);\n    }, 0);\n  };\n  \n  // 处理学生选择变化 - 修改为多选\n  const handleStudentsChange = (event: React.SyntheticEvent, value: Student[]) => {\n    // 限制最多选择两个学生\n    if (value.length > 2) {\n      showSnackbar('最多只能选择两名学生进行对比', 'warning');\n      return;\n    }\n    setSelectedStudents(value);\n  };\n  \n  // 处理Tab切换\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n    \n    // 清空之前的数据\n    if (newValue === 0) {\n      setStudentsTrendData([]);\n    } else if (newValue === 1) {\n      setClassComparisonData(null);\n    }\n  };\n  \n  // 处理查询按钮点击\n  const handleQuery = () => {\n    if (tabValue === 0) {\n      fetchStudentScoreTrend();\n    } else if (tabValue === 1) {\n      fetchClassScoreComparison();\n    }\n  };\n  \n  // 显示提示信息\n  const showSnackbar = (message: string, severity: 'success' | 'info' | 'warning' | 'error' = 'info') => {\n    setSnackbar({\n      open: true,\n      message,\n      severity\n    });\n  };\n  \n  // 关闭提示信息\n  const handleCloseSnackbar = () => {\n    setSnackbar(prev => ({\n      ...prev,\n      open: false\n    }));\n  };\n  \n  // 根据用户角色设置默认值和获取数据\n  useEffect(() => {\n    // 根据用户角色获取学生列表\n    if (user && user.role === 'ROLE_HEADTEACHER' && user.classId) {\n      fetchStudents(user.classId);\n    } else {\n      fetchStudents();\n    }\n  }, [user]);\n  \n  // 初始化\n  useEffect(() => {\n    fetchExams();\n  }, []);\n  \n  // 渲染学生成绩趋势图\n  const renderStudentTrendCharts = () => {\n    if (!studentsTrendData.length) return null;\n    \n    return (\n      <Box>\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n          {studentsTrendData.map((studentData, index) => {\n            const data: { [key: string]: any[] } = {};\n            const subjectNames: { [key: string]: string } = {};\n            \n            if (selectedSubject && selectedSubject !== '') {\n              // 显示指定科目的成绩趋势\n              const subjectId = selectedSubject.toString();\n              if (studentData.trends[subjectId]) {\n                data[subjectId] = studentData.trends[subjectId];\n                \n                // 查找科目名称\n                const subject = studentData.subjects.find(s => s.id.toString() === subjectId);\n                if (subject) {\n                  subjectNames[subjectId] = subject.name;\n                } else {\n                  subjectNames[subjectId] = `科目${subjectId}`;\n                }\n              }\n            } else {\n              // 显示所有科目的成绩趋势，但不包括总分\n              studentData.subjects.forEach(subject => {\n                const subjectId = subject.id.toString();\n                if (studentData.trends[subjectId]) {\n                  data[subjectId] = studentData.trends[subjectId];\n                  subjectNames[subjectId] = subject.name;\n                }\n              });\n            }\n            \n            return (\n              <Box \n                key={index}\n                sx={{ width: '100%' }}\n              >\n                <Paper sx={{ p: 2, mb: 2 }}>\n                  <Typography variant=\"h6\" gutterBottom>\n                    {studentData.student.name} ({studentData.student.studentNumber}) \n                    {studentData.student.className && (\n                      <Chip label={studentData.student.className} size=\"small\" color=\"primary\" sx={{ ml: 1 }} />\n                    )}\n                  </Typography>\n                  <StudentScoreTrendChart\n                    data={data}\n                    subjectNames={subjectNames}\n                    loading={loading}\n                    height={350}\n                    title={`${studentData.student.name} - 成绩趋势`}\n                  />\n                </Paper>\n              </Box>\n            );\n          })}\n        </Box>\n        \n        {/* 成绩列表 */}\n        <Paper sx={{ p: 2, mt: 2 }}>\n          <Typography variant=\"h6\" gutterBottom>成绩列表</Typography>\n          \n          <TableContainer>\n            <Table size=\"small\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>考试</TableCell>\n                  <TableCell>科目</TableCell>\n                  {studentsTrendData.map((data, index) => (\n                    <TableCell key={index}>\n                      {data.student.name} ({data.student.studentNumber})\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {getScoreTableRows().map((row, rowIndex) => (\n                  <TableRow key={rowIndex} hover>\n                    <TableCell>{row.examName}</TableCell>\n                    <TableCell>{row.subjectName}</TableCell>\n                    {row.scores.map((score, scoreIndex) => (\n                      <TableCell key={scoreIndex}>\n                        {score.score !== undefined ? (\n                          <Box>\n                            <Typography variant=\"body2\" fontWeight=\"bold\">{score.score}</Typography>\n                            {score.rank && score.totalStudents && (\n                              <Typography variant=\"caption\" color=\"textSecondary\">\n                                排名: {score.rank}/{score.totalStudents}\n                              </Typography>\n                            )}\n                          </Box>\n                        ) : (\n                          '-'\n                        )}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n      </Box>\n    );\n  };\n  \n  // 获取成绩表格行数据\n  const getScoreTableRows = () => {\n    if (!studentsTrendData.length) return [];\n    \n    const allExams = new Set<string>();\n    const allSubjects = new Set<string>();\n    const examSubjectMap: Record<string, Record<string, any[]>> = {};\n    \n    // 收集所有考试和科目，并按考试和科目分组存储成绩\n    studentsTrendData.forEach((studentData, studentIndex) => {      \n      // 处理各科目，不包括总分\n      Object.keys(studentData.trends).forEach(subjectId => {\n        if (subjectId === 'total') return; // 跳过总分\n        \n        const subject = studentData.subjects.find(s => s.id.toString() === subjectId);\n        const subjectName = subject ? subject.name : `科目${subjectId}`;\n        \n        studentData.trends[subjectId].forEach(point => {\n          const examKey = `${point.examId}-${point.examName}`;\n          const subjectKey = `${subjectId}-${subjectName}`;\n          \n          allExams.add(examKey);\n          allSubjects.add(subjectKey);\n          \n          if (!examSubjectMap[examKey]) {\n            examSubjectMap[examKey] = {};\n          }\n          \n          if (!examSubjectMap[examKey][subjectKey]) {\n            // 初始化数组，使用空对象数组而不是填充相同的对象引用\n            examSubjectMap[examKey][subjectKey] = Array(studentsTrendData.length).fill(null).map(() => ({}));\n          }\n          \n          examSubjectMap[examKey][subjectKey][studentIndex] = {\n            score: point.score,\n            fullScore: point.fullScore,\n            rank: point.rank,\n            totalStudents: point.totalStudents\n          };\n        });\n      });\n    });\n    \n    // 转换为表格行数据\n    const rows: Array<{\n      examName: string;\n      subjectName: string;\n      scores: Array<{\n        score?: number;\n        fullScore?: number;\n        rank?: number;\n        totalStudents?: number;\n      }>;\n    }> = [];\n    \n    // 按考试和科目排序\n    const sortedExams = Array.from(allExams).sort();\n    const sortedSubjects = Array.from(allSubjects).sort();\n    \n    sortedExams.forEach(examKey => {\n      const [, examName] = examKey.split('-');\n      \n      sortedSubjects.forEach(subjectKey => {\n        // 跳过总分\n        if (subjectKey === 'total') return;\n        \n        let [, subjectName] = subjectKey.split('-');\n        \n        if (examSubjectMap[examKey] && examSubjectMap[examKey][subjectKey]) {\n          rows.push({\n            examName,\n            subjectName,\n            scores: examSubjectMap[examKey][subjectKey]\n          });\n        }\n      });\n    });\n    \n    return rows;\n  };\n  \n  // 修改：渲染班级成绩对比图方法中传递给图表组件的参数\n  const renderClassComparisonChart = () => {\n    if (!classComparisonData) return null;\n    \n    const data: { [key: string]: any } = {};\n    \n    if (selectedSubject && selectedSubject !== '') {\n      // 显示指定科目的成绩对比\n      const subjectId = selectedSubject.toString();\n      const subjectStat = classComparisonData.subjectStats[subjectId];\n      if (subjectStat) {\n        data[subjectId] = subjectStat;\n      }\n    } else {\n      // 显示所有科目的成绩对比\n      Object.keys(classComparisonData.subjectStats).forEach(subjectId => {\n        data[subjectId] = classComparisonData.subjectStats[subjectId];\n      });\n    }\n    \n    return (\n      <>\n        <ClassScoreComparisonChart\n          data={data}\n          totalStats={classComparisonData.totalStats}\n          loading={loading}\n          height={500}\n          title={`${classComparisonData.className} - ${classComparisonData.exam.name} - 成绩对比`}\n          showType={'score'} // 修改：默认只显示分数\n          scoreType={'total'} // 修改：固定使用总分\n        />\n        \n        {/* 班级成绩列表 */}\n        <Paper sx={{ p: 2, mt: 3 }}>\n          <Typography variant=\"h6\" gutterBottom>班级成绩详情</Typography>\n          \n          <TableContainer>\n            <Table size=\"small\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>科目</TableCell>\n                  <TableCell align=\"center\">平均分</TableCell>\n                  <TableCell align=\"center\">最高分</TableCell>\n                  <TableCell align=\"center\">最低分</TableCell>\n                  <TableCell align=\"center\">及格率</TableCell>\n                  <TableCell align=\"center\">优秀率</TableCell>\n                  <TableCell align=\"center\">满分</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {Object.keys(classComparisonData.subjectStats).map((subjectId) => {\n                  const stats = classComparisonData.subjectStats[subjectId];\n                  return (\n                    <TableRow key={subjectId} hover>\n                      <TableCell>{stats.subjectName}</TableCell>\n                      <TableCell align=\"center\">{stats.avgScore.toFixed(2)}</TableCell>\n                      <TableCell align=\"center\">{stats.maxScore}</TableCell>\n                      <TableCell align=\"center\">{stats.minScore}</TableCell>\n                      <TableCell align=\"center\">{(stats.passRate * 100).toFixed(2)}%</TableCell>\n                      <TableCell align=\"center\">{(stats.excellentRate * 100).toFixed(2)}%</TableCell>\n                      <TableCell align=\"center\">{stats.fullScore}</TableCell>\n                    </TableRow>\n                  );\n                })}\n                {/* 总分行 */}\n                <TableRow sx={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}>\n                  <TableCell sx={{ fontWeight: 'bold' }}>总分</TableCell>\n                  <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>{classComparisonData.totalStats.avgScore.toFixed(2)}</TableCell>\n                  <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>{classComparisonData.totalStats.maxScore}</TableCell>\n                  <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>{classComparisonData.totalStats.minScore}</TableCell>\n                  <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>{(classComparisonData.totalStats.passRate * 100).toFixed(2)}%</TableCell>\n                  <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>{(classComparisonData.totalStats.excellentRate * 100).toFixed(2)}%</TableCell>\n                  <TableCell align=\"center\">-</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n        \n        {/* 成绩分布情况 */}\n        <Paper sx={{ p: 2, mt: 3 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h6\">\n              单科分数段分布\n            </Typography>\n            <FormControl size=\"small\" sx={{ width: 200 }}>\n              <InputLabel id=\"score-distribution-subject-label\">选择科目</InputLabel>\n              <Select\n                labelId=\"score-distribution-subject-label\"\n                id=\"score-distribution-subject\"\n                value={scoreDistributionSubject}\n                label=\"选择科目\"\n                onChange={handleScoreDistributionSubjectChange}\n              >\n                {Object.keys(classComparisonData.subjectStats).map((subjectId) => (\n                  <MenuItem key={subjectId} value={subjectId}>\n                    {classComparisonData.subjectStats[subjectId].subjectName}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Box>\n          \n          {/* 当前选择的科目信息 */}\n          <Box sx={{ mb: 2, p: 1, bgcolor: 'primary.light', color: 'white', borderRadius: 1 }}>\n            <Typography variant=\"body2\">\n              当前选择: {classComparisonData.subjectStats[scoreDistributionSubject]?.subjectName || scoreDistributionSubject}\n              {scoreRangeData[scoreDistributionSubject] && ` (共${scoreRangeData[scoreDistributionSubject].length}个分数段)`}\n            </Typography>\n          </Box>\n          \n          {scoreRangeData && scoreDistributionSubject && \n           scoreRangeData[scoreDistributionSubject] && \n           Array.isArray(scoreRangeData[scoreDistributionSubject]) && \n           scoreRangeData[scoreDistributionSubject].length > 0 ? (\n            <TableContainer>\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell width=\"40%\">分数段</TableCell>\n                    <TableCell align=\"center\" width=\"30%\">人数</TableCell>\n                    <TableCell align=\"center\" width=\"30%\">占比</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {scoreRangeData[scoreDistributionSubject].map((range, index) => (\n                    <TableRow key={`range-${scoreDistributionSubject}-${index}`} hover>\n                      <TableCell>{range.label || '未命名'}</TableCell>\n                      <TableCell align=\"center\">{range.count || 0}</TableCell>\n                      <TableCell align=\"center\">{((range.percentage || 0) * 100).toFixed(2)}%</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          ) : (\n            <Box sx={{ py: 3, textAlign: 'center' }}>\n              <Typography variant=\"body1\" color=\"textSecondary\">\n                暂无分数段分布数据\n              </Typography>\n            </Box>\n          )}\n        </Paper>\n      </>\n    );\n  };\n  \n  return (\n    <Box>\n      <Typography variant=\"h5\" component=\"h1\" sx={{ mb: 3 }}>\n        成绩统计\n      </Typography>\n      \n      {/* 选项卡 */}\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"统计分析选项卡\">\n          <Tab label=\"学生个人成绩趋势\" {...a11yProps(0)} />\n          <Tab label=\"班级考试成绩对比\" {...a11yProps(1)} />\n        </Tabs>\n      </Box>\n      \n      {/* 学生个人成绩趋势 */}\n      <TabPanel value={tabValue} index={0}>\n        {/* 学生成绩趋势筛选条件 */}\n        <Card sx={{ mb: 3 }}>\n          <CardContent>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>\n              <Box sx={{ flexBasis: { xs: '100%', sm: '23%' } }}>\n                <FormControl fullWidth size=\"small\">\n                  <InputLabel id=\"exam-select-label\">选择考试</InputLabel>\n                  <Select\n                    labelId=\"exam-select-label\"\n                    id=\"exam-select\"\n                    value={selectedExam}\n                    label=\"选择考试\"\n                    onChange={handleExamChange}\n                  >\n                    <MenuItem value=\"\"><em>所有考试</em></MenuItem>\n                    {exams.map((exam) => (\n                      <MenuItem key={exam.id} value={exam.id}>\n                        {exam.name} {exam.className ? `(${exam.className})` : ''}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Box>\n              \n              <Box sx={{ flexBasis: { xs: '100%', sm: '23%' } }}>\n                <FormControl fullWidth size=\"small\" disabled={!selectedExam || subjects.length === 0}>\n                  <InputLabel id=\"subject-select-label\">选择科目</InputLabel>\n                  <Select\n                    labelId=\"subject-select-label\"\n                    id=\"subject-select\"\n                    value={selectedSubject}\n                    label=\"选择科目\"\n                    onChange={handleSubjectChange}\n                  >\n                    <MenuItem value=\"\"><em>所有科目</em></MenuItem>\n                    {subjects.map((subject) => (\n                      <MenuItem key={subject.id} value={subject.id}>\n                        {subject.name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Box>\n              \n              <Box sx={{ flexBasis: { xs: '100%', sm: '23%' } }}>\n                <Autocomplete\n                  multiple\n                  id=\"students-select\"\n                  options={students}\n                  getOptionLabel={(option) => `${option.name} (${option.studentNumber})`}\n                  value={selectedStudents}\n                  onChange={handleStudentsChange}\n                  renderInput={(params) => (\n                    <TextField {...params} label=\"选择学生(最多2名)\" size=\"small\" />\n                  )}\n                  renderOption={(props, option) => (\n                    <li {...props}>\n                      {option.name} ({option.studentNumber})\n                      {option.className && <Chip \n                        label={option.className} \n                        size=\"small\" \n                        sx={{ ml: 1 }} \n                      />}\n                    </li>\n                  )}\n                  renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                      <Chip\n                        {...getTagProps({ index })}\n                        key={index}\n                        label={`${option.name} (${option.studentNumber})`}\n                        size=\"small\"\n                      />\n                    ))\n                  }\n                />\n              </Box>\n              \n              <Box sx={{ flexBasis: { xs: '100%', sm: '23%' } }}>\n                <Button \n                  variant=\"contained\" \n                  color=\"primary\" \n                  fullWidth\n                  disabled={loading}\n                  onClick={handleQuery}\n                >\n                  {loading ? <CircularProgress size={24} /> : '查询'}\n                </Button>\n              </Box>\n            </Box>\n          </CardContent>\n        </Card>\n\n        <Paper sx={{ p: 3 }}>\n          {studentsTrendData.length > 0 ? (\n            <>\n              <Stack direction=\"row\" spacing={2} alignItems=\"center\" sx={{ mb: 3 }}>\n                <Typography variant=\"h6\">\n                  学生成绩趋势对比\n                </Typography>\n                <Chip \n                  label={`已选择 ${studentsTrendData.length} 名学生`} \n                  color=\"primary\" \n                />\n              </Stack>\n              {renderStudentTrendCharts()}\n            </>\n          ) : (\n            <Box sx={{ textAlign: 'center', py: 10 }}>\n              <Typography variant=\"body1\" color=\"textSecondary\">\n                请选择学生并点击查询按钮查看成绩趋势\n              </Typography>\n            </Box>\n          )}\n        </Paper>\n      </TabPanel>\n      \n      {/* 班级考试成绩对比 */}\n      <TabPanel value={tabValue} index={1}>\n        {/* 班级成绩对比筛选条件 */}\n        <Card sx={{ mb: 3 }}>\n          <CardContent>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>\n              <Box sx={{ flexBasis: { xs: '100%', sm: '45%' } }}>\n                <FormControl fullWidth size=\"small\">\n                  <InputLabel id=\"exam-select-label\">选择考试</InputLabel>\n                  <Select\n                    labelId=\"exam-select-label\"\n                    id=\"exam-select\"\n                    value={selectedExam}\n                    label=\"选择考试\"\n                    onChange={handleExamChange}\n                  >\n                    <MenuItem value=\"\"><em>所有考试</em></MenuItem>\n                    {exams.map((exam) => (\n                      <MenuItem key={exam.id} value={exam.id}>\n                        {exam.name} {exam.className ? `(${exam.className})` : ''}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Box>\n              \n              <Box sx={{ flexBasis: { xs: '100%', sm: '45%' } }}>\n                <FormControl fullWidth size=\"small\" disabled={!selectedExam || subjects.length === 0}>\n                  <InputLabel id=\"subject-select-label\">选择科目</InputLabel>\n                  <Select\n                    labelId=\"subject-select-label\"\n                    id=\"subject-select\"\n                    value={selectedSubject}\n                    label=\"选择科目\"\n                    onChange={handleSubjectChange}\n                  >\n                    <MenuItem value=\"\"><em>所有科目</em></MenuItem>\n                    {subjects.map((subject) => (\n                      <MenuItem key={subject.id} value={subject.id}>\n                        {subject.name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Box>\n              \n              <Box sx={{ flexBasis: { xs: '100%', sm: '100%' }, display: 'flex', justifyContent: 'flex-end' }}>\n                <Button \n                  variant=\"contained\" \n                  color=\"primary\"\n                  disabled={loading}\n                  onClick={handleQuery}\n                  sx={{ minWidth: '120px' }}\n                >\n                  {loading ? <CircularProgress size={24} /> : '查询'}\n                </Button>\n              </Box>\n            </Box>\n          </CardContent>\n        </Card>\n\n        <Paper sx={{ p: 3 }}>\n          {classComparisonData ? (\n            <>\n              <Stack direction=\"row\" spacing={2} alignItems=\"center\" sx={{ mb: 3 }}>\n                <Typography variant=\"h6\">\n                  {classComparisonData.className} - {classComparisonData.exam.name} 成绩对比\n                </Typography>\n              </Stack>\n              {renderClassComparisonChart()}\n            </>\n          ) : (\n            <Box sx={{ textAlign: 'center', py: 10 }}>\n              <Typography variant=\"body1\" color=\"textSecondary\">\n                请选择考试并点击查询按钮查看班级成绩对比\n              </Typography>\n            </Box>\n          )}\n        </Paper>\n      </TabPanel>\n      \n      {/* 提示信息 */}\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={3000}\n        onClose={handleCloseSnackbar}\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      >\n        <Alert \n          onClose={handleCloseSnackbar} \n          severity={snackbar.severity}\n          variant=\"filled\"\n          sx={{ width: '100%' }}\n        >\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nexport default ScoreStatistics; ","import axios from 'axios';\r\nimport { Exam } from '../types/score';\r\nimport axiosInstance from './axios';\r\n\r\n// 创建一个专用于直接请求后端的axios实例\r\nconst directAxios = axios.create({\r\n  baseURL: 'http://124.70.74.246:8081',\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器 - 添加认证令牌\r\ndirectAxios.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\ninterface ExamSubjectDTO {\r\n  subject: {\r\n    id: number;\r\n  };\r\n  subjectName: string;\r\n  fullScore: number;\r\n}\r\n\r\ninterface ExamForm {\r\n  id?: number | null;\r\n  examName: string;\r\n  examDate: string;\r\n  description?: string;\r\n  classInfo?: {\r\n    id: number;\r\n  } | null;\r\n  examSubjects: ExamSubjectDTO[];\r\n}\r\n\r\n// 获取所有考试\r\nexport const getAllExams = async () => {\r\n  console.log('获取所有考试，直接请求后端');\r\n  return directAxios.get<Exam[]>('/api/exams');\r\n};\r\n\r\n// 根据ID获取考试详情\r\nexport const getExamById = async (examId: number) => {\r\n  return directAxios.get<Exam>(`/api/exams/${examId}`);\r\n};\r\n\r\n// 根据班级获取考试\r\nexport const getExamsByClass = (classId: string) => {\r\n  return directAxios.get(`/api/exams/class/${classId}`);\r\n};\r\n\r\n// 根据状态获取考试\r\nexport const getExamsByStatus = (status: string) => {\r\n  return directAxios.get(`/api/exams/status/${status}`);\r\n};\r\n\r\n// 创建新考试\r\nexport const createExam = async (examData: Partial<Exam>) => {\r\n  return directAxios.post('/api/exams', examData);\r\n};\r\n\r\n// 更新考试信息\r\nexport const updateExam = async (examId: number, examData: Partial<Exam>) => {\r\n  return directAxios.put(`/api/exams/${examId}`, examData);\r\n};\r\n\r\n// 删除考试\r\nexport const deleteExam = async (examId: number) => {\r\n  return directAxios.delete(`/api/exams/${examId}`);\r\n};\r\n\r\n// 更新考试状态\r\nexport const updateExamStatus = async (examId: number, status: Exam['status']) => {\r\n  return directAxios.patch(`/api/exams/${examId}/status`, { status });\r\n}; "],"names":["directAxios","axios","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","concat","error","Promise","reject","getAllStudents","async","get","getAllStudentsPaged","page","arguments","length","undefined","size","console","log","getStudentsByClass","classId","getStudentsByClassPaged","searchStudentsPaged","name","createStudent","post","student","updateStudent","id","put","deleteStudent","delete","batchImportStudents","formData","echarts","TitleComponent","TooltipComponent","GridComponent","LineChart","CanvasRenderer","UniversalTransition","LegendComponent","ToolboxComponent","DataZoomComponent","_ref","data","subjectNames","loading","height","title","chartRef","useRef","chartInstance","useEffect","Object","keys","current","series","xAxisData","subjectIds","examDataMap","Map","forEach","subjectId","point","has","examId","set","examName","date","examDate","index","sortedExams","Array","from","entries","sort","a","b","dateA","Date","getTime","dateB","exam","push","subjectData","examScoreMap","value","score","fullScore","rank","totalStudents","seriesData","map","pointData","subjectName","type","smooth","symbol","symbolSize","lineStyle","width","itemStyle","borderWidth","label","show","position","formatter","params","fontSize","color","connectNulls","emphasis","shadowBlur","shadowColor","fontWeight","option","text","left","tooltip","trigger","dataIndex","tooltipText","param","percentage","toFixed","seriesName","legend","orient","bottom","toolbox","feature","saveAsImage","grid","right","top","containLabel","dataZoom","start","end","xAxis","boundaryGap","axisLabel","rotate","interval","yAxis","nameLocation","nameGap","min","max","Math","ceil","setOption","handleResize","_chartInstance$curren","resize","window","addEventListener","removeEventListener","_jsxs","Box","sx","children","_jsx","display","alignItems","justifyContent","backgroundColor","zIndex","CircularProgress","Paper","Typography","variant","ref","BarChart","totalStats","showType","scoreType","avgScores","avgScore","maxScores","maxScore","minScores","minScore","passRates","passRate","excellentRates","excellentRate","scoreOption","axisPointer","rateOption","gridIndex","xAxisIndex","yAxisIndex","TabPanel","props","other","_objectWithoutProperties","_excluded","_objectSpread","role","hidden","style","marginTop","p","a11yProps","ScoreStatistics","user","useAuth","exams","setExams","useState","selectedExam","setSelectedExam","selectedSubject","setSelectedSubject","subjects","setSubjects","students","setStudents","selectedStudents","setSelectedStudents","setLoading","tabValue","setTabValue","studentsTrendData","setStudentsTrendData","classComparisonData","setClassComparisonData","scoreDistributionSubject","setScoreDistributionSubject","scoreRangeData","setScoreRangeData","snackbar","setSnackbar","open","message","severity","fetchStudents","response","studentAPI","content","fetchStudentScoreTrend","requests","studentId","examIds","join","scoreStatisticsAPI","Number","trendData","all","filter","Boolean","showSnackbar","fetchClassScoreComparison","selectedExamObj","find","e","rawData","JSON","parse","stringify","newScoreRanges","subjectStats","subjectIdStr","String","scoreRanges","isArray","handleExamChange","event","target","examAPI","examSubjects","subjectsData","es","subject","fetchSubjects","handleSubjectChange","handleScoreDistributionSubjectChange","newSubjectId","setTimeout","handleQuery","handleCloseSnackbar","prev","mappedExams","_exam$classInfo","_exam$classInfo2","className","classInfo","fetchExams","getScoreTableRows","allExams","Set","allSubjects","examSubjectMap","studentData","studentIndex","trends","s","toString","examKey","subjectKey","add","fill","rows","sortedSubjects","split","scores","component","mb","borderBottom","borderColor","Tabs","onChange","handleTabChange","newValue","Tab","Card","CardContent","flexWrap","gap","flexBasis","xs","sm","FormControl","fullWidth","InputLabel","Select","labelId","MenuItem","disabled","Autocomplete","multiple","options","getOptionLabel","studentNumber","handleStudentsChange","renderInput","TextField","renderOption","Chip","ml","renderTags","getTagProps","_createElement","key","Button","onClick","_Fragment","Stack","direction","spacing","flexDirection","gutterBottom","StudentScoreTrendChart","mt","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","row","rowIndex","hover","scoreIndex","textAlign","py","minWidth","renderClassComparisonChart","_classComparisonData$","subjectStat","ClassScoreComparisonChart","align","stats","bgcolor","borderRadius","range","count","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","getAllExams","getExamById","getExamsByClass","getExamsByStatus","status","createExam","examData","updateExam","deleteExam","updateExamStatus","patch"],"sourceRoot":""}