{"version":3,"file":"static/js/695.eb7309fd.chunk.js","mappings":"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","sources":["api/leaveStatisticsAPI.ts","views/LeaveStatistics.tsx","api/class.ts","utils/dateUtils.ts"],"sourcesContent":["import axiosInstance from './axios';\r\nimport axios from 'axios';\r\n\r\n// 创建一个专用于直接请求后端的axios实例\r\nconst directAxios = axios.create({\r\n  baseURL: 'http://124.70.74.246:8081',\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器 - 添加认证令牌\r\ndirectAxios.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst API_URL = `/api/statistics/leaves`;\r\n\r\n// 获取请假统计概览数据\r\nexport const getLeaveStatistics = async (params: {\r\n  classId?: string | null;\r\n  leaveType?: string | null;\r\n  period?: string;\r\n  startDate?: string;\r\n  endDate?: string;\r\n}) => {\r\n  const { classId, leaveType, period, startDate, endDate } = params;\r\n  \r\n  let url = `${API_URL}?period=${period || 'MONTH'}`;\r\n  \r\n  if (classId) {\r\n    url += `&classId=${classId}`;\r\n  }\r\n  \r\n  if (leaveType) {\r\n    url += `&leaveType=${leaveType}`;\r\n  }\r\n  \r\n  if (startDate && endDate) {\r\n    url += `&startDate=${startDate}&endDate=${endDate}`;\r\n  }\r\n  \r\n  return directAxios.get(url);\r\n};\r\n\r\n// 获取班级请假统计数据\r\nexport const getClassLeaveStatistics = async (params: {\r\n  classId?: string | null;\r\n  leaveType?: string | null;\r\n  period?: string;\r\n  startDate?: string;\r\n  endDate?: string;\r\n}) => {\r\n  const { classId, leaveType, period, startDate, endDate } = params;\r\n  \r\n  let url = `${API_URL}/classes?period=${period || 'MONTH'}`;\r\n  \r\n  if (classId) {\r\n    url += `&classId=${classId}`;\r\n  }\r\n  \r\n  if (leaveType) {\r\n    url += `&leaveType=${leaveType}`;\r\n  }\r\n  \r\n  if (startDate && endDate) {\r\n    url += `&startDate=${startDate}&endDate=${endDate}`;\r\n  }\r\n  \r\n  return directAxios.get(url);\r\n};\r\n\r\n// 获取学生请假排名数据\r\nexport const getStudentLeaveRanking = async (params: {\r\n  classId?: string | null;\r\n  leaveType?: string | null;\r\n  period?: string;\r\n  startDate?: string;\r\n  endDate?: string;\r\n  page?: number;\r\n  size?: number;\r\n}) => {\r\n  const { classId, leaveType, period, startDate, endDate, page = 0, size = 10 } = params;\r\n  \r\n  let url = `${API_URL}/students/ranking?period=${period || 'MONTH'}&page=${page}&size=${size}`;\r\n  \r\n  if (classId) {\r\n    url += `&classId=${classId}`;\r\n  }\r\n  \r\n  if (leaveType) {\r\n    url += `&leaveType=${leaveType}`;\r\n  }\r\n  \r\n  if (startDate && endDate) {\r\n    url += `&startDate=${startDate}&endDate=${endDate}`;\r\n  }\r\n  \r\n  return directAxios.get(url);\r\n};\r\n\r\n// 获取请假趋势数据\r\nexport const getLeaveTrendData = async (params: {\r\n  classId?: string | null;\r\n  leaveType?: string | null;\r\n  period?: string;\r\n  startDate?: string;\r\n  endDate?: string;\r\n}) => {\r\n  const { classId, leaveType, period, startDate, endDate } = params;\r\n  \r\n  let url = `${API_URL}/trend?period=${period || 'MONTH'}`;\r\n  \r\n  if (classId) {\r\n    url += `&classId=${classId}`;\r\n  }\r\n  \r\n  if (leaveType) {\r\n    url += `&leaveType=${leaveType}`;\r\n  }\r\n  \r\n  if (startDate && endDate) {\r\n    url += `&startDate=${startDate}&endDate=${endDate}`;\r\n  }\r\n  \r\n  return directAxios.get(url);\r\n};\r\n\r\n// 导出请假统计数据\r\nexport const exportLeaveStatistics = async (params: {\r\n  classId?: string | null;\r\n  leaveType?: string | null;\r\n  period?: string;\r\n  startDate?: string;\r\n  endDate?: string;\r\n}) => {\r\n  const { classId, leaveType, period, startDate, endDate } = params;\r\n  \r\n  let url = `${API_URL}/export?period=${period || 'MONTH'}`;\r\n  \r\n  if (classId) {\r\n    url += `&classId=${classId}`;\r\n  }\r\n  \r\n  if (leaveType) {\r\n    url += `&leaveType=${leaveType}`;\r\n  }\r\n  \r\n  if (startDate && endDate) {\r\n    url += `&startDate=${startDate}&endDate=${endDate}`;\r\n  }\r\n  \r\n  return directAxios.get(url, { responseType: 'blob' });\r\n};\r\n\r\n// 获取学生请假记录\r\nexport const getStudentLeaves = async (\r\n  studentId: string,\r\n  page: number = 0,\r\n  size: number = 10\r\n) => {\r\n  const url = `/api/leaves/student/${studentId}?page=${page}&size=${size}`;\r\n  return directAxios.get(url);\r\n}; ","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Row,\n  Table,\n  Space,\n  Select,\n  DatePicker,\n  Spin,\n  Modal,\n  Tabs,\n  Descriptions,\n  Pagination,\n  message,\n  Tag\n} from 'antd';\nimport { SearchOutlined, ReloadOutlined, DownloadOutlined } from '@ant-design/icons';\nimport * as echarts from 'echarts';\nimport type { EChartsType } from 'echarts';\nimport dayjs from 'dayjs';\nimport { zhCN } from 'date-fns/locale';\n// 导入API服务\nimport * as leaveStatisticsAPI from '../api/leaveStatisticsAPI';\nimport * as classAPI from '../api/class';\nimport { formatDate, getCurrentMonthRange, getCurrentWeekRange } from '../utils/dateUtils';\nimport './LeaveStatistics.css'; // 导入样式文件\n\nconst { RangePicker } = DatePicker;\nconst { TabPane } = Tabs;\n\n// 假设有对应的服务和工具函数，后续需要创建或引入\n// import LeaveService from '@/api/leaveService'; // 接口服务\n// import { classAPI } from '@/services/api.service'; // 接口服务\n// import { formatDate, getCurrentMonthRange, getCurrentWeekRange } from '@/utils/dateUtil'; // 日期工具\n\n// 使用真实API服务替代模拟API\n\n\nconst LeaveStatistics = () => {\n  const [loading, setLoading] = useState(false);\n  const typeChartRef = useRef<HTMLDivElement>(null);\n  const trendChartRef = useRef<HTMLDivElement>(null);\n  const typeChartInstance = useRef<EChartsType | null>(null);\n  const trendChartInstance = useRef<EChartsType | null>(null);\n\n  interface ClassOption { label: string; value: string; }\n  const [classOptions, setClassOptions] = useState<ClassOption[]>([]);\n\n  const [filters, setFilters] = useState<{\n    classId: string | null;\n    leaveType: string | null;\n    period: string;\n    dateRange: [string, string]; // 确保始终有日期范围\n  }>({\n    classId: null,\n    leaveType: null,\n    period: 'MONTH',\n    dateRange: [formatDate(getCurrentMonthRange()[0]), formatDate(getCurrentMonthRange()[1])], \n  });\n\n  interface StatisticsData {\n    totalCount: number;\n    sickCount: number;\n    personalCount: number;\n    otherCount: number;\n  }\n  const [statistics, setStatistics] = useState<StatisticsData>({\n    totalCount: 0,\n    sickCount: 0,\n    personalCount: 0,\n    otherCount: 0,\n  });\n\n  interface ClassStat {\n    classId: string;\n    className: string;\n    totalStudents: number;\n    leaveStudents: number;\n    leaveRate: string;\n    leaveCount: number;\n    totalDays: number;\n    avgLeaveDays: string;\n    sickLeaveCount: number;\n    personalLeaveCount: number;\n    otherLeaveCount: number;\n  }\n  const [classStatsList, setClassStatsList] = useState<ClassStat[]>([]);\n\n  interface StudentRank {\n    studentId: string;\n    studentName: string;\n    className: string;\n    leaveCount: number;\n    totalDays: number;\n    sickLeaveCount: number;\n    personalLeaveCount: number;\n    otherLeaveCount: number;\n  }\n  const [studentRankList, setStudentRankList] = useState<StudentRank[]>([]);\n\n  const [studentRankPage, setStudentRankPage] = useState({\n    currentPage: 1,\n    pageSize: 10,\n    total: 0,\n  });\n\n  const [classDetailVisible, setClassDetailVisible] = useState(false);\n  const [selectedClass, setSelectedClass] = useState<ClassStat | null>(null);\n  const [classStudentsLoading, setClassStudentsLoading] = useState(false);\n  const [classStudentsList, setClassStudentsList] = useState<StudentRank[]>([]);\n\n  const [studentDetailVisible, setStudentDetailVisible] = useState(false);\n  interface StudentDetail extends StudentRank {\n    // 可能还有其他学生特有字段\n  }\n  const [selectedStudent, setSelectedStudent] = useState<StudentDetail | null>(null);\n  const [studentLeavesLoading, setStudentLeavesLoading] = useState(false);\n  interface LeaveRecord {\n    id: string;\n    startDate: string;\n    endDate: string;\n    days: number;\n    type?: 'SICK' | 'PERSONAL' | 'OTHER' | string; // 可选，因为可能使用leaveType\n    leaveType?: 'SICK' | 'PERSONAL' | 'OTHER' | string; // 添加leaveType字段\n    reason: string;\n    status: 'PENDING' | 'APPROVED' | 'REJECTED' | string;\n    createTime: string;\n  }\n  const [studentLeavesList, setStudentLeavesList] = useState<LeaveRecord[]>([]);\n  const [studentLeavesPage, setStudentLeavesPage] = useState({\n    currentPage: 1,\n    pageSize: 10,\n    total: 0,\n  });\n\n  // 获取班级列表\n  const getClassList = useCallback(async () => {\n    try {\n      const response = await classAPI.getAllClasses(); // 使用真实API\n      if (response && response.data) {\n        setClassOptions(response.data.map((cls: any) => ({\n          label: cls.name,\n          value: cls.id,\n        })));\n      }\n    } catch (error) {\n      console.error('获取班级列表失败:', error);\n      message.error('获取班级列表失败');\n    }\n  }, []);\n\n  // 直接渲染请假类型图表函数\n  const renderTypeChart = useCallback((data: {sickCount: number, personalCount: number, otherCount: number}) => {\n    if (!typeChartRef.current) {\n      console.log('图表容器不存在，无法渲染请假类型图表');\n      return;\n    }\n\n    console.log('渲染请假类型图表，使用数据:', data);\n\n    try {\n      // 直接使用传入的数据\n      let sickCount = data.sickCount || 0;\n      let personalCount = data.personalCount || 0;\n      let otherCount = data.otherCount || 0;\n  \n      console.log('使用数据渲染图表:', { sickCount, personalCount, otherCount });\n  \n      // 检查是否有数据\n      const hasData = sickCount > 0 || personalCount > 0 || otherCount > 0;\n  \n      // 过滤掉值为0的数据，使图表更清晰\n      const typeData = [\n        { value: sickCount, name: '病假' },\n        { value: personalCount, name: '事假' },\n        { value: otherCount, name: '其他' }\n      ].filter(item => item.value > 0);\n  \n      // 完全重置图表\n      if (typeChartInstance.current) {\n        typeChartInstance.current.dispose();\n        typeChartInstance.current = null;\n      }\n      \n      // 重新初始化图表\n      const chart = echarts.init(typeChartRef.current);\n      typeChartInstance.current = chart;\n  \n      const typeOption = {\n        tooltip: { trigger: 'item', formatter: '{a} <br/>{b}: {c} ({d}%)' },\n        legend: { \n          orient: 'vertical', \n          left: 10, \n          data: ['病假', '事假', '其他'].filter(name => {\n            if (name === '病假' && sickCount === 0) return false;\n            if (name === '事假' && personalCount === 0) return false;\n            if (name === '其他' && otherCount === 0) return false;\n            return true;\n          })\n        },\n        series: [{\n          name: '请假类型',\n          type: 'pie',\n          radius: ['50%', '70%'],\n          avoidLabelOverlap: false,\n          itemStyle: { borderRadius: 10, borderColor: '#fff', borderWidth: 2 },\n          label: { \n            show: true, \n            position: 'outside',\n            formatter: '{b}: {c} ({d}%)'\n          },\n          emphasis: { label: { show: true, fontSize: '18', fontWeight: 'bold' } },\n          labelLine: { show: true },\n          data: typeData\n        }]\n      };\n      \n      chart.setOption(typeOption as any);\n      \n      if (!hasData) {\n        chart.setOption({\n          title: {\n            text: '暂无数据',\n            left: 'center',\n            top: 'middle',\n            textStyle: {\n              color: '#999',\n              fontSize: 16\n            }\n          }\n        });\n      }\n      \n      // 立即调整大小以确保正确渲染\n      chart.resize();\n    } catch (error) {\n      console.error('渲染请假类型图表出错:', error);\n    }\n  }, []);\n\n  // 更新统计数据函数 (对应 Vue 中的 updateStatistics)\n  const updateStatisticsDisplay = useCallback(() => {\n    console.log('更新统计数据显示');\n    \n    // 创建一个新的统计数据对象，避免直接修改state\n    let newStats = {\n      totalCount: statistics.totalCount,\n      sickCount: statistics.sickCount,\n      personalCount: statistics.personalCount,\n      otherCount: statistics.otherCount\n    };\n    \n    // 如果选择了班级，使用班级的统计数据\n    if (filters.classId && classStatsList.length > 0) {\n      const classStats = classStatsList.find((cs) => cs.classId === filters.classId);\n      if (classStats) {\n        console.log('使用班级数据:', classStats);\n        newStats = {\n          totalCount: classStats.leaveCount || 0,\n          sickCount: classStats.sickLeaveCount || 0,\n          personalCount: classStats.personalLeaveCount || 0,\n          otherCount: classStats.otherLeaveCount || 0\n        };\n      }\n    }\n\n    // 如果选择了请假类型，只显示对应类型的数据\n    if (filters.leaveType) {\n      console.log('根据请假类型筛选:', filters.leaveType);\n      switch (filters.leaveType) {\n        case 'SICK':\n          newStats = {\n            totalCount: newStats.sickCount,\n            sickCount: newStats.sickCount,\n            personalCount: 0,\n            otherCount: 0\n          };\n          break;\n        case 'PERSONAL':\n          newStats = {\n            totalCount: newStats.personalCount,\n            sickCount: 0,\n            personalCount: newStats.personalCount,\n            otherCount: 0\n          };\n          break;\n        case 'OTHER':\n          newStats = {\n            totalCount: newStats.otherCount,\n            sickCount: 0,\n            personalCount: 0,\n            otherCount: newStats.otherCount\n          };\n          break;\n      }\n    }\n    \n    console.log('更新后的统计数据:', newStats);\n    \n    // 更新状态\n    setStatistics(newStats);\n    \n    // 使用requestAnimationFrame确保在下一帧渲染图表\n    requestAnimationFrame(() => {\n      if (typeChartRef.current) {\n        renderTypeChart(newStats);\n      }\n    });\n    \n  }, [filters.classId, filters.leaveType, classStatsList, renderTypeChart, statistics]);\n\n  // 初始化图表\n  const initCharts = useCallback((statsData: StatisticsData, trendData: { dates: string[], counts: number[] }) => {\n    console.log('初始化图表，统计数据:', statsData, '趋势数据:', trendData);\n    \n    // 先更新统计数据状态\n    const newStats = {\n      totalCount: statsData.totalCount || 0,\n      sickCount: statsData.sickCount || 0,\n      personalCount: statsData.personalCount || 0,\n      otherCount: statsData.otherCount || 0,\n    };\n    \n    // 不在这里设置统计数据状态，避免重复更新\n    // setStatistics(newStats);\n    \n    // 不在这里渲染请假类型图表，由getStatisticsData统一处理\n    // if (typeChartRef.current) {\n    //   renderTypeChart(newStats);\n    // }\n\n    try {\n      if (trendChartRef.current && trendData) {\n        console.log('初始化请假趋势图，数据:', trendData);\n        if (trendChartInstance.current) {\n          trendChartInstance.current.dispose();\n          trendChartInstance.current = null;\n        }\n        const chart = echarts.init(trendChartRef.current);\n        trendChartInstance.current = chart;\n        const dates = trendData.dates || [];\n        const counts = trendData.counts || [];\n        const trendOption = {\n          tooltip: { trigger: 'axis' },\n          legend: { data: ['请假数量'] },\n          grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },\n          xAxis: { type: 'category', boundaryGap: false, data: dates },\n          yAxis: { type: 'value' },\n          series: [{\n            name: '请假数量',\n            type: 'line',\n            stack: '总量',\n            data: counts,\n            areaStyle: {}\n          }]\n        };\n        chart.setOption(trendOption as any);\n        if (!dates.length || !counts.length) {\n          chart.setOption({\n            title: {\n              text: '暂无数据',\n              left: 'center',\n              top: 'middle',\n              textStyle: {\n                color: '#999',\n                fontSize: 16\n              }\n            }\n          });\n        }\n        \n        // 立即调整大小以确保正确渲染\n        chart.resize();\n      }\n    } catch (error) {\n      console.error('初始化请假趋势图表出错:', error);\n    }\n    \n    return newStats;\n  }, []);\n\n  // 定义带有timer属性的函数类型\n  interface DebouncedFunction<T extends (...args: any[]) => any> {\n    (...args: Parameters<T>): ReturnType<T>;\n    timer?: NodeJS.Timeout | null;\n  }\n\n  // 定义带有timer属性的函数类型，并允许isUserTriggered参数\n  interface GetStatisticsDataFunction {\n    (isUserTriggered?: boolean): Promise<void>;\n    timer?: NodeJS.Timeout | null;\n  }\n\n  // 定义带有timer属性的函数类型\n  interface LoadStudentRankingFunction {\n    (isUserTriggered?: boolean): Promise<void>;\n    timer?: NodeJS.Timeout | null;\n  }\n\n  // 定义带有timer属性的函数类型，用于学生请假记录加载\n  interface LoadStudentLeavesFunction {\n    (studentId: string, page?: number, pageSize?: number, isUserTriggered?: boolean): Promise<void>;\n    timer?: NodeJS.Timeout | null;\n  }\n\n  // 获取统计数据和学生排名的状态\n  const dataLoadingState = useRef({\n    statisticsLoaded: false,\n    studentRankingLoaded: false\n  });\n\n  // 获取统计数据\n  const getStatisticsData: GetStatisticsDataFunction = useCallback(async (isUserTriggered = false) => {\n    // 添加防抖，避免短时间内多次调用\n    if (!isUserTriggered && getStatisticsData.timer) {\n      console.log('【统计数据】取消之前的防抖请求');\n      clearTimeout(getStatisticsData.timer);\n    }\n\n    const executeRequest = async () => {\n      console.log('【统计数据】开始执行请求');\n      setLoading(true);\n      try {\n        const params = {\n          classId: filters.classId,\n          leaveType: filters.leaveType,\n          period: filters.period,\n          startDate: filters.dateRange[0],\n          endDate: filters.dateRange[1],\n        };\n        \n        console.log('【统计数据】请求参数:', params);\n        \n        // 获取请假统计概览\n        const statisticsResponse = await leaveStatisticsAPI.getLeaveStatistics(params);\n        const statsData = statisticsResponse.data;\n        \n        console.log('【统计数据】请假统计概览数据:', statsData);\n\n        // 获取班级请假统计\n        const classStatsResponse = await leaveStatisticsAPI.getClassLeaveStatistics(params);\n        const classStats = classStatsResponse.data || [];\n        setClassStatsList(classStats);\n\n        // 获取请假趋势数据\n        const trendResponse = await leaveStatisticsAPI.getLeaveTrendData(params);\n        \n        // 初始化趋势图表，并获取基础统计数据\n        const baseStats = initCharts(statsData, trendResponse.data);\n        \n        // 在数据加载完成后，手动处理统计数据\n        const newStats = { ...baseStats };\n        \n        // 如果选择了班级，使用班级的统计数据\n        if (filters.classId && classStats.length > 0) {\n          const selectedClass = classStats.find((cs) => cs.classId === filters.classId);\n          if (selectedClass) {\n            console.log('使用班级数据:', selectedClass);\n            Object.assign(newStats, {\n              totalCount: selectedClass.leaveCount || 0,\n              sickCount: selectedClass.sickLeaveCount || 0,\n              personalCount: selectedClass.personalLeaveCount || 0,\n              otherCount: selectedClass.otherLeaveCount || 0\n            });\n          }\n        }\n\n        // 如果选择了请假类型，只显示对应类型的数据\n        if (filters.leaveType) {\n          console.log('根据请假类型筛选:', filters.leaveType);\n          switch (filters.leaveType) {\n            case 'SICK':\n              Object.assign(newStats, {\n                totalCount: newStats.sickCount,\n                personalCount: 0,\n                otherCount: 0\n              });\n              break;\n            case 'PERSONAL':\n              Object.assign(newStats, {\n                totalCount: newStats.personalCount,\n                sickCount: 0,\n                otherCount: 0\n              });\n              break;\n            case 'OTHER':\n              Object.assign(newStats, {\n                totalCount: newStats.otherCount,\n                sickCount: 0,\n                personalCount: 0\n              });\n              break;\n          }\n        }\n        \n        // 更新统计数据状态\n        setStatistics(newStats);\n        \n        // 使用setTimeout确保DOM更新后再渲染图表\n        setTimeout(() => {\n          if (typeChartRef.current) {\n            try {\n              renderTypeChart(newStats);\n            } catch (error) {\n              console.error('渲染请假类型图表失败:', error);\n            }\n          }\n        }, 200);\n        \n        // 标记统计数据已加载\n        dataLoadingState.current.statisticsLoaded = true;\n        \n        // 统计数据加载完成后，再加载学生排名数据\n        console.log('【统计数据】加载完成，开始加载学生排名数据');\n        // 使用函数调用而不是依赖注入\n        if (dataLoadingState.current.statisticsLoaded && !dataLoadingState.current.studentRankingLoaded) {\n          loadStudentRanking(isUserTriggered);\n        }\n      } catch (error) {\n        console.error('【统计数据】获取失败:', error);\n        message.error('获取统计数据失败');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (isUserTriggered) {\n      // 用户触发的请求立即执行\n      console.log('【统计数据】用户触发，立即执行');\n      await executeRequest();\n    } else {\n      // 非用户触发的请求添加防抖\n      console.log('【统计数据】系统触发，添加防抖');\n      getStatisticsData.timer = setTimeout(executeRequest, 300);\n    }\n  }, [filters.classId, filters.leaveType, filters.period, filters.dateRange, initCharts, renderTypeChart]);\n\n  // 初始化timer属性\n  getStatisticsData.timer = null;\n\n  // 加载学生请假排名数据\n  const loadStudentRanking: LoadStudentRankingFunction = useCallback(async (isUserTriggered = false) => {\n    // 添加防抖，避免短时间内多次调用\n    if (!isUserTriggered && loadStudentRanking.timer) {\n      console.log('【学生排名】取消之前的防抖请求');\n      clearTimeout(loadStudentRanking.timer);\n    }\n\n    const executeRequest = async () => {\n      try {\n        console.log('【学生排名】开始执行请求，页码:', studentRankPage.currentPage, '每页条数:', studentRankPage.pageSize);\n        \n        const rankingParams = {\n          classId: filters.classId,\n          leaveType: filters.leaveType,\n          period: filters.period,\n          startDate: filters.dateRange[0],\n          endDate: filters.dateRange[1],\n          page: studentRankPage.currentPage - 1, // 确保页码从0开始（后端分页从0开始）\n          size: studentRankPage.pageSize,\n        };\n        \n        console.log('【学生排名】请求参数:', rankingParams);\n        \n        const rankingResponse = await leaveStatisticsAPI.getStudentLeaveRanking(rankingParams);\n        \n        // 检查 rankingResponse.data 是否符合预期的分页结构\n        if (rankingResponse.data && rankingResponse.data.content) {\n          console.log('【学生排名】获取到数据(分页):', rankingResponse.data);\n          setStudentRankList(rankingResponse.data.content);\n          setStudentRankPage(prev => ({ ...prev, total: rankingResponse.data.totalElements || 0 }));\n        } \n        // 兼容直接返回数组的情况\n        else if (Array.isArray(rankingResponse.data)) { \n          console.log('【学生排名】获取到数据(数组):', rankingResponse.data);\n          const dataArray = rankingResponse.data as StudentRank[]; // 类型断言\n          setStudentRankList(dataArray);\n          setStudentRankPage(prev => ({ ...prev, total: dataArray.length }));\n        } else {\n          // 如果数据格式不符合预期，可以设置为空或给出提示\n          console.warn('【学生排名】收到意外的数据格式:', rankingResponse.data);\n          setStudentRankList([]);\n          setStudentRankPage(prev => ({ ...prev, total: 0 }));\n        }\n        \n        // 标记学生排名数据已加载\n        dataLoadingState.current.studentRankingLoaded = true;\n      } catch (error) {\n        console.error('【学生排名】获取数据失败:', error);\n        message.error('获取学生排名数据失败');\n      }\n    };\n\n    if (isUserTriggered) {\n      // 用户触发的请求立即执行\n      console.log('【学生排名】用户触发，立即执行');\n      await executeRequest();\n    } else {\n      // 非用户触发的请求添加防抖\n      console.log('【学生排名】系统触发，添加防抖');\n      loadStudentRanking.timer = setTimeout(executeRequest, 300);\n    }\n  }, [filters.classId, filters.leaveType, filters.period, filters.dateRange, studentRankPage.currentPage, studentRankPage.pageSize]);\n  \n  // 初始化timer属性\n  loadStudentRanking.timer = null;\n\n  // 查看学生详情\n  const handleViewStudentDetail = (record: StudentRank | StudentDetail) => {\n    setSelectedStudent(record as StudentDetail); // 类型断言\n    setStudentDetailVisible(true);\n    // 重置分页到第一页\n    setStudentLeavesPage(prev => ({ ...prev, currentPage: 1 })); \n    // 加载学生请假记录，使用第1页\n    loadStudentLeaves(record.studentId, 1, studentLeavesPage.pageSize, true); // 标记为用户触发，立即执行\n  };\n  \n  // 加载学生请假记录\n  const loadStudentLeaves: LoadStudentLeavesFunction = useCallback(async (\n    studentId: string, \n    page: number = studentLeavesPage.currentPage, \n    pageSize: number = studentLeavesPage.pageSize,\n    isUserTriggered = false\n  ) => {\n    if (!studentId) return;\n    \n    // 添加防抖，避免短时间内多次调用\n    if (!isUserTriggered && loadStudentLeaves.timer) {\n      clearTimeout(loadStudentLeaves.timer);\n    }\n    \n    const executeRequest = async () => {\n      setStudentLeavesLoading(true);\n      try {\n        console.log(`加载学生请假记录，学生ID: ${studentId}, 页码: ${page}, 每页条数: ${pageSize}`);\n        \n        // 确保页码从0开始（后端分页从0开始）\n        const pageIndex = page - 1;\n        \n        const response = await leaveStatisticsAPI.getStudentLeaves(\n          studentId,\n          pageIndex,\n          pageSize\n        );\n        \n        if (response.data && response.data.content) {\n          console.log('获取到学生请假记录:', response.data);\n          const leaveRecords = response.data.content.map((leave: any) => {\n            // 检查并确保类型字段存在\n            if (!leave.type && leave.leaveType) {\n              leave.type = leave.leaveType; // 如果后端返回的是leaveType而不是type\n            }\n            \n            // 计算天数\n            const days = leave.days || Math.ceil((new Date(leave.endDate).getTime() - new Date(leave.startDate).getTime()) / (1000 * 60 * 60 * 24)) + 1;\n            \n            console.log('处理请假记录:', { ...leave, days, type: leave.type || leave.leaveType || 'UNKNOWN' });\n            \n            return {\n              ...leave,\n              days,\n              type: leave.type || leave.leaveType || 'UNKNOWN' // 确保type字段存在\n            };\n          });\n          \n          console.log('处理后的请假记录:', leaveRecords);\n          setStudentLeavesList(leaveRecords);\n          setStudentLeavesPage(prev => ({ ...prev, total: response.data.totalElements || 0 }));\n        } else if (Array.isArray(response.data)) { // 兼容直接返回数组的情况\n           console.log('获取到学生请假记录(数组):', response.data);\n           const dataArray = response.data as LeaveRecord[];\n           const leaveRecords = dataArray.map((leave: any) => {\n            // 检查并确保类型字段存在\n            if (!leave.type && leave.leaveType) {\n              leave.type = leave.leaveType; // 如果后端返回的是leaveType而不是type\n            }\n            \n            // 计算天数\n            const days = leave.days || Math.ceil((new Date(leave.endDate).getTime() - new Date(leave.startDate).getTime()) / (1000 * 60 * 60 * 24)) + 1;\n            \n            console.log('处理请假记录:', { ...leave, days, type: leave.type || leave.leaveType || 'UNKNOWN' });\n            \n            return {\n              ...leave,\n              days,\n              type: leave.type || leave.leaveType || 'UNKNOWN' // 确保type字段存在\n            };\n          });\n          \n          console.log('处理后的请假记录:', leaveRecords);\n          setStudentLeavesList(leaveRecords);\n          setStudentLeavesPage(prev => ({ ...prev, total: dataArray.length }));\n        }\n      } catch (error) {\n        console.error('获取学生请假记录失败:', error);\n        message.error('获取学生请假记录失败');\n      } finally {\n        setStudentLeavesLoading(false);\n      }\n    };\n    \n    if (isUserTriggered) {\n      // 用户触发的请求立即执行\n      await executeRequest();\n    } else {\n      // 非用户触发的请求添加防抖\n      loadStudentLeaves.timer = setTimeout(executeRequest, 300);\n    }\n  }, []);\n  \n  // 初始化timer属性\n  loadStudentLeaves.timer = null;\n\n  // 学生请假记录分页变化\n  const handleStudentLeavesPageChange = (page: number, pageSize?: number) => {\n    console.log(`分页变化: 页码=${page}, 每页条数=${pageSize}`);\n    const newPageSize = pageSize || studentLeavesPage.pageSize;\n    \n    // 先更新分页状态\n    setStudentLeavesPage(prev => ({ \n      ...prev, \n      currentPage: page, \n      pageSize: newPageSize \n    }));\n    \n    // 然后重新加载数据，使用新的分页参数\n    if (selectedStudent?.studentId) {\n      loadStudentLeaves(selectedStudent.studentId, page, newPageSize, true); // 标记为用户触发，立即执行\n    }\n  };\n\n  // 获取请假类型名称 (辅助函数)\n  const getLeaveTypeName = (type: string) => {\n    switch (type) {\n      case 'SICK': return '病假';\n      case 'PERSONAL': return '事假';\n      case 'OTHER': return '其他';\n      default: return '未知';\n    }\n  };\n\n  // 获取请假状态名称 (辅助函数)\n  const getLeaveStatusName = (status: string) => {\n    switch (status) {\n      case 'PENDING': return '待审批';\n      case 'APPROVED': return '已批准';\n      case 'REJECTED': return '已拒绝';\n      default: return '未知';\n    }\n  };\n  \n  // 班级详情对话框关闭\n  const handleClassDialogClosed = () => {\n    setClassDetailVisible(false);\n    // Vue 版本中不清空 selectedClass 和 classStudentsList，这里保持一致\n    // setSelectedClass(null);\n    // setClassStudentsList([]); \n  };\n\n  // 学生详情对话框关闭\n  const handleStudentDialogClosed = () => {\n    setStudentDetailVisible(false);\n    setSelectedStudent(null);\n    setStudentLeavesList([]);\n    setStudentLeavesPage(prev => ({ ...prev, currentPage: 1, total: 0 }));\n  };\n\n  // 组件挂载后初始化\n  useEffect(() => {\n    console.log('【组件初始化】开始获取数据');\n    // 获取班级列表\n    getClassList();\n    \n    // 确保组件完全挂载后再加载数据\n    const timer = setTimeout(() => {\n      console.log('【组件初始化】延迟加载数据');\n      // 只在组件初始化时加载一次数据\n      getStatisticsData(true); // 标记为用户触发，立即执行\n      \n      // 不在这里调用loadStudentRanking，避免重复请求\n      // loadStudentRanking会在getStatisticsData完成后自动调用\n    }, 300);\n    \n    return () => {\n      clearTimeout(timer);\n      // 清理防抖计时器\n      if (loadStudentRanking.timer) {\n        clearTimeout(loadStudentRanking.timer);\n      }\n      if (getStatisticsData.timer) {\n        clearTimeout(getStatisticsData.timer);\n      }\n      if (loadStudentLeaves.timer) {\n        clearTimeout(loadStudentLeaves.timer);\n      }\n      // 清理图表实例\n      if (typeChartInstance.current) {\n        typeChartInstance.current.dispose();\n        typeChartInstance.current = null;\n      }\n      if (trendChartInstance.current) {\n        trendChartInstance.current.dispose();\n        trendChartInstance.current = null;\n      }\n    };\n  }, [getClassList, getStatisticsData]);\n\n  // 监听筛选条件变化，重新获取数据\n  // 使用useRef来避免首次渲染时触发\n  const isInitialRender = useRef(true);\n  const isInitialStudentRankingRender = useRef(true);\n  \n  // 合并处理筛选条件变化，避免重复请求\n  useEffect(() => {\n    if (isInitialRender.current) {\n      console.log('【筛选条件】首次渲染，跳过请求');\n      isInitialRender.current = false;\n      return;\n    }\n    \n    console.log('【筛选条件变化】重新获取数据:', filters);\n    \n    // 重置加载状态\n    dataLoadingState.current = {\n      statisticsLoaded: false,\n      studentRankingLoaded: false\n    };\n    \n    // 使用防抖获取统计数据\n    getStatisticsData(); \n    // 不在这里调用loadStudentRanking，避免重复请求\n  }, [filters.classId, filters.leaveType, filters.period, filters.dateRange, getStatisticsData]);\n  \n  // 只监听学生排名分页变化，不监听筛选条件变化\n  useEffect(() => {\n    if (isInitialStudentRankingRender.current) {\n      console.log('【学生排名】首次渲染，跳过请求');\n      isInitialStudentRankingRender.current = false;\n      return;\n    }\n    \n    // 只有当分页参数变化时才重新加载学生排名\n    console.log('【学生排名分页参数变化】重新加载排名数据');\n    loadStudentRanking();\n  }, [studentRankPage.currentPage, studentRankPage.pageSize, loadStudentRanking]);\n\n  // 处理周期变化 (对应 Vue handlePeriodChange)\n  const handlePeriodChange = (value: string) => {\n    console.log('周期变化:', value);\n    // 确保newDateRange始终有值\n    let newDateRange: [string, string] = filters.dateRange; \n    if (value === 'WEEK') {\n      const weekRange = getCurrentWeekRange();\n      newDateRange = [formatDate(weekRange[0]), formatDate(weekRange[1])];\n    } else if (value === 'MONTH') {\n      const monthRange = getCurrentMonthRange();\n      newDateRange = [formatDate(monthRange[0]), formatDate(monthRange[1])];\n    } else if (value === 'CUSTOM') { \n      // 当选择 CUSTOM 时，保持当前日期范围不变\n      // 无需额外处理，因为newDateRange已经初始化为filters.dateRange\n    }\n    setFilters(prev => ({ ...prev, period: value, dateRange: newDateRange }));\n    // 周期变化后，图表会通过useEffect自动更新\n  };\n  \n  // 查询处理\n  const handleSearch = () => {\n    console.log('【用户操作】执行查询，筛选条件:', filters);\n    getStatisticsData(true); // 标记为用户触发，立即执行\n    // 不需要单独调用loadStudentRanking，它会在getStatisticsData完成后自动调用\n  };\n\n  // 重置筛选\n  const resetFilters = () => {\n    console.log('【用户操作】重置筛选条件');\n    const monthRange = getCurrentMonthRange();\n    setFilters({\n      classId: null,\n      leaveType: null,\n      period: 'MONTH',\n      dateRange: [formatDate(monthRange[0]), formatDate(monthRange[1])],\n    });\n    // filters 的变化会自动触发数据重新加载\n  };\n\n  // 刷新数据\n  const refreshData = () => {\n    console.log('【用户操作】手动刷新数据');\n    getStatisticsData(true); // 标记为用户触发，立即执行\n    // 不需要单独调用loadStudentRanking，它会在getStatisticsData完成后自动调用\n  };\n  \n  // 导出数据\n  const exportData = async () => {\n    const params = {\n      classId: filters.classId,\n      leaveType: filters.leaveType,\n      period: filters.period,\n      startDate: filters.dateRange[0],\n      endDate: filters.dateRange[1],\n    };\n    setLoading(true);\n    try {\n      const response = await leaveStatisticsAPI.exportLeaveStatistics(params);\n      \n      // 创建下载链接\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      \n      // 从响应头获取文件名，如果没有则使用默认名\n      const contentDisposition = response.headers['content-disposition'];\n      let filename = '请假统计数据.xlsx';\n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=(.*)/);\n        if (filenameMatch && filenameMatch[1]) {\n          filename = filenameMatch[1].replace(/['\"]/g, '');\n        }\n      }\n      \n      link.setAttribute('download', filename);\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      message.success('统计数据导出成功');\n    } catch (error) {\n      console.error('导出统计数据失败:', error);\n      message.error('导出统计数据失败，请稍后重试');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 表格列定义 - 班级统计\n  const classStatsColumns = [\n    { title: '班级', dataIndex: 'className', key: 'className', width: 150 },\n    { title: '班级人数', dataIndex: 'totalStudents', key: 'totalStudents', width: 100 },\n    { title: '请假人数', dataIndex: 'leaveStudents', key: 'leaveStudents', width: 100 },\n    { title: '请假率', dataIndex: 'leaveRate', key: 'leaveRate', width: 100, render: (text: string) => `${text}%` },\n    { title: '请假次数', dataIndex: 'leaveCount', key: 'leaveCount', width: 100 },\n    { title: '请假总天数', dataIndex: 'totalDays', key: 'totalDays', width: 120 },\n    { title: '人均请假天数', dataIndex: 'avgLeaveDays', key: 'avgLeaveDays', width: 120 },\n    { title: '病假次数', dataIndex: 'sickLeaveCount', key: 'sickLeaveCount', width: 100 },\n    { title: '事假次数', dataIndex: 'personalLeaveCount', key: 'personalLeaveCount', width: 100 },\n    { title: '其他请假次数', dataIndex: 'otherLeaveCount', key: 'otherLeaveCount', width: 120 },\n    {\n      title: '操作',\n      key: 'action',\n      fixed: 'right' as const,\n      width: 120,\n      render: (_: any, record: ClassStat) => (\n        <Button type=\"primary\" size=\"small\" onClick={() => handleViewClassDetail(record)}>\n          查看详情\n        </Button>\n      ),\n    },\n  ];\n\n  // 表格列定义 - 学生排名\n  const studentRankColumns = [\n    { title: '排名', dataIndex: 'rank', key: 'rank', width: 80, render: (text:any, record:any, index:number) => (studentRankPage.currentPage - 1) * studentRankPage.pageSize + index + 1 },\n    { title: '学生姓名', dataIndex: 'studentName', key: 'studentName', width: 120 },\n    { title: '班级', dataIndex: 'className', key: 'className', width: 150 },\n    { title: '请假次数', dataIndex: 'leaveCount', key: 'leaveCount', width: 100 },\n    { title: '请假总天数', dataIndex: 'totalDays', key: 'totalDays', width: 120 },\n    { title: '病假次数', dataIndex: 'sickLeaveCount', key: 'sickLeaveCount', width: 100 },\n    { title: '事假次数', dataIndex: 'personalLeaveCount', key: 'personalLeaveCount', width: 100 },\n    { title: '其他请假次数', dataIndex: 'otherLeaveCount', key: 'otherLeaveCount', width: 120 },\n    {\n      title: '操作',\n      key: 'action',\n      fixed: 'right' as const,\n      width: 120,\n      render: (_: any, record: StudentRank) => (\n        <Button type=\"primary\" size=\"small\" onClick={() => handleViewStudentDetail(record)}>\n          查看详情\n        </Button>\n      ),\n    },\n  ];\n  \n  // 学生请假记录表格列定义\n  const studentLeavesColumns = [\n    { title: '开始日期', dataIndex: 'startDate', key: 'startDate', width: 120 },\n    { title: '结束日期', dataIndex: 'endDate', key: 'endDate', width: 120 },\n    { title: '天数', dataIndex: 'days', key: 'days', width: 80 },\n    {\n      title: '请假类型',\n      dataIndex: 'type',\n      key: 'type',\n      width: 100,\n      render: (type: string, record: any) => {\n        console.log('渲染请假类型:', type, '完整记录:', record);\n        let color = '';\n        if (type === 'SICK') color = 'volcano';\n        else if (type === 'PERSONAL') color = 'orange';\n        else if (type === 'OTHER') color = 'geekblue';\n        \n        // 如果type为空，尝试使用leaveType\n        const displayType = type || record.leaveType || 'UNKNOWN';\n        \n        return <Tag color={color}>{getLeaveTypeName(displayType)}</Tag>;\n      },\n    },\n    { title: '请假原因', dataIndex: 'reason', key: 'reason' },\n    {\n      title: '状态',\n      dataIndex: 'status',\n      key: 'status',\n      width: 100,\n      render: (status: string) => {\n        let color = '';\n        if (status === 'PENDING') color = 'gold';\n        else if (status === 'APPROVED') color = 'green';\n        else if (status === 'REJECTED') color = 'red';\n        return <Tag color={color}>{getLeaveStatusName(status)}</Tag>;\n      },\n    },\n    { title: '申请时间', dataIndex: 'createTime', key: 'createTime', width: 180, render: (text: string) => text ? new Date(text).toLocaleString() : '' },\n  ];\n\n\n  // 查看班级详情\n  const handleViewClassDetail = async (record: ClassStat) => {\n    setSelectedClass(record);\n    setClassDetailVisible(true);\n    setClassStudentsLoading(true);\n    try {\n      const params = {\n        classId: record.classId,\n        leaveType: filters.leaveType,\n        period: filters.period,\n        startDate: filters.dateRange?.[0],\n        endDate: filters.dateRange?.[1],\n        page: 0, \n        size: 50 \n      };\n      const response = await leaveStatisticsAPI.getStudentLeaveRanking(params);\n      if (response.data && response.data.content) {\n        setClassStudentsList(response.data.content);\n      } else if (Array.isArray(response.data)) {\n        setClassStudentsList(response.data as StudentRank[]);\n      }\n    } catch (error) {\n      console.error('获取班级学生请假排名失败:', error);\n      message.error('获取班级学生请假排名失败');\n    } finally {\n      setClassStudentsLoading(false);\n    }\n  };\n\n  // 窗口大小变化时重新调整图表大小\n  useEffect(() => {\n    const resizeHandler = () => {\n      console.log('窗口大小变化，调整图表大小');\n      try {\n        if (typeChartInstance.current) {\n          typeChartInstance.current.resize();\n        }\n        if (trendChartInstance.current) {\n          trendChartInstance.current.resize();\n        }\n      } catch (error) {\n        console.error('调整图表大小失败:', error);\n      }\n    };\n    \n    window.addEventListener('resize', resizeHandler);\n    \n    // 初始调整一次大小\n    setTimeout(resizeHandler, 500);\n    \n    return () => {\n      window.removeEventListener('resize', resizeHandler);\n      if (typeChartInstance.current) {\n        typeChartInstance.current.dispose();\n        typeChartInstance.current = null;\n      }\n      if (trendChartInstance.current) {\n        trendChartInstance.current.dispose();\n        trendChartInstance.current = null;\n      }\n    };\n  }, []);\n\n  // 组件卸载时清理所有资源\n  useEffect(() => {\n    return () => {\n      console.log('【组件卸载】清理所有资源');\n      // 重置加载状态\n      dataLoadingState.current = {\n        statisticsLoaded: false,\n        studentRankingLoaded: false\n      };\n      \n      // 清理所有定时器\n      if (getStatisticsData.timer) {\n        clearTimeout(getStatisticsData.timer);\n        getStatisticsData.timer = null;\n      }\n      \n      if (loadStudentRanking.timer) {\n        clearTimeout(loadStudentRanking.timer);\n        loadStudentRanking.timer = null;\n      }\n      \n      if (loadStudentLeaves.timer) {\n        clearTimeout(loadStudentLeaves.timer);\n        loadStudentLeaves.timer = null;\n      }\n      \n      // 清理图表实例\n      if (typeChartInstance.current) {\n        typeChartInstance.current.dispose();\n        typeChartInstance.current = null;\n      }\n      \n      if (trendChartInstance.current) {\n        trendChartInstance.current.dispose();\n        trendChartInstance.current = null;\n      }\n    };\n  }, []);\n\n  // JSX 结构\n  return (\n    <div className=\"leave-statistics-container\" style={{ padding: '20px'}}>\n      <Spin spinning={loading}>\n        {/* 页面头部 */}\n        <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: 20 }}>\n          <Col>\n            <h2 style={{ margin: 0, fontWeight: 600, color: '#333' }}>学生请假统计</h2>\n          </Col>\n          <Col>\n            <Space>\n              <Button type=\"primary\" icon={<DownloadOutlined />} onClick={exportData}>\n                导出统计数据\n              </Button>\n              <Button icon={<ReloadOutlined />} onClick={refreshData}>\n                刷新数据\n              </Button>\n            </Space>\n          </Col>\n        </Row>\n\n        {/* 筛选区域 */}\n        <Card style={{ marginBottom: 20 }}>\n          <Space wrap style={{width: '100%'}}>\n             <Select\n                value={filters.classId}\n                onChange={(value: string | null) => setFilters(prev => ({ ...prev, classId: value }))}\n                options={classOptions}\n                placeholder=\"请选择班级\"\n                allowClear\n                style={{ width: 150 }}\n              />\n             <Select\n                value={filters.leaveType}\n                onChange={(value: string | null) => setFilters(prev => ({ ...prev, leaveType: value }))}\n                options={[\n                  { label: '病假', value: 'SICK' },\n                  { label: '事假', value: 'PERSONAL' },\n                  { label: '其他', value: 'OTHER' }\n                ]}\n                placeholder=\"请选择类型\"\n                allowClear\n                style={{ width: 150 }}\n              />\n            <Select\n              value={filters.period}\n              onChange={handlePeriodChange}\n              options={[\n                { label: '本周', value: 'WEEK' },\n                { label: '本月', value: 'MONTH' },\n                { label: '自定义', value: 'CUSTOM' } // 移除本学期选项\n              ]}\n              placeholder=\"请选择统计周期\"\n              style={{ width: 150 }}\n            />\n            {filters.period === 'CUSTOM' && (\n              <RangePicker\n                value={[\n                  dayjs(filters.dateRange[0]), \n                  dayjs(filters.dateRange[1])\n                ]}\n                onChange={(dates, dateStrings) => {\n                  console.log('自定义日期范围变化:', dateStrings);\n                  // 确保始终有有效的日期范围\n                  const validDateRange: [string, string] = dateStrings[0] && dateStrings[1] \n                    ? [dateStrings[0], dateStrings[1]] \n                    : filters.dateRange;\n                  setFilters(prev => ({ ...prev, dateRange: validDateRange }));\n                  // 日期范围变化后，图表会通过useEffect自动更新\n                }}\n                format=\"YYYY-MM-DD\"\n              />\n            )}\n            <Button type=\"primary\" icon={<SearchOutlined />} onClick={handleSearch}>查询</Button>\n            <Button onClick={resetFilters}>重置</Button>\n          </Space>\n        </Card>\n\n        {/* 统计概览 */}\n        <Row gutter={20} style={{ marginBottom: 20 }}>\n          <Col xs={24} sm={12} md={6}>\n            <Card className=\"stat-card\" style={{ background: 'linear-gradient(135deg, #6b73ff 0%, #8f93fb 100%)' }}>\n              <div style={{ fontSize: 32, fontWeight: 'bold', marginBottom: 10 }}>{statistics.totalCount}</div>\n              <div style={{ fontSize: 16 }}>请假总数</div>\n            </Card>\n          </Col>\n          <Col xs={24} sm={12} md={6}>\n            <Card className=\"stat-card\" style={{ background: 'linear-gradient(135deg, #ff7676 0%, #f54ea2 100%)' }}>\n              <div style={{ fontSize: 32, fontWeight: 'bold', marginBottom: 10 }}>{statistics.sickCount}</div>\n              <div style={{ fontSize: 16 }}>病假数量</div>\n            </Card>\n          </Col>\n          <Col xs={24} sm={12} md={6}>\n            <Card className=\"stat-card\" style={{ background: 'linear-gradient(135deg, #42b4ff 0%, #4262ff 100%)' }}>\n              <div style={{ fontSize: 32, fontWeight: 'bold', marginBottom: 10 }}>{statistics.personalCount}</div>\n              <div style={{ fontSize: 16 }}>事假数量</div>\n            </Card>\n          </Col>\n          <Col xs={24} sm={12} md={6}>\n            <Card className=\"stat-card\" style={{ background: 'linear-gradient(135deg, #ffb199 0%, #ff0844 100%)' }}>\n              <div style={{ fontSize: 32, fontWeight: 'bold', marginBottom: 10 }}>{statistics.otherCount}</div>\n              <div style={{ fontSize: 16 }}>其他请假</div>\n            </Card>\n          </Col>\n        </Row>\n\n        {/* 图表区域 */}\n        <Row gutter={20} style={{ marginBottom: 20 }}>\n          <Col xs={24} md={12}>\n            <Card title=\"请假类型分布\" styles={{header: {textAlign: 'center', fontWeight: 500}}}>\n              <div ref={typeChartRef} className=\"chart-container\"></div>\n            </Card>\n          </Col>\n          <Col xs={24} md={12}>\n            <Card title=\"请假趋势\" styles={{header: {textAlign: 'center', fontWeight: 500}}}>\n              <div ref={trendChartRef} className=\"chart-container\"></div>\n            </Card>\n          </Col>\n        </Row>\n\n        {/* 班级请假统计表格 */}\n        <Card title=\"班级请假统计\" style={{ marginBottom: 20 }} styles={{header: {fontWeight: 500}}}>\n          <Table\n            columns={classStatsColumns}\n            dataSource={classStatsList}\n            rowKey=\"classId\"\n            bordered\n            scroll={{ x: 'max-content' }}\n            pagination={false} // Vue版本似乎没有分页\n          />\n        </Card>\n\n        {/* 学生请假排名表格 */}\n        <Card title=\"学生请假排名\" style={{ marginBottom: 20 }} styles={{header: {fontWeight: 500}}}>\n          <Table\n            columns={studentRankColumns}\n            dataSource={studentRankList}\n            rowKey=\"studentId\"\n            bordered\n            scroll={{ x: 'max-content' }}\n            pagination={{\n              current: studentRankPage.currentPage,\n              pageSize: studentRankPage.pageSize,\n              total: studentRankPage.total,\n              showSizeChanger: true,\n              showQuickJumper: true,\n              pageSizeOptions: ['10', '20', '50', '100'],\n              onChange: (page: number, pageSize: number) => {\n                console.log(`学生排名分页变化: 页码=${page}, 每页条数=${pageSize}`);\n                setStudentRankPage({ \n                  currentPage: page, \n                  pageSize: pageSize || studentRankPage.pageSize, \n                  total: studentRankPage.total \n                });\n                // 页码变化会通过useEffect触发loadStudentRanking\n              },\n              onShowSizeChange: (current: number, size: number) => {\n                console.log(`学生排名每页条数变化: 页码=${current}, 新的每页条数=${size}`);\n                setStudentRankPage({ \n                  currentPage: 1, // 改为重置到第一页\n                  pageSize: size, \n                  total: studentRankPage.total \n                });\n                // 每页条数变化会通过useEffect触发loadStudentRanking\n              },\n              showTotal: (total: number) => `共 ${total} 条`,\n            }}\n          />\n        </Card>\n        \n        {/* 班级详情对话框 */}\n        <Modal\n          title=\"班级请假详情\"\n          open={classDetailVisible}\n          onCancel={handleClassDialogClosed}\n          footer={null} // 无底部按钮\n          width=\"80%\"\n          destroyOnHidden // 替换过时的 destroyOnClose\n          style={{ top: 20 }}\n          zIndex={1050}\n          centered\n          className=\"leave-statistics-modal\"\n        >\n          {selectedClass && (\n            <div className=\"class-detail\">\n              <Descriptions title={selectedClass.className} bordered column={3} style={{marginBottom: 20}}>\n                <Descriptions.Item label=\"班级人数\">{selectedClass.totalStudents}</Descriptions.Item>\n                <Descriptions.Item label=\"请假人数\">{selectedClass.leaveStudents}</Descriptions.Item>\n                <Descriptions.Item label=\"请假率\">{selectedClass.leaveRate}%</Descriptions.Item>\n              </Descriptions>\n              <Tabs defaultActiveKey=\"stats\">\n                <TabPane tab=\"请假统计\" key=\"stats\">\n                  <Descriptions bordered column={3}>\n                    <Descriptions.Item label=\"请假总次数\">{selectedClass.leaveCount}</Descriptions.Item>\n                    <Descriptions.Item label=\"请假总天数\">{selectedClass.totalDays}</Descriptions.Item>\n                    <Descriptions.Item label=\"人均请假天数\">{selectedClass.avgLeaveDays}</Descriptions.Item>\n                    <Descriptions.Item label=\"病假次数\">{selectedClass.sickLeaveCount}</Descriptions.Item>\n                    <Descriptions.Item label=\"事假次数\">{selectedClass.personalLeaveCount}</Descriptions.Item>\n                    <Descriptions.Item label=\"其他请假次数\">{selectedClass.otherLeaveCount}</Descriptions.Item>\n                  </Descriptions>\n                </TabPane>\n                <TabPane tab=\"班级学生请假排名\" key=\"ranking\">\n                  <Spin spinning={classStudentsLoading}>\n                    <Table\n                      columns={studentRankColumns.filter(col => col.key !== 'action').map(col => ({...col, fixed: col.fixed ? col.fixed as 'left' | 'right' | undefined : undefined}))}\n                      dataSource={classStudentsList}\n                      rowKey=\"studentId\"\n                      bordered\n                      pagination={false}\n                    />\n                  </Spin>\n                </TabPane>\n              </Tabs>\n            </div>\n          )}\n        </Modal>\n\n        {/* 学生详情对话框 */}\n        <Modal\n          title=\"学生请假详情\"\n          open={studentDetailVisible}\n          onCancel={handleStudentDialogClosed}\n          footer={null}\n          width=\"80%\"\n          destroyOnHidden\n          style={{ top: 20 }}\n          zIndex={1050}\n          centered\n          className=\"leave-statistics-modal\"\n        >\n          {selectedStudent && (\n            <div className=\"student-detail\">\n               <Descriptions title={selectedStudent.studentName} bordered column={3} style={{marginBottom: 20}}>\n                <Descriptions.Item label=\"班级\">{selectedStudent.className}</Descriptions.Item>\n                <Descriptions.Item label=\"请假总次数\">{selectedStudent.leaveCount}</Descriptions.Item>\n                <Descriptions.Item label=\"请假总天数\">{selectedStudent.totalDays}</Descriptions.Item>\n              </Descriptions>\n              <Tabs defaultActiveKey=\"stats\">\n                <TabPane tab=\"请假统计\" key=\"stats\">\n                   <Descriptions bordered column={3}>\n                    <Descriptions.Item label=\"病假次数\">{selectedStudent.sickLeaveCount}</Descriptions.Item>\n                    <Descriptions.Item label=\"事假次数\">{selectedStudent.personalLeaveCount}</Descriptions.Item>\n                    <Descriptions.Item label=\"其他请假次数\">{selectedStudent.otherLeaveCount}</Descriptions.Item>\n                  </Descriptions>\n                </TabPane>\n                <TabPane tab=\"请假记录\" key=\"records\">\n                  <Spin spinning={studentLeavesLoading}>\n                    <Table\n                      columns={studentLeavesColumns}\n                      dataSource={studentLeavesList}\n                      rowKey=\"id\"\n                      bordered\n                      pagination={{\n                        current: studentLeavesPage.currentPage,\n                        pageSize: studentLeavesPage.pageSize,\n                        total: studentLeavesPage.total,\n                        showSizeChanger: true,\n                        showQuickJumper: true,\n                        pageSizeOptions: ['10', '20', '50', '100'],\n                        onChange: handleStudentLeavesPageChange,\n                        onShowSizeChange: (current: number, size: number) => handleStudentLeavesPageChange(1, size), // 页大小变化重置到第一页\n                        showTotal: (total: number) => `共 ${total} 条`,\n                      }}\n                    />\n                  </Spin>\n                </TabPane>\n              </Tabs>\n            </div>\n          )}\n        </Modal>\n\n      </Spin>\n    </div>\n  );\n};\n\nexport default LeaveStatistics; ","import axiosInstance from './axios';\r\nimport axios from 'axios';\r\n\r\ninterface ClassInfo {\r\n  id?: number;\r\n  name: string;\r\n  className?: string;\r\n  grade: string;\r\n  headTeacher?: any;\r\n  studentCount?: number;\r\n  description?: string;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\n// 创建一个专用于直接请求后端的axios实例\r\nconst directAxios = axios.create({\r\n  baseURL: 'http://124.70.74.246:8081',\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器 - 添加认证令牌\r\ndirectAxios.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * 获取所有班级\r\n * @returns Promise\r\n */\r\nexport const getAllClasses = async () => {\r\n  try {\r\n    console.log('开始获取所有班级数据');\r\n    \r\n    // 检查认证令牌\r\n    const token = localStorage.getItem('token');\r\n    console.log('当前认证令牌:', token ? '有效' : '无效或不存在');\r\n\r\n    // 直接请求后端\r\n    console.log('直接请求后端 http://124.70.74.246:8081/api/classes');\r\n    const response = await directAxios.get('/api/classes');\r\n    console.log('获取班级成功:', response);\r\n    return response;\r\n  } catch (error: any) {\r\n    console.error('获取所有班级失败:', error);\r\n    console.error('错误详情:', error.response ? {\r\n      状态码: error.response.status,\r\n      数据: error.response.data,\r\n      请求头: error.response.headers\r\n    } : '无响应详情');\r\n    \r\n    // 如果是认证错误，提示用户\r\n    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n      console.error('认证失败，请确保已登录并有权限访问班级信息');\r\n    }\r\n    \r\n    throw error; // 将错误抛出，由调用方处理\r\n  }\r\n};\r\n\r\n/**\r\n * 根据ID获取班级\r\n * @param id 班级ID\r\n * @returns Promise\r\n */\r\nexport const getClassById = async (id: number) => {\r\n  try {\r\n    return await directAxios.get(`/api/classes/${id}`);\r\n  } catch (error) {\r\n    console.error(`获取班级ID=${id}失败:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 搜索班级\r\n * @param query 搜索关键词\r\n * @returns Promise\r\n */\r\nexport const searchClasses = async (query: string) => {\r\n  try {\r\n    return await directAxios.get(`/api/classes/search?query=${query}`);\r\n  } catch (error) {\r\n    console.error(`搜索班级\"${query}\"失败:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 根据班主任ID获取班级\r\n * @param teacherId 班主任ID\r\n * @returns Promise\r\n */\r\nexport const getClassesByTeacher = async (teacherId: number) => {\r\n  try {\r\n    return await directAxios.get(`/api/classes/teacher/${teacherId}`);\r\n  } catch (error) {\r\n    console.error(`获取班主任ID=${teacherId}的班级失败:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 创建班级\r\n * @param classInfo 班级信息\r\n * @returns Promise\r\n */\r\nexport const createClass = async (classInfo: ClassInfo) => {\r\n  try {\r\n    return await directAxios.post('/api/classes', classInfo);\r\n  } catch (error) {\r\n    console.error('创建班级失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 更新班级信息\r\n * @param id 班级ID\r\n * @param classInfo 班级信息\r\n * @returns Promise\r\n */\r\nexport const updateClass = async (id: number, classInfo: ClassInfo) => {\r\n  try {\r\n    return await directAxios.put(`/api/classes/${id}`, classInfo);\r\n  } catch (error) {\r\n    console.error(`更新班级ID=${id}失败:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 删除班级\r\n * @param id 班级ID\r\n * @returns Promise\r\n */\r\nexport const deleteClass = async (id: number) => {\r\n  try {\r\n    return await directAxios.delete(`/api/classes/${id}`);\r\n  } catch (error) {\r\n    console.error(`删除班级ID=${id}失败:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 分配班主任\r\n * @param classId 班级ID\r\n * @param teacherId 班主任ID\r\n * @returns Promise\r\n */\r\nexport const assignHeadTeacher = async (classId: number, teacherId: number) => {\r\n  try {\r\n    return await directAxios.put(`/api/classes/${classId}/assign/${teacherId}`);\r\n  } catch (error) {\r\n    console.error(`为班级ID=${classId}分配班主任ID=${teacherId}失败:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 获取班级学生列表\r\n * @param classId 班级ID\r\n * @returns Promise\r\n */\r\nexport const getClassStudents = async (classId: string | number) => {\r\n  try {\r\n    console.log(`开始获取班级ID=${classId}的学生列表`);\r\n    return await directAxios.get(`/api/classes/${classId}/students`);\r\n  } catch (error) {\r\n    console.error(`获取班级ID=${classId}的学生列表失败:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 获取班级学生下拉选项\r\n * @param classId 班级ID\r\n * @returns Promise\r\n */\r\nexport const getStudentSelectOptions = async (classId: string | number) => {\r\n  try {\r\n    console.log(`开始获取班级ID=${classId}的学生下拉选项`);\r\n    return await directAxios.get(`/api/students/class/${classId}/select`);\r\n  } catch (error) {\r\n    console.error(`获取班级ID=${classId}的学生下拉选项失败:`, error);\r\n    throw error;\r\n  }\r\n}; ","/**\r\n * 格式化日期时间\r\n * @param dateTime 日期时间字符串或Date对象\r\n * @returns 格式化后的日期时间字符串\r\n */\r\nexport const formatDateTime = (dateTime: string | Date | undefined | any): string => {\r\n  if (!dateTime) return '';\r\n  \r\n  try {\r\n    // 处理数组格式的日期 [年, 月, 日, 时, 分, 秒]\r\n    if (Array.isArray(dateTime)) {\r\n      const [year, month, day, hour = 0, minute = 0] = dateTime;\r\n      return `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')} ${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\r\n    }\r\n    \r\n    // 处理普通日期对象或字符串\r\n    const date = new Date(dateTime);\r\n    \r\n    // 检查日期是否有效\r\n    if (isNaN(date.getTime())) {\r\n      return String(dateTime);\r\n    }\r\n    \r\n    // 获取年、月、日、时、分\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const hours = String(date.getHours()).padStart(2, '0');\r\n    const minutes = String(date.getMinutes()).padStart(2, '0');\r\n    \r\n    // 返回格式化后的日期时间字符串\r\n    return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n  } catch (error) {\r\n    console.error('日期格式化错误:', error, dateTime);\r\n    return String(dateTime);\r\n  }\r\n};\r\n\r\n/**\r\n * 格式化日期\r\n * @param date 日期字符串或Date对象\r\n * @returns 格式化后的日期字符串\r\n */\r\nexport const formatDate = (date: string | Date | undefined): string => {\r\n  if (!date) return '';\r\n  \r\n  const dateObj = new Date(date);\r\n  \r\n  // 获取年、月、日\r\n  const year = dateObj.getFullYear();\r\n  const month = String(dateObj.getMonth() + 1).padStart(2, '0');\r\n  const day = String(dateObj.getDate()).padStart(2, '0');\r\n  \r\n  // 返回格式化后的日期字符串\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\n/**\r\n * 格式化时间\r\n * @param time 时间字符串或Date对象\r\n * @returns 格式化后的时间字符串\r\n */\r\nexport const formatTime = (time: string | Date | undefined): string => {\r\n  if (!time) return '';\r\n  \r\n  const timeObj = new Date(time);\r\n  \r\n  // 获取时、分、秒\r\n  const hours = String(timeObj.getHours()).padStart(2, '0');\r\n  const minutes = String(timeObj.getMinutes()).padStart(2, '0');\r\n  const seconds = String(timeObj.getSeconds()).padStart(2, '0');\r\n  \r\n  // 返回格式化后的时间字符串\r\n  return `${hours}:${minutes}:${seconds}`;\r\n};\r\n\r\n/**\r\n * 获取当前周的日期范围\r\n * @returns [开始日期, 结束日期]\r\n */\r\nexport const getCurrentWeekRange = (): [Date, Date] => {\r\n  const now = new Date();\r\n  const dayOfWeek = now.getDay() || 7; // 周日为0，转换为7\r\n  \r\n  // 计算本周的第一天 (周一)\r\n  const firstDay = new Date(now);\r\n  firstDay.setDate(now.getDate() - dayOfWeek + 1);\r\n  firstDay.setHours(0, 0, 0, 0);\r\n  \r\n  // 计算本周的最后一天 (周日)\r\n  const lastDay = new Date(now);\r\n  lastDay.setDate(now.getDate() + (7 - dayOfWeek));\r\n  lastDay.setHours(23, 59, 59, 999);\r\n  \r\n  return [firstDay, lastDay];\r\n};\r\n\r\n/**\r\n * 获取当前月的日期范围\r\n * @returns [开始日期, 结束日期]\r\n */\r\nexport const getCurrentMonthRange = (): [Date, Date] => {\r\n  const now = new Date();\r\n  \r\n  // 计算本月的第一天\r\n  const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);\r\n  firstDay.setHours(0, 0, 0, 0);\r\n  \r\n  // 计算本月的最后一天\r\n  const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n  lastDay.setHours(23, 59, 59, 999);\r\n  \r\n  return [firstDay, lastDay];\r\n};\r\n\r\n/**\r\n * 获取当前学期的日期范围\r\n * @returns [开始日期, 结束日期]\r\n */\r\nexport const getCurrentSemesterRange = (): [Date, Date] => {\r\n  const now = new Date();\r\n  let firstDay: Date;\r\n  let lastDay: Date;\r\n  \r\n  // 上半年为第一学期，下半年为第二学期\r\n  if (now.getMonth() < 6) { // 1月-6月\r\n    firstDay = new Date(now.getFullYear(), 0, 1); // 1月1日\r\n    lastDay = new Date(now.getFullYear(), 5, 30); // 6月30日\r\n  } else { // 7月-12月\r\n    firstDay = new Date(now.getFullYear(), 6, 1); // 7月1日\r\n    lastDay = new Date(now.getFullYear(), 11, 31); // 12月31日\r\n  }\r\n  \r\n  firstDay.setHours(0, 0, 0, 0);\r\n  lastDay.setHours(23, 59, 59, 999);\r\n  \r\n  return [firstDay, lastDay];\r\n}; "],"names":["directAxios","axios","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","concat","error","Promise","reject","API_URL","getStudentLeaveRanking","async","classId","leaveType","period","startDate","endDate","page","size","params","url","get","RangePicker","DatePicker","TabPane","Tabs","LeaveStatistics","loading","setLoading","useState","typeChartRef","useRef","trendChartRef","typeChartInstance","trendChartInstance","classOptions","setClassOptions","filters","setFilters","dateRange","formatDate","getCurrentMonthRange","statistics","setStatistics","totalCount","sickCount","personalCount","otherCount","classStatsList","setClassStatsList","studentRankList","setStudentRankList","studentRankPage","setStudentRankPage","currentPage","pageSize","total","classDetailVisible","setClassDetailVisible","selectedClass","setSelectedClass","classStudentsLoading","setClassStudentsLoading","classStudentsList","setClassStudentsList","studentDetailVisible","setStudentDetailVisible","selectedStudent","setSelectedStudent","studentLeavesLoading","setStudentLeavesLoading","studentLeavesList","setStudentLeavesList","studentLeavesPage","setStudentLeavesPage","getClassList","useCallback","response","classAPI","data","map","cls","label","name","value","id","console","message","renderTypeChart","current","log","hasData","typeData","filter","item","dispose","chart","echarts","typeOption","tooltip","trigger","formatter","legend","orient","left","series","type","radius","avoidLabelOverlap","itemStyle","borderRadius","borderColor","borderWidth","show","position","emphasis","fontSize","fontWeight","labelLine","setOption","title","text","top","textStyle","color","resize","initCharts","newStats","length","classStats","find","cs","leaveCount","sickLeaveCount","personalLeaveCount","otherLeaveCount","requestAnimationFrame","statsData","trendData","dates","counts","trendOption","grid","right","bottom","containLabel","xAxis","boundaryGap","yAxis","stack","areaStyle","dataLoadingState","statisticsLoaded","studentRankingLoaded","getStatisticsData","isUserTriggered","arguments","undefined","timer","clearTimeout","executeRequest","statisticsResponse","leaveStatisticsAPI","classStatsResponse","trendResponse","baseStats","_objectSpread","Object","assign","setTimeout","loadStudentRanking","rankingParams","rankingResponse","content","prev","totalElements","Array","isArray","dataArray","warn","loadStudentLeaves","studentId","pageIndex","leaveRecords","leave","days","Math","ceil","Date","getTime","handleStudentLeavesPageChange","newPageSize","getLeaveTypeName","getLeaveStatusName","status","useEffect","isInitialRender","isInitialStudentRankingRender","classStatsColumns","dataIndex","key","width","render","fixed","_","record","_jsx","Button","onClick","handleViewClassDetail","children","studentRankColumns","index","handleViewStudentDetail","studentLeavesColumns","displayType","Tag","toLocaleString","_filters$dateRange","_filters$dateRange2","resizeHandler","window","addEventListener","removeEventListener","className","style","padding","_jsxs","Spin","spinning","Row","justify","align","marginBottom","Col","margin","Space","icon","DownloadOutlined","responseType","URL","createObjectURL","Blob","link","document","createElement","href","contentDisposition","filename","filenameMatch","match","replace","setAttribute","body","appendChild","click","removeChild","success","ReloadOutlined","refreshData","Card","wrap","Select","onChange","options","placeholder","allowClear","newDateRange","weekRange","getCurrentWeekRange","monthRange","dayjs","dateStrings","validDateRange","format","SearchOutlined","handleSearch","resetFilters","gutter","xs","sm","md","background","styles","header","textAlign","ref","Table","columns","dataSource","rowKey","bordered","scroll","x","pagination","showSizeChanger","showQuickJumper","pageSizeOptions","onShowSizeChange","showTotal","Modal","open","onCancel","handleClassDialogClosed","footer","destroyOnHidden","zIndex","centered","Descriptions","column","Item","totalStudents","leaveStudents","leaveRate","defaultActiveKey","tab","totalDays","avgLeaveDays","col","handleStudentDialogClosed","studentName","getAllClasses","状态码","数据","请求头","searchClasses","query","createClass","post","classInfo","updateClass","put","deleteClass","delete","assignHeadTeacher","teacherId","getStudentSelectOptions","formatDateTime","dateTime","year","month","day","hour","minute","String","padStart","date","isNaN","getFullYear","getMonth","getDate","hours","getHours","minutes","getMinutes","dateObj","now","dayOfWeek","getDay","firstDay","setDate","setHours","lastDay","getCurrentSemesterRange"],"sourceRoot":""}